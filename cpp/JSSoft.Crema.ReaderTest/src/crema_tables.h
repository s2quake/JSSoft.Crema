#pragma once
#include "reader/include/crema/inidata.h"
#include "crema_types.h"
#include "crema_base.h"

namespace cremacode
{
    class Table_inerrantRow : public CremaRow
    {
    public: 
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 12:06:03
        char Elicia;
        /// <summary>
        /// AFDC Arleen certainest nonterminal Arno Accra musicking
        /// </summary>
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:44:50
        time_t execrably;
        /// <summary>
        /// trophic mugginess amanuensis
        /// </summary>
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 12:06:03
        Type_rennet exclusionary;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type15 bulky;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float scintillation;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 12:06:03
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 12:06:03
        std::string triffid;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 12:06:03
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 12:06:03
        unsigned short groveling;
        const class Table_inerrantTable* Table;
    public: 
        Table_inerrantRow(CremaReader::irow& row, Table_inerrantTable* table);
    };
    // Modifier: Admin_cenotaphs
    // ModifiedDateTime: 2016-07-25 오후 12:06:03
    // ContentsModifier: Member_potage
    // ContentsModifiedDateTime: 2016-07-25 오전 11:35:33
    class Table_inerrantTable : public CremaTable<Table_inerrantRow>
    {
    public: 
        Table_inerrantTable();
        Table_inerrantTable(CremaReader::itable& table);
    public: 
        virtual ~Table_inerrantTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_inerrantRow* Find(char Elicia) const;
    };
    class Table204Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Shaylah lipread Svengali recessional tidewater Belgrade rapping rapturousness
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        short laundrymen;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        std::string Donaugh;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        unsigned char Bodhidharma;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        char ample;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        time_t befoul;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        short Taliesin;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        short falseness;
        /// <summary>
        /// chivalrously Ola blameworthy spotty Oxonian Lowrance Garth Hull ons Jazmin hosier smallholders harpsichord conductress Bobbee biserial darer prologize
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:14:47
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:14:47
        Type80 heathenism;
        const class Table204Table* Table;
    public: 
        Table204Row(CremaReader::irow& row, Table204Table* table);
    };
    // Creator: Admin_snootily
    // CreatedDateTime: 2016-07-25 오후 6:14:47
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오후 6:14:47
    class Table204Table : public CremaTable<Table204Row>
    {
    public: 
        Table204Table();
        Table204Table(CremaReader::itable& table);
    public: 
        virtual ~Table204Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table204Row* Find(short laundrymen, Type80 heathenism) const;
    };
    class Table_CarolRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table_CarolTable* Table;
    public: 
        Table_CarolRow(CremaReader::irow& row, Table_CarolTable* table);
    };
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 4:48:12
    class Table_CarolTable : public CremaTable<Table_CarolRow>
    {
    public: 
        Table_CarolTable();
        Table_CarolTable(CremaReader::itable& table);
    public: 
        virtual ~Table_CarolTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_CarolRow* Find(Type6 lumberyard, char uncap) const;
    };
    class Table141Row : public CremaRow
    {
    public: 
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오후 12:17:53
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오후 12:17:53
        bool known;
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오후 12:17:53
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오후 12:17:53
        float MacIntosh;
        const class Table141Table* Table;
    public: 
        Table141Row(CremaReader::irow& row, Table141Table* table);
    };
    // Creator: Admin_cofferdam
    // CreatedDateTime: 2016-07-25 오후 12:17:53
    // Modifier: Admin_cofferdam
    // ModifiedDateTime: 2016-07-25 오후 12:17:53
    // ContentsModifier: Admin_milkweed
    // ContentsModifiedDateTime: 2016-07-25 오후 8:07:42
    class Table141Table : public CremaTable<Table141Row>
    {
    public: 
        Table141Table();
        Table141Table(CremaReader::itable& table);
    public: 
        virtual ~Table141Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table141Row* Find(bool known) const;
    };
    class Table40Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 2:10:55
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 2:10:55
        unsigned short Eden;
        /// <summary>
        /// benign coddler Whit groan Ardene Congregational instigate propriety gentleman Minuteman unchastity
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 2:10:55
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 2:10:55
        unsigned char later;
        const class Table40Child1Table* Table;
        const class Table40Row* Parent;
    public: 
        Table40Child1Row(CremaReader::irow& row, Table40Child1Table* table);
    };
    // Creator: Admin_gifted
    // CreatedDateTime: 2016-07-25 오후 2:10:54
    // Modifier: Admin_gifted
    // ModifiedDateTime: 2016-07-25 오후 2:10:55
    // ContentsModifier: Admin_asterisked
    // ContentsModifiedDateTime: 2016-07-25 오후 6:31:51
    class Table40Child1Table : public CremaTable<Table40Child1Row>
    {
    public: 
        Table40Child1Table();
        Table40Child1Table(CremaReader::itable& table);
        Table40Child1Table(std::vector<class Table40Child1Row*> rows);
    public: 
        virtual ~Table40Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table40Child1Row* Find(unsigned short Eden) const;
    };
    class Table40Row : public CremaRow
    {
    public: 
        /// <summary>
        /// tapping heatproof cherisher handbrake giantess myrrh Andros mises Parthia mandrill Campinas viscose discretization nonchalant excavation
        /// </summary>
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 6:47:34
        short tenting;
        /// <summary>
        /// scenery experiential cuneiform quarto measured Shandie Adenauer Nettie pastern
        /// </summary>
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        double Alia;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 6:47:34
        unsigned char fajitas;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        unsigned char endeavor;
        /// <summary>
        /// identified waylayer hieroglyphic minke offstage electrodynamics circulations ersatz seaplane Dorothy chuntering Ill entitle curability
        /// </summary>
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        float sensuous;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 9:58:43
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        float tranquilized;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 9:58:43
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 6:47:34
        std::string beautifier;
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 6:47:34
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 6:47:34
        unsigned int sulfurous;
        /// <summary>
        /// pueblo rhinitis househusband cogitate Bandung grayish copy obsessiveness Candie sociality levelness linear
        /// </summary>
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 6:47:34
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 6:47:34
        bool portrayer;
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 6:47:34
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 6:47:34
        Type_Attn compiler;
        const class Table40Table* Table;
        const Table40Child1Table* Child1;
    private: 
        static Table40Child1Table Child1Empty;
    public: 
        Table40Row(CremaReader::irow& row, Table40Table* table);
    friend static void Table40SetChild1(Table40Row* target, const std::vector<Table40Child1Row*>& childs);
    };
    // Creator: Admin_injection
    // CreatedDateTime: 2016-07-25 오전 9:40:09
    // Modifier: Admin_Geno
    // ModifiedDateTime: 2016-07-25 오후 6:47:34
    // ContentsModifier: Admin_asterisked
    // ContentsModifiedDateTime: 2016-07-25 오후 6:31:51
    class Table40Table : public CremaTable<Table40Row>
    {
    public: 
        const Table40Child1Table* Child1;
    public: 
        Table40Table();
        Table40Table(CremaReader::itable& table);
    public: 
        virtual ~Table40Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table40Row* Find(short tenting) const;
    };
    class Table57Row : public CremaRow
    {
    public: 
        /// <summary>
        /// lackluster syllabusss Rorie recourse
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 10:06:51
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 10:06:51
        double spanielled;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 10:06:51
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 10:06:51
        short Isabelle;
        /// <summary>
        /// tole
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 10:06:51
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 10:06:51
        unsigned int Camella;
        /// <summary>
        /// microbicide stickler oenology Coloradan Nolly Giacinta skulk euphemism ornateness flashiness
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 10:06:51
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 10:06:51
        short prodded;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 10:06:51
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 10:06:51
        double coalescence;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 10:06:51
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 10:06:51
        time_t psychotherapist;
        const class Table57Table* Table;
    public: 
        Table57Row(CremaReader::irow& row, Table57Table* table);
    };
    // Creator: Member_lender
    // CreatedDateTime: 2016-07-25 오전 10:06:51
    // Modifier: Member_lender
    // ModifiedDateTime: 2016-07-25 오전 10:06:51
    // ContentsModifier: Admin_distinctiveness
    // ContentsModifiedDateTime: 2016-07-25 오전 10:22:29
    class Table57Table : public CremaTable<Table57Row>
    {
    public: 
        Table57Table();
        Table57Table(CremaReader::itable& table);
    public: 
        virtual ~Table57Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table57Row* Find(double spanielled) const;
    };
    class Table206Row : public CremaRow
    {
    public: 
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 6:18:45
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 6:18:45
        long long homelessness;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 6:18:45
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 6:18:45
        char centering;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 6:18:45
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 6:18:45
        unsigned int porthole;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 6:18:45
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 6:18:45
        double giveaway;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 6:18:45
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 6:18:45
        short Klee;
        const class Table206Table* Table;
    public: 
        Table206Row(CremaReader::irow& row, Table206Table* table);
    };
    // Creator: Admin_reggae
    // CreatedDateTime: 2016-07-25 오후 6:18:45
    // Modifier: Admin_reggae
    // ModifiedDateTime: 2016-07-25 오후 6:18:45
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 10:46:48
    class Table206Table : public CremaTable<Table206Row>
    {
    public: 
        Table206Table();
        Table206Table(CremaReader::itable& table);
    public: 
        virtual ~Table206Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table206Row* Find(long long homelessness) const;
    };
    class Table_conicalRow : public CremaRow
    {
    public: 
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        unsigned int narcoleptic;
        /// <summary>
        /// tinny bungler breakpoint ammo highfalutin sweatshop dropsical countermand shoestring hornedness
        /// </summary>
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type_canted wakefulness;
        /// <summary>
        /// hybridize fireguard bassoon biorhythm coattail Parker eland angler Arianism
        /// </summary>
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        time_t mealiness;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        Type_farinaceous Miguela;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        Type_canted bedstead;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        char hitherto;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        std::string Ibsen;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        time_t Shavuot;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        time_t hedgerow;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type_seasonably video;
        /// <summary>
        /// plumbago ponytail tornado Fairfield Maryanna
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        unsigned short Jemmy;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        unsigned short Kublai;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type21 newsworthiness;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        int Bowery;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type21 devour;
        const class Table_conicalTable* Table;
    public: 
        Table_conicalRow(CremaReader::irow& row, Table_conicalTable* table);
    };
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오전 10:59:30
    class Table_conicalTable : public CremaTable<Table_conicalRow>
    {
    public: 
        Table_conicalTable();
        Table_conicalTable(CremaReader::itable& table);
    public: 
        virtual ~Table_conicalTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_conicalRow* Find(unsigned int narcoleptic, Type21 devour) const;
    };
    class Table22Row : public CremaRow
    {
    public: 
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        int immediacy;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        short dateline;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type_Gretta setup;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        double lettering;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type_Multan colatitude;
        /// <summary>
        /// zestfulness burdock Lynnelle groveling smilax Linton wirehair Sib honored Boise stockholder kiddish Agretha dominant Adolphe elderliness fuhrer Ethyl
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        char Sam;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        float maleficence;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type1 Fermi;
        const class Table22Table* Table;
    public: 
        Table22Row(CremaReader::irow& row, Table22Table* table);
    };
    // Creator: Admin_distinctiveness
    // CreatedDateTime: 2016-07-25 오전 9:20:56
    // Modifier: Admin_distinctiveness
    // ModifiedDateTime: 2016-07-25 오전 9:20:56
    class Table22Table : public CremaTable<Table22Row>
    {
    public: 
        Table22Table();
        Table22Table(CremaReader::itable& table);
    public: 
        virtual ~Table22Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table22Row* Find(int immediacy, double lettering, Type_Multan colatitude, float maleficence) const;
    };
    class Table_hydrosphereRow : public CremaRow
    {
    public: 
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        Type11 Lehigh;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        time_t Attic;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        int malaria;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        unsigned int Chiarra;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        bool Pound;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        time_t prescient;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        short infarction;
        const class Table_hydrosphereTable* Table;
    public: 
        Table_hydrosphereRow(CremaReader::irow& row, Table_hydrosphereTable* table);
    };
    // Modifier: Member_noncredit
    // ModifiedDateTime: 2016-07-25 오전 11:38:52
    // ContentsModifier: Admin_therefore
    // ContentsModifiedDateTime: 2016-07-25 오후 8:19:02
    class Table_hydrosphereTable : public CremaTable<Table_hydrosphereRow>
    {
    public: 
        Table_hydrosphereTable();
        Table_hydrosphereTable(CremaReader::itable& table);
    public: 
        virtual ~Table_hydrosphereTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_hydrosphereRow* Find(Type11 Lehigh, int malaria) const;
    };
    class Table46Row : public CremaRow
    {
    public: 
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 9:46:48
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        Type_applejack Sinclare;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 9:46:48
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 9:46:48
        int superheat;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        unsigned short theosophical;
        /// <summary>
        /// emotionless minidress townsmen Beelzebub nonjudgmental
        /// </summary>
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        double Nerta;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        unsigned int Drugi;
        /// <summary>
        /// terrorized torpid plater corny aqua Francyne viable sherbet sadistically Waterloo gasometer beckon conversational Thimbu
        /// </summary>
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        int bemused;
        const class Table46Table* Table;
    public: 
        Table46Row(CremaReader::irow& row, Table46Table* table);
    };
    // Creator: Member_Indianapolis
    // CreatedDateTime: 2016-07-25 오전 9:46:48
    // Modifier: Member_succulent
    // ModifiedDateTime: 2016-07-25 오전 11:58:31
    class Table46Table : public CremaTable<Table46Row>
    {
    public: 
        Table46Table();
        Table46Table(CremaReader::itable& table);
    public: 
        virtual ~Table46Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table46Row* Find(Type_applejack Sinclare) const;
    };
    class Table_agapaeRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Antin
        /// </summary>
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오전 10:35:29
        // Modifier: Admin_refreshing
        // ModifiedDateTime: 2016-07-25 오후 1:59:48
        unsigned int pelvic;
        // Creator: Admin_refreshing
        // CreatedDateTime: 2016-07-25 오후 1:59:48
        // Modifier: Admin_refreshing
        // ModifiedDateTime: 2016-07-25 오후 1:59:48
        double ephemera;
        // Creator: Admin_refreshing
        // CreatedDateTime: 2016-07-25 오후 1:59:48
        // Modifier: Admin_refreshing
        // ModifiedDateTime: 2016-07-25 오후 1:59:48
        float paramecia;
        /// <summary>
        /// towardliness creature Genaro Eva fetus
        /// </summary>
        // Creator: Admin_refreshing
        // CreatedDateTime: 2016-07-25 오후 1:59:48
        // Modifier: Admin_refreshing
        // ModifiedDateTime: 2016-07-25 오후 1:59:48
        Type_empathize momentousness;
        const class Table_agapaeTable* Table;
    public: 
        Table_agapaeRow(CremaReader::irow& row, Table_agapaeTable* table);
    };
    // Modifier: Admin_refreshing
    // ModifiedDateTime: 2016-07-25 오후 1:59:48
    // ContentsModifier: Admin_chumming
    // ContentsModifiedDateTime: 2016-07-25 오후 9:31:35
    class Table_agapaeTable : public CremaTable<Table_agapaeRow>
    {
    public: 
        Table_agapaeTable();
        Table_agapaeTable(CremaReader::itable& table);
    public: 
        virtual ~Table_agapaeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_agapaeRow* Find(unsigned int pelvic) const;
    };
    class Table10Child_KerenskyRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:22
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:22
        time_t budgerigar;
        /// <summary>
        /// brine bombastic acclimation Renville buttermilk Clausen Maegan auxin timebase memorize liturgics pigeonhole proconsular tearjerker Bay
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:22
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:55
        int Ricca;
        /// <summary>
        /// Carnegie
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:22
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:22
        Type_Arlan Shepherd;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:22
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:22
        float opacity;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:55
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:55
        char donutted;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:55
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:55
        time_t cobwebbed;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:55
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:55
        char Irv;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:55
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:55
        Type_Arlan Veronica;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 9:13:14
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 9:13:14
        Type_canted argue;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 9:13:14
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 9:13:14
        Type_Attn conservancy;
        const class Table10Child_KerenskyTable* Table;
        const class Table10Row* Parent;
    public: 
        Table10Child_KerenskyRow(CremaReader::irow& row, Table10Child_KerenskyTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:22
    // Modifier: Member_Maye
    // ModifiedDateTime: 2016-07-25 오전 9:13:14
    // ContentsModifier: Admin_refreshing
    // ContentsModifiedDateTime: 2016-07-25 오후 8:31:59
    class Table10Child_KerenskyTable : public CremaTable<Table10Child_KerenskyRow>
    {
    public: 
        Table10Child_KerenskyTable();
        Table10Child_KerenskyTable(CremaReader::itable& table);
        Table10Child_KerenskyTable(std::vector<class Table10Child_KerenskyRow*> rows);
    public: 
        virtual ~Table10Child_KerenskyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table10Child_KerenskyRow* Find(time_t budgerigar, Type_Arlan Shepherd) const;
    };
    class Table10Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        unsigned char tortoiseshell;
        /// <summary>
        /// ballade lemon shipborne Neruda reprobate cunnilingus Padang Antony Marine
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        float airfield;
        /// <summary>
        /// Carena overcurious leveeing Olympus Ostrogoth irritability emperor euthenics
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        Type_Multan uneducated;
        /// <summary>
        /// bilateralness TDD Tatiana armed Tallie cottonseed branded monetarily layette
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:24:22
        int pickup;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        unsigned long long vantage;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:24:22
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:24:22
        unsigned long long syllabus;
        const class Table10Table* Table;
        const Table10Child_KerenskyTable* Child_Kerensky;
    private: 
        static Table10Child_KerenskyTable Child_KerenskyEmpty;
    public: 
        Table10Row(CremaReader::irow& row, Table10Table* table);
    friend static void Table10SetChild_Kerensky(Table10Row* target, const std::vector<Table10Child_KerenskyRow*>& childs);
    };
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 10:24:22
    // ContentsModifier: Admin_refreshing
    // ContentsModifiedDateTime: 2016-07-25 오후 8:31:59
    class Table10Table : public CremaTable<Table10Row>
    {
    public: 
        const Table10Child_KerenskyTable* Child_Kerensky;
    public: 
        Table10Table();
        Table10Table(CremaReader::itable& table);
    public: 
        virtual ~Table10Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table10Row* Find(unsigned char tortoiseshell) const;
    };
    class Table_CarolanChild1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// kingship crushable precocious Zr dubber pixiness Ritchie reproacher quietude demoralization more Caph conglomeration photomicrography supercharge
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 11:03:52
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 11:03:52
        int simulcast;
        const class Table_CarolanChild1Table* Table;
        const class Table_CarolanRow* Parent;
    public: 
        Table_CarolanChild1Row(CremaReader::irow& row, Table_CarolanChild1Table* table);
    };
    // Creator: Member_antique
    // CreatedDateTime: 2016-07-25 오전 11:03:52
    // Modifier: Member_antique
    // ModifiedDateTime: 2016-07-25 오전 11:03:52
    // ContentsModifier: Admin_pock
    // ContentsModifiedDateTime: 2016-07-25 오후 3:33:40
    class Table_CarolanChild1Table : public CremaTable<Table_CarolanChild1Row>
    {
    public: 
        Table_CarolanChild1Table();
        Table_CarolanChild1Table(CremaReader::itable& table);
        Table_CarolanChild1Table(std::vector<class Table_CarolanChild1Row*> rows);
    public: 
        virtual ~Table_CarolanChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CarolanChild1Row* Find(int simulcast) const;
    };
    class Table_CarolanChild2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Camille Haleakala elaborateness solecism marketable Nicolina antiaircraft statuette Heuser
        /// </summary>
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:11:19
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:11:19
        time_t proletarianization;
        /// <summary>
        /// Wronskian companionable
        /// </summary>
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:11:19
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:11:19
        int given;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:11:19
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:11:19
        std::string Tierney;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:11:19
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:11:19
        Type11 Binghamton;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:11:19
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:11:19
        bool biggish;
        const class Table_CarolanChild2Table* Table;
        const Table_CarolanRow* Parent;
    public: 
        Table_CarolanChild2Row(CremaReader::irow& row, Table_CarolanChild2Table* table);
    };
    // Creator: Member_throbbing
    // CreatedDateTime: 2016-07-25 오후 1:11:18
    // Modifier: Member_throbbing
    // ModifiedDateTime: 2016-07-25 오후 1:11:19
    // ContentsModifier: Admin_pock
    // ContentsModifiedDateTime: 2016-07-25 오후 3:33:40
    class Table_CarolanChild2Table : public CremaTable<Table_CarolanChild2Row>
    {
    public: 
        Table_CarolanChild2Table();
        Table_CarolanChild2Table(CremaReader::itable& table);
        Table_CarolanChild2Table(std::vector<class Table_CarolanChild2Row*> rows);
    public: 
        virtual ~Table_CarolanChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CarolanChild2Row* Find(time_t proletarianization, Type11 Binghamton) const;
    };
    class Table_CarolanRow : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        unsigned short adviser;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        Type_pledge Peterson;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        std::string colleague;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        Type24 cumuli;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        int analyzed;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        long long scowler;
        const class Table_CarolanTable* Table;
        const Table_CarolanChild1Table* Child1;
        const Table_CarolanChild2Table* Child2;
    private: 
        static Table_CarolanChild1Table Child1Empty;
        static Table_CarolanChild2Table Child2Empty;
    public: 
        Table_CarolanRow(CremaReader::irow& row, Table_CarolanTable* table);
    friend static void Table_CarolanSetChild1(Table_CarolanRow* target, const std::vector<Table_CarolanChild1Row*>& childs);
        static void Table_CarolanSetChild2(Table_CarolanRow* target, const std::vector<Table_CarolanChild2Row*>& childs);
    };
    // Modifier: Admin_titted
    // ModifiedDateTime: 2016-07-25 오전 9:52:21
    // ContentsModifier: Admin_pock
    // ContentsModifiedDateTime: 2016-07-25 오후 3:33:40
    class Table_CarolanTable : public CremaTable<Table_CarolanRow>
    {
    public: 
        const Table_CarolanChild1Table* Child1;
        const Table_CarolanChild2Table* Child2;
    public: 
        Table_CarolanTable();
        Table_CarolanTable(CremaReader::itable& table);
    public: 
        virtual ~Table_CarolanTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CarolanRow* Find(unsigned short adviser) const;
    };
    class Table_repressivenessRow : public CremaRow
    {
    public: 
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:23:26
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:23:26
        short payed;
        /// <summary>
        /// limitless testatrices Kristian malevolence Loella Carolynn
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:23:26
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:23:26
        unsigned int Neville;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:34:08
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:34:08
        long long loom;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:34:08
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:34:08
        std::string laxativeness;
        const class Table_repressivenessTable* Table;
    public: 
        Table_repressivenessRow(CremaReader::irow& row, Table_repressivenessTable* table);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:34:08
    // ContentsModifier: Admin_awesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 10:40:52
    class Table_repressivenessTable : public CremaTable<Table_repressivenessRow>
    {
    public: 
        Table_repressivenessTable();
        Table_repressivenessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_repressivenessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_repressivenessRow* Find(short payed) const;
    };
    class Table183Row : public CremaRow
    {
    public: 
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 3:07:50
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 3:07:50
        Type44 jumpily;
        const class Table183Table* Table;
    public: 
        Table183Row(CremaReader::irow& row, Table183Table* table);
    };
    // Creator: Member_deception
    // CreatedDateTime: 2016-07-25 오후 3:07:50
    // Modifier: Member_deception
    // ModifiedDateTime: 2016-07-25 오후 3:07:50
    class Table183Table : public CremaTable<Table183Row>
    {
    public: 
        Table183Table();
        Table183Table(CremaReader::itable& table);
    public: 
        virtual ~Table183Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table183Row* Find(Type44 jumpily) const;
    };
    class Table94Row : public CremaRow
    {
    public: 
        /// <summary>
        /// threescore Steward Mill
        /// </summary>
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오전 11:20:57
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오전 11:20:57
        unsigned int dialogged;
        /// <summary>
        /// Alexandro gobbing egotistical impute biomedicine kiddie untenable compliance somewhere moronically father circumflex brushfire Brietta courtesan pastorate
        /// </summary>
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오전 11:20:57
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오전 11:20:57
        unsigned long long goodwill;
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오전 11:20:57
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오전 11:20:57
        time_t pet;
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오전 11:20:57
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오전 11:20:57
        double Indianian;
        /// <summary>
        /// amines abjure Guinness Michaela working Erminie zagging grandfather hung dizzily neolithic duress boron credo
        /// </summary>
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오전 11:20:57
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오전 11:20:57
        time_t exec;
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오전 11:20:57
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오전 11:20:57
        float drubber;
        const class Table94Table* Table;
    public: 
        Table94Row(CremaReader::irow& row, Table94Table* table);
    };
    // Creator: Member_vanishing
    // CreatedDateTime: 2016-07-25 오전 11:20:57
    // Modifier: Member_vanishing
    // ModifiedDateTime: 2016-07-25 오전 11:20:57
    // ContentsModifier: Admin_energized
    // ContentsModifiedDateTime: 2016-07-25 오후 6:14:18
    class Table94Table : public CremaTable<Table94Row>
    {
    public: 
        Table94Table();
        Table94Table(CremaReader::itable& table);
    public: 
        virtual ~Table94Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table94Row* Find(unsigned int dialogged) const;
    };
    class Table82Row : public CremaRow
    {
    public: 
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:00:21
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:00:21
        unsigned short bade;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:00:21
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:00:21
        short spacier;
        /// <summary>
        /// Ladyship slumberous feat Cassandry Hay deductive stamen celandine Lizzie Kewaskum Chaldean radiochemical Stevena hairlike
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:00:21
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오전 11:30:54
        unsigned char please;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:00:21
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오전 11:30:54
        long long $case;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오전 11:30:54
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오전 11:30:54
        char Wilhelmina;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오전 11:30:54
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오전 11:30:54
        Type_primitiveness decor;
        const class Table82Table* Table;
    public: 
        Table82Row(CremaReader::irow& row, Table82Table* table);
    };
    // Creator: Admin_Aura
    // CreatedDateTime: 2016-07-25 오전 11:00:21
    // Modifier: Member_nubbin
    // ModifiedDateTime: 2016-07-25 오전 11:30:54
    // ContentsModifier: Member_neurosis
    // ContentsModifiedDateTime: 2016-07-25 오후 9:38:57
    class Table82Table : public CremaTable<Table82Row>
    {
    public: 
        Table82Table();
        Table82Table(CremaReader::itable& table);
    public: 
        virtual ~Table82Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table82Row* Find(unsigned short bade) const;
    };
    class Table87Child1Row : public CremaRow
    {
    public: 
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 11:52:45
        int Giff;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 11:52:45
        unsigned long long Lewiss;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 11:52:45
        Type_Multan graveyard;
        /// <summary>
        /// psychosocial
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Mickie
        // ModifiedDateTime: 2016-07-25 오후 1:05:41
        unsigned int organism;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 11:52:45
        long long heather;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 11:52:45
        char Kyla;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 11:52:45
        // Modifier: Member_Mickie
        // ModifiedDateTime: 2016-07-25 오후 1:05:41
        unsigned short prognostication;
        /// <summary>
        /// phonon marathon shrieker fineness officer sombrero score skylark paddy graphologist piscatorial Baldwin crammed Leblanc sprigging merchandise Velcro sleazily
        /// </summary>
        // Creator: Member_Mickie
        // CreatedDateTime: 2016-07-25 오후 1:05:41
        // Modifier: Member_Mickie
        // ModifiedDateTime: 2016-07-25 오후 1:05:41
        Type_Madison mesquite;
        const class Table87Child1Table* Table;
        const class Table87Row* Parent;
    public: 
        Table87Child1Row(CremaReader::irow& row, Table87Child1Table* table);
    };
    // Creator: Member_Clary
    // CreatedDateTime: 2016-07-25 오전 11:52:45
    // Modifier: Member_Mickie
    // ModifiedDateTime: 2016-07-25 오후 1:05:41
    // ContentsModifier: Member_Richard
    // ContentsModifiedDateTime: 2016-07-25 오후 8:38:44
    class Table87Child1Table : public CremaTable<Table87Child1Row>
    {
    public: 
        Table87Child1Table();
        Table87Child1Table(CremaReader::itable& table);
        Table87Child1Table(std::vector<class Table87Child1Row*> rows);
    public: 
        virtual ~Table87Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table87Child1Row* Find(int Giff, long long heather) const;
    };
    class Table87Row : public CremaRow
    {
    public: 
        /// <summary>
        /// WW nexus Zorine isomorph sop evil haranguer inferential insupportable
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:41:21
        time_t flabbily;
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        int wasteful;
        /// <summary>
        /// nursling imploring
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        unsigned long long litigiousness;
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        std::string chasm;
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        time_t Malena;
        /// <summary>
        /// Christel Krasnoyarsk scraggly Litton Du Jemima Sherry showing Marlon commiseration Tedd Janaya sinuous Silesia unbred Giffy accursed aloft
        /// </summary>
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:38:55
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:38:55
        Type_canted admirable;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:38:55
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:38:55
        bool Thatcher;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:38:55
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:38:55
        int prowler;
        const class Table87Table* Table;
        const Table87Child1Table* Child1;
    private: 
        static Table87Child1Table Child1Empty;
    public: 
        Table87Row(CremaReader::irow& row, Table87Table* table);
    friend static void Table87SetChild1(Table87Row* target, const std::vector<Table87Child1Row*>& childs);
    };
    // Creator: Member_whosoever
    // CreatedDateTime: 2016-07-25 오전 11:07:53
    // Modifier: Member_Richard
    // ModifiedDateTime: 2016-07-25 오전 11:41:21
    // ContentsModifier: Member_Richard
    // ContentsModifiedDateTime: 2016-07-25 오후 8:38:44
    class Table87Table : public CremaTable<Table87Row>
    {
    public: 
        const Table87Child1Table* Child1;
    public: 
        Table87Table();
        Table87Table(CremaReader::itable& table);
    public: 
        virtual ~Table87Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table87Row* Find(time_t flabbily) const;
    };
    class Table_implacablenessRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Sapphire dosimeter
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double Tanny;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double locale;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char fagoting;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        Type_Madison aim;
        /// <summary>
        /// moths oscillator lilac procaine crackdown Andriana trimmed hullabaloo
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        std::string brutality;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float scantly;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        int British;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char broadcast;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float injurer;
        const class Table_implacablenessTable* Table;
    public: 
        Table_implacablenessRow(CremaReader::irow& row, Table_implacablenessTable* table);
    };
    // Modifier: Admin_wholesomeness
    // ModifiedDateTime: 2016-07-25 오전 9:15:25
    // ContentsModifier: Admin_enshroud
    // ContentsModifiedDateTime: 2016-07-25 오후 3:09:46
    class Table_implacablenessTable : public CremaTable<Table_implacablenessRow>
    {
    public: 
        Table_implacablenessTable();
        Table_implacablenessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_implacablenessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_implacablenessRow* Find(double Tanny, const std::string& brutality) const;
    };
    class Table_fleeingRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned short Araucanian;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        const class Table_fleeingTable* Table;
    public: 
        Table_fleeingRow(CremaReader::irow& row, Table_fleeingTable* table);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:15:17
    class Table_fleeingTable : public CremaTable<Table_fleeingRow>
    {
    public: 
        Table_fleeingTable();
        Table_fleeingTable(CremaReader::itable& table);
    public: 
        virtual ~Table_fleeingTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_fleeingRow* Find(double corpsman, bool jetting) const;
    };
    class Table50Row : public CremaRow
    {
    public: 
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        float travelogue;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        bool mercurial;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        unsigned short divider;
        /// <summary>
        /// Israel Kathie Tatiana Fabio tiny Nilsen coachwork outhitting domesticated tablecloth Thebault Ericka mesdames falsifiability accrue gossamer
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        unsigned int schmuck;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        int epistemic;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        std::string Flin;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        time_t Gaulish;
        /// <summary>
        /// rally Atlante Abba Ullman plopping adore busgirl Hayden armorial
        /// </summary>
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 10:14:49
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        std::string apportionment;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 10:14:49
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        Type_Arlan toxin;
        const class Table50Table* Table;
    public: 
        Table50Row(CremaReader::irow& row, Table50Table* table);
    };
    // Creator: Member_deception
    // CreatedDateTime: 2016-07-25 오전 9:52:55
    // Modifier: Member_Indianapolis
    // ModifiedDateTime: 2016-07-25 오전 10:14:49
    // ContentsModifier: Member_wholemeal
    // ContentsModifiedDateTime: 2016-07-25 오후 6:01:18
    class Table50Table : public CremaTable<Table50Row>
    {
    public: 
        Table50Table();
        Table50Table(CremaReader::itable& table);
    public: 
        virtual ~Table50Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table50Row* Find(float travelogue) const;
    };
    class Table53Row : public CremaRow
    {
    public: 
        /// <summary>
        /// southing spatial Bernese gagged bestrew Costanza squadded gerontologist terr disputant Kitchener marginality parenthesize quern Scotland
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 4:51:33
        long long collocate;
        /// <summary>
        /// prone grinding
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오전 10:55:49
        short dependable;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 10:00:17
        unsigned int wetback;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 4:51:33
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 4:51:33
        std::string primitive;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 4:51:33
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 4:51:33
        long long theme;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 4:51:33
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 4:51:33
        long long Ladonna;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 4:51:33
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 4:51:33
        Type_Dianna desk;
        const class Table53Table* Table;
    public: 
        Table53Row(CremaReader::irow& row, Table53Table* table);
    };
    // Creator: Member_Tanhya
    // CreatedDateTime: 2016-07-25 오전 10:00:17
    // Modifier: Admin_injection
    // ModifiedDateTime: 2016-07-25 오후 4:51:33
    // ContentsModifier: member
    // ContentsModifiedDateTime: 2016-07-25 오후 9:16:24
    class Table53Table : public CremaTable<Table53Row>
    {
    public: 
        Table53Table();
        Table53Table(CremaReader::itable& table);
    public: 
        virtual ~Table53Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table53Row* Find(long long collocate) const;
    };
    class Table89Row : public CremaRow
    {
    public: 
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:10:33
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:10:33
        char rot;
        /// <summary>
        /// alderman gushy biodiversity monoliths
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:10:33
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:10:33
        unsigned int Stradivari;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:10:33
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:10:33
        Type_Meiji extemporizer;
        /// <summary>
        /// Kliment
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:10:33
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:10:33
        Type_artiness periphrases;
        /// <summary>
        /// solvently dipodic whenever billow PARC emotionalism heredity undersigned
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:10:33
        // Modifier: Member_dyspepsia
        // ModifiedDateTime: 2016-07-25 오후 1:11:36
        unsigned short whisperer;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:10:33
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:10:33
        double Warhol;
        // Creator: Member_dyspepsia
        // CreatedDateTime: 2016-07-25 오후 1:11:36
        // Modifier: Member_dyspepsia
        // ModifiedDateTime: 2016-07-25 오후 1:11:36
        Type30 oak;
        /// <summary>
        /// hagged overhear treacherous southernmost digest Fairview rewire hoar gill courageousness allergen halalled blow exudation Chopin corner
        /// </summary>
        // Creator: Member_dyspepsia
        // CreatedDateTime: 2016-07-25 오후 1:11:36
        // Modifier: Member_dyspepsia
        // ModifiedDateTime: 2016-07-25 오후 1:11:36
        Type60 propagandize;
        const class Table89Table* Table;
    public: 
        Table89Row(CremaReader::irow& row, Table89Table* table);
    };
    // Creator: Admin_Aura
    // CreatedDateTime: 2016-07-25 오전 11:10:33
    // Modifier: Member_dyspepsia
    // ModifiedDateTime: 2016-07-25 오후 1:11:36
    class Table89Table : public CremaTable<Table89Row>
    {
    public: 
        Table89Table();
        Table89Table(CremaReader::itable& table);
    public: 
        virtual ~Table89Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table89Row* Find(char rot, Type_artiness periphrases, double Warhol) const;
    };
    class Table109Row : public CremaRow
    {
    public: 
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:05:12
        unsigned int flourisher;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:38:00
        double Englishmen;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:05:12
        char registrar;
        /// <summary>
        /// crescendoing Marshall tubular Romano trusts boldness making intensification Balinese carpentering implosion confessional addenda theosophic Coronado incriminatory professorship
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:38:00
        unsigned short flimflammed;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:38:00
        unsigned int Victoria;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:38:00
        bool outgrip;
        /// <summary>
        /// gentrification traumatic gruffness regretfulness fulfill acerbically perpendicular Celesta priciest togged wettable adversary careless PO tallow Citroen
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:38:00
        unsigned long long Tootsie;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:38:00
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:05:12
        int monogamist;
        // Creator: Member_Ashby
        // CreatedDateTime: 2016-07-25 오후 1:05:12
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:05:12
        Type16 PIN;
        const class Table109Table* Table;
    public: 
        Table109Row(CremaReader::irow& row, Table109Table* table);
    };
    // Creator: Admin_mousse
    // CreatedDateTime: 2016-07-25 오전 11:38:00
    // Modifier: Member_Ashby
    // ModifiedDateTime: 2016-07-25 오후 1:05:12
    // ContentsModifier: Admin_Geno
    // ContentsModifiedDateTime: 2016-07-25 오후 10:43:17
    class Table109Table : public CremaTable<Table109Row>
    {
    public: 
        Table109Table();
        Table109Table(CremaReader::itable& table);
    public: 
        virtual ~Table109Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table109Row* Find(unsigned int flourisher) const;
    };
    class Table180Row : public CremaRow
    {
    public: 
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오후 2:53:52
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오후 2:53:52
        int boa;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오후 2:53:52
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오후 2:53:52
        int esp;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오후 2:53:52
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오후 2:53:52
        int Minerva;
        /// <summary>
        /// grouchiness Nanni sandpile capitulate assumptive abandon intonate sailor gladdest overcome actual oversupply
        /// </summary>
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오후 2:53:52
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오후 2:53:52
        unsigned long long centrality;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오후 2:53:52
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오후 2:53:52
        char thrummed;
        /// <summary>
        /// Arte overuse nonparticipant colorblindness Ermin lyricism bitter sock respect Eleen beautify changeling Pharaoh develop
        /// </summary>
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오후 2:53:52
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오후 2:53:52
        double throwback;
        const class Table180Table* Table;
    public: 
        Table180Row(CremaReader::irow& row, Table180Table* table);
    };
    // Creator: Member_king
    // CreatedDateTime: 2016-07-25 오후 2:53:52
    // Modifier: Member_king
    // ModifiedDateTime: 2016-07-25 오후 2:53:52
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오후 5:19:43
    class Table180Table : public CremaTable<Table180Row>
    {
    public: 
        Table180Table();
        Table180Table(CremaReader::itable& table);
    public: 
        virtual ~Table180Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table180Row* Find(int boa) const;
    };
    class Table20Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:22:23
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:22:23
        int floodlit;
        /// <summary>
        /// gnarl Clair laths gear persona elderberry Potts adjunct Rutger Tomkin
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:22:23
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:22:23
        time_t hokiest;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:22:23
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:22:23
        long long grouchily;
        const class Table20Child1Table* Table;
        const class Table20Row* Parent;
    public: 
        Table20Child1Row(CremaReader::irow& row, Table20Child1Table* table);
    };
    // Creator: Admin_distinctiveness
    // CreatedDateTime: 2016-07-25 오전 9:22:23
    // Modifier: Admin_distinctiveness
    // ModifiedDateTime: 2016-07-25 오전 9:22:23
    // ContentsModifier: Admin_distinctiveness
    // ContentsModifiedDateTime: 2016-07-25 오전 11:54:46
    class Table20Child1Table : public CremaTable<Table20Child1Row>
    {
    public: 
        Table20Child1Table();
        Table20Child1Table(CremaReader::itable& table);
        Table20Child1Table(std::vector<class Table20Child1Row*> rows);
    public: 
        virtual ~Table20Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table20Child1Row* Find(int floodlit) const;
    };
    class Table20Child2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Bigfoot thermionics loadable Ltd casing druid
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:39:04
        time_t Toni;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:39:04
        std::string solidarity;
        /// <summary>
        /// Athenian marketing instantiate rhomboid passage aforementioned Otto misconstrue premeditation streak predation
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:39:04
        unsigned short outgrowths;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오후 1:39:49
        bool Bengali;
        /// <summary>
        /// Orwell ellipticity Valerye Gupta saloonkeeper settable cryptological scraper backless Rosabelle Olga Carola Loafer supranationalism butterball northbound discord
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:39:04
        unsigned char contrive;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:39:04
        unsigned char icebound;
        /// <summary>
        /// consular plasterboard Nipponese cassock airman radiation polymer Turkey assert Kearney envelope Lorenz on cap lacerate behead
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:39:04
        unsigned short nubbin;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:39:04
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오후 1:39:49
        Type50 bacteriology;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오후 1:39:49
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오후 1:39:49
        std::string Jainism;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오후 1:39:49
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오후 1:39:49
        short urinal;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오후 1:39:49
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오후 1:39:49
        bool Maguire;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오후 1:39:49
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오후 1:39:49
        int chainsaw;
        const class Table20Child2Table* Table;
        const Table20Row* Parent;
    public: 
        Table20Child2Row(CremaReader::irow& row, Table20Child2Table* table);
    };
    // Creator: Admin_Aura
    // CreatedDateTime: 2016-07-25 오후 1:39:04
    // Modifier: Member_Cecilia
    // ModifiedDateTime: 2016-07-25 오후 1:39:49
    class Table20Child2Table : public CremaTable<Table20Child2Row>
    {
    public: 
        Table20Child2Table();
        Table20Child2Table(CremaReader::itable& table);
        Table20Child2Table(std::vector<class Table20Child2Row*> rows);
    public: 
        virtual ~Table20Child2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table20Child2Row* Find(time_t Toni) const;
    };
    class Table20Row : public CremaRow
    {
    public: 
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:19:22
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오전 9:59:54
        unsigned char flaxseed;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오전 9:59:54
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오전 9:59:54
        Type_RhodesDeletable Mithra;
        const class Table20Table* Table;
        const Table20Child1Table* Child1;
        const Table20Child2Table* Child2;
    private: 
        static Table20Child1Table Child1Empty;
        static Table20Child2Table Child2Empty;
    public: 
        Table20Row(CremaReader::irow& row, Table20Table* table);
    friend static void Table20SetChild1(Table20Row* target, const std::vector<Table20Child1Row*>& childs);
        static void Table20SetChild2(Table20Row* target, const std::vector<Table20Child2Row*>& childs);
    };
    // Creator: Admin_injection
    // CreatedDateTime: 2016-07-25 오전 9:19:22
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오전 9:59:54
    // ContentsModifier: Admin_distinctiveness
    // ContentsModifiedDateTime: 2016-07-25 오전 11:54:46
    class Table20Table : public CremaTable<Table20Row>
    {
    public: 
        const Table20Child1Table* Child1;
        const Table20Child2Table* Child2;
    public: 
        Table20Table();
        Table20Table(CremaReader::itable& table);
    public: 
        virtual ~Table20Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table20Row* Find(unsigned char flaxseed) const;
    };
    class Table21Child1Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        int parabolic;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned short syncopation;
        /// <summary>
        /// husk transceiver Derk theatric alibi pilferage Fermi adjust Ilysa demonic binocular fidget Carmelia isochronal Xanthus Quixotism departmentalize Beardsley
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        bool steamroller;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        long long purloiner;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        short rattrap;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned int Redondo;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        char peach;
        /// <summary>
        /// deicer communion uncivilized forthcoming LPG searcher Cathee mapmaker bode bushel curvature cause addresser lumpiness clog calculable spikiness nobleness
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:08:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:08:56
        long long asbestos;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:08:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:08:56
        unsigned short glazing;
        const class Table21Child1Table* Table;
        const class Table21Row* Parent;
    public: 
        Table21Child1Row(CremaReader::irow& row, Table21Child1Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 9:25:57
    // Modifier: Member_budgie
    // ModifiedDateTime: 2016-07-25 오전 10:08:56
    // ContentsModifier: Member_whosoever
    // ContentsModifiedDateTime: 2016-07-25 오전 9:45:02
    class Table21Child1Table : public CremaTable<Table21Child1Row>
    {
    public: 
        Table21Child1Table();
        Table21Child1Table(CremaReader::itable& table);
        Table21Child1Table(std::vector<class Table21Child1Row*> rows);
    public: 
        virtual ~Table21Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table21Child1Row* Find(int parabolic, short rattrap) const;
    };
    class Table21Row : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long marginalia;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        long long chatted;
        /// <summary>
        /// shallowness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        std::string dutiful;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long strangulate;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:18:59
        unsigned int Rozella;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        char patrician;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        unsigned short brunet;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        short sweeping;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오전 11:18:59
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:18:59
        int priesthood;
        const class Table21Table* Table;
        const Table21Child1Table* Child1;
    private: 
        static Table21Child1Table Child1Empty;
    public: 
        Table21Row(CremaReader::irow& row, Table21Table* table);
    friend static void Table21SetChild1(Table21Row* target, const std::vector<Table21Child1Row*>& childs);
    };
    // Creator: Member_idle
    // CreatedDateTime: 2016-07-25 오전 9:19:53
    // Modifier: Admin_signalization
    // ModifiedDateTime: 2016-07-25 오전 11:18:59
    // ContentsModifier: Member_whosoever
    // ContentsModifiedDateTime: 2016-07-25 오전 9:45:02
    class Table21Table : public CremaTable<Table21Row>
    {
    public: 
        const Table21Child1Table* Child1;
    public: 
        Table21Table();
        Table21Table(CremaReader::itable& table);
    public: 
        virtual ~Table21Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table21Row* Find(unsigned long long marginalia, long long chatted) const;
    };
    class Table43Child2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// esprit consent annual enhancement mus inamorata crossway embosser looper educe Nebraska Stone gingerliness severed Lauder conservator practicum jib anaphorically
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 5:19:41
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 5:19:41
        time_t convention;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 5:19:41
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 5:19:41
        double Legree;
        const class Table43Child2Table* Table;
        const class Table43Row* Parent;
    public: 
        Table43Child2Row(CremaReader::irow& row, Table43Child2Table* table);
    };
    // Creator: Member_withdrawnness
    // CreatedDateTime: 2016-07-25 오후 5:19:40
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오후 5:19:41
    class Table43Child2Table : public CremaTable<Table43Child2Row>
    {
    public: 
        Table43Child2Table();
        Table43Child2Table(CremaReader::itable& table);
        Table43Child2Table(std::vector<class Table43Child2Row*> rows);
    public: 
        virtual ~Table43Child2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table43Child2Row* Find(time_t convention) const;
    };
    class Table43Row : public CremaRow
    {
    public: 
        /// <summary>
        /// luminosity pockmark gunboat did incoherency Belle unthinking RMS ritual Sperry
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_histidine
        // ModifiedDateTime: 2016-07-25 오후 5:52:53
        unsigned int foolery;
        // Creator: Admin_histidine
        // CreatedDateTime: 2016-07-25 오후 5:52:53
        // Modifier: Admin_histidine
        // ModifiedDateTime: 2016-07-25 오후 5:52:53
        bool valuable;
        // Creator: Admin_histidine
        // CreatedDateTime: 2016-07-25 오후 5:52:53
        // Modifier: Admin_histidine
        // ModifiedDateTime: 2016-07-25 오후 5:52:53
        time_t flood;
        const class Table43Table* Table;
        const Table43Child2Table* Child2;
    private: 
        static Table43Child2Table Child2Empty;
    public: 
        Table43Row(CremaReader::irow& row, Table43Table* table);
    friend static void Table43SetChild2(Table43Row* target, const std::vector<Table43Child2Row*>& childs);
    };
    // Creator: Admin_miscegenation
    // CreatedDateTime: 2016-07-25 오전 9:42:07
    // Modifier: Admin_histidine
    // ModifiedDateTime: 2016-07-25 오후 5:52:53
    class Table43Table : public CremaTable<Table43Row>
    {
    public: 
        const Table43Child2Table* Child2;
    public: 
        Table43Table();
        Table43Table(CremaReader::itable& table);
    public: 
        virtual ~Table43Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table43Row* Find(unsigned int foolery) const;
    };
    class Table51Row : public CremaRow
    {
    public: 
        /// <summary>
        /// virologist unsuitable bypaths claptrap houseboy Monfort Bros inveigh Afrocentrism thoughtless Federica validates sandiness patting precarious galenite blew vocalist stepper
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:53:21
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:53:21
        unsigned long long Louise;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:53:21
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:53:21
        std::string fecal;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:53:21
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 3:43:11
        long long humanoid;
        /// <summary>
        /// allegro Krystle
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:53:21
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:53:21
        long long Thaddus;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 3:43:11
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 3:43:11
        unsigned char Pollux;
        const class Table51Table* Table;
    public: 
        Table51Row(CremaReader::irow& row, Table51Table* table);
    };
    // Creator: Admin_truck
    // CreatedDateTime: 2016-07-25 오전 9:53:21
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오후 3:43:11
    // ContentsModifier: Admin_gifted
    // ContentsModifiedDateTime: 2016-07-25 오후 11:09:50
    class Table51Table : public CremaTable<Table51Row>
    {
    public: 
        Table51Table();
        Table51Table(CremaReader::itable& table);
    public: 
        virtual ~Table51Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table51Row* Find(unsigned long long Louise) const;
    };
    class Table108Row : public CremaRow
    {
    public: 
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:37:58
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:37:58
        int Latin;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:37:58
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:37:58
        float inhalant;
        /// <summary>
        /// magnetite Bonita indicter Celisse Cordilleras shrinker champion
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:37:58
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:37:58
        unsigned int curling;
        /// <summary>
        /// showy Carena excited ladybird sugarcane impotent Beerbohm shopkeep buttoner substrata ignobly Brand lodgment
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:37:58
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:37:58
        std::string soliloquize;
        /// <summary>
        /// Walgreen epidermal begrime adaptation requisite stripper Estele
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:37:58
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:37:58
        long long Minna;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:37:58
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:37:58
        Type_gustily parader;
        const class Table108Table* Table;
    public: 
        Table108Row(CremaReader::irow& row, Table108Table* table);
    };
    // Creator: Admin_truck
    // CreatedDateTime: 2016-07-25 오전 11:37:58
    // Modifier: Admin_truck
    // ModifiedDateTime: 2016-07-25 오전 11:37:58
    // ContentsModifier: Member_dullness
    // ContentsModifiedDateTime: 2016-07-25 오후 10:25:19
    class Table108Table : public CremaTable<Table108Row>
    {
    public: 
        Table108Table();
        Table108Table(CremaReader::itable& table);
    public: 
        virtual ~Table108Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table108Row* Find(int Latin, unsigned int curling) const;
    };
    class Table76Row : public CremaRow
    {
    public: 
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        long long Honoria;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        Type21 Joyce;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        long long gloaming;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        Type_Dianna archway;
        /// <summary>
        /// GIGO equipotent confound Worcestershire brooch approximate dissect salesclerk cleanup Charyl facilitation VLSI jugged shinsplints middleweight Rossie
        /// </summary>
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        Type_Madison hookedness;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        time_t dichotomous;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:46:55
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:46:55
        float tessellation;
        /// <summary>
        /// ornamental fifteen bookstall Denmark pyramid jurywoman seraglio Nanette Jordain Winesap hydroxyl headwind attendee rhea hemp Aymara Stael
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:20:07
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:20:07
        float chime;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:20:07
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:20:07
        long long Zhukov;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:20:07
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:20:07
        double Romulus;
        /// <summary>
        /// substantive lyrebird slipstream Lon group conglomerate paneling
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:20:07
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:20:07
        unsigned int liquidizer;
        /// <summary>
        /// intricacy supportive backdropped enjoyment interesting monochromatic solubility miscall inkwell soot longshoremen interrupt Rebeka Sask servitor lesson recurrence interactivity
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:20:07
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:20:07
        long long RSV;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:20:07
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:20:07
        long long chairwoman;
        const class Table76Table* Table;
    public: 
        Table76Row(CremaReader::irow& row, Table76Table* table);
    };
    // Creator: Member_semiautomatic
    // CreatedDateTime: 2016-07-25 오전 10:46:55
    // Modifier: Admin_Marshal
    // ModifiedDateTime: 2016-07-25 오전 11:20:07
    class Table76Table : public CremaTable<Table76Row>
    {
    public: 
        Table76Table();
        Table76Table(CremaReader::itable& table);
    public: 
        virtual ~Table76Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table76Row* Find(long long Honoria, Type21 Joyce, Type_Dianna archway, long long RSV, long long chairwoman) const;
    };
    class Table_duxesChild2Row : public CremaRow
    {
    public: 
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 1:13:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 1:13:38
        double beret;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 1:13:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 1:13:38
        int Gussy;
        const class Table_duxesChild2Table* Table;
        const class Table_duxesRow* Parent;
    public: 
        Table_duxesChild2Row(CremaReader::irow& row, Table_duxesChild2Table* table);
    };
    // Creator: Admin_injection
    // CreatedDateTime: 2016-07-25 오후 1:13:38
    // Modifier: Admin_injection
    // ModifiedDateTime: 2016-07-25 오후 1:13:38
    // ContentsModifier: Member_Cristy
    // ContentsModifiedDateTime: 2016-07-25 오후 8:11:22
    class Table_duxesChild2Table : public CremaTable<Table_duxesChild2Row>
    {
    public: 
        Table_duxesChild2Table();
        Table_duxesChild2Table(CremaReader::itable& table);
        Table_duxesChild2Table(std::vector<class Table_duxesChild2Row*> rows);
    public: 
        virtual ~Table_duxesChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_duxesChild2Row* Find(double beret, int Gussy) const;
    };
    class Table_duxesRow : public CremaRow
    {
    public: 
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        unsigned int Argentina;
        /// <summary>
        /// Aldebaran wraps illuminate froth customize tugboat thwarter vituperate disappointing Shafer slurp Willoughby
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        Type_Multan wingding;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:45:47
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:45:47
        long long HUD;
        /// <summary>
        /// onionskin ascension iterate subpart
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:45:47
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 1:28:01
        int energize;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:45:47
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:45:47
        double sidewalk;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 1:28:01
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 1:28:01
        Type44 underground;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오후 1:28:01
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오후 1:28:01
        int Quakerism;
        const class Table_duxesTable* Table;
        const Table_duxesChild2Table* Child2;
    private: 
        static Table_duxesChild2Table Child2Empty;
    public: 
        Table_duxesRow(CremaReader::irow& row, Table_duxesTable* table);
    friend static void Table_duxesSetChild2(Table_duxesRow* target, const std::vector<Table_duxesChild2Row*>& childs);
    };
    // Modifier: Admin_injection
    // ModifiedDateTime: 2016-07-25 오후 1:28:01
    // ContentsModifier: Member_Cristy
    // ContentsModifiedDateTime: 2016-07-25 오후 8:11:22
    class Table_duxesTable : public CremaTable<Table_duxesRow>
    {
    public: 
        const Table_duxesChild2Table* Child2;
    public: 
        Table_duxesTable();
        Table_duxesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_duxesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_duxesRow* Find(unsigned int Argentina) const;
    };
    class Table196Row : public CremaRow
    {
    public: 
        /// <summary>
        /// mimetic tunnel coordinate erection postbox Agata supernaturalness immutably fluently poster vigesimal embed swart Chickasaw
        /// </summary>
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 5:26:44
        short chopped;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 5:26:44
        std::string chorister;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 5:18:27
        Type49 overdue;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 5:26:44
        Type88 signaling;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 5:18:27
        Type22 surrender;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 5:18:27
        Type51 need;
        /// <summary>
        /// scanning graceless sharkskin sissified galleon hittable sadomasochist subsonic Uniroyal earthbound workday spookiness buffoonish Talley Daisey Albion
        /// </summary>
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 5:18:27
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 5:18:27
        Type39 nos;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 5:26:44
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 5:26:44
        unsigned short isothermal;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 5:26:44
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 5:26:44
        time_t id;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 5:26:44
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 5:26:44
        Type_Jenelle Johnathon;
        const class Table196Table* Table;
    public: 
        Table196Row(CremaReader::irow& row, Table196Table* table);
    };
    // Creator: Member_semiautomatic
    // CreatedDateTime: 2016-07-25 오후 5:18:27
    // Modifier: Admin_signalization
    // ModifiedDateTime: 2016-07-25 오후 5:26:44
    class Table196Table : public CremaTable<Table196Row>
    {
    public: 
        Table196Table();
        Table196Table(CremaReader::itable& table);
    public: 
        virtual ~Table196Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table196Row* Find(short chopped, Type88 signaling) const;
    };
    class Table150Row : public CremaRow
    {
    public: 
        /// <summary>
        /// supra
        /// </summary>
        // Creator: Admin_eyesore
        // CreatedDateTime: 2016-07-25 오후 12:45:52
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 2:32:53
        unsigned short impenetrable;
        // Creator: Admin_motive
        // CreatedDateTime: 2016-07-25 오후 2:32:53
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 2:32:53
        unsigned short tonsillitis;
        const class Table150Table* Table;
    public: 
        Table150Row(CremaReader::irow& row, Table150Table* table);
    };
    // Creator: Admin_eyesore
    // CreatedDateTime: 2016-07-25 오후 12:45:52
    // Modifier: Admin_motive
    // ModifiedDateTime: 2016-07-25 오후 2:32:53
    // ContentsModifier: Admin_asterisked
    // ContentsModifiedDateTime: 2016-07-25 오후 8:56:39
    class Table150Table : public CremaTable<Table150Row>
    {
    public: 
        Table150Table();
        Table150Table(CremaReader::itable& table);
    public: 
        virtual ~Table150Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table150Row* Find(unsigned short impenetrable) const;
    };
    class Table_replenishRow : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        float unnavigable;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        unsigned long long Janessa;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        time_t assiduity;
        /// <summary>
        /// debilitate vegetation abundant convene philologist outtake unlimber tabula filmy upgrade Gerhard Ronni knowable Mariya
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type8 yardmaster;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        unsigned char Sir;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type_Attn thermostat;
        /// <summary>
        /// monologue griever trapper Dirac roommate oops Thieu magicked sophisticated expound quality scorn acne artsy unbalanced obliteration Clary Kessiah Ibby
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        std::string popinjay;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned short planetarium;
        /// <summary>
        /// secularization Hazlitt Kai flirtatiousness timbering prefacer admire suede silkscreen soled calm homology Ambrosio Epstein inflict
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:51:19
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        Type_insolent jasper;
        const class Table_replenishTable* Table;
    public: 
        Table_replenishRow(CremaReader::irow& row, Table_replenishTable* table);
    };
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:51:19
    // ContentsModifier: Member_Richard
    // ContentsModifiedDateTime: 2016-07-25 오후 10:21:44
    class Table_replenishTable : public CremaTable<Table_replenishRow>
    {
    public: 
        Table_replenishTable();
        Table_replenishTable(CremaReader::itable& table);
    public: 
        virtual ~Table_replenishTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_replenishRow* Find(float unnavigable, time_t assiduity) const;
    };
    class Table_bedpanChild_admissionRow : public CremaRow
    {
    public: 
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:13:18
        unsigned long long Shackleton;
        /// <summary>
        /// fainthearted Hay
        /// </summary>
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:13:18
        std::string austereness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:13:18
        long long casaba;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:13:18
        bool reflection;
        const class Table_bedpanChild_admissionTable* Table;
        const class Table_bedpanRow* Parent;
    public: 
        Table_bedpanChild_admissionRow(CremaReader::irow& row, Table_bedpanChild_admissionTable* table);
    };
    // Creator: Member_privatization
    // CreatedDateTime: 2016-07-25 오전 9:13:17
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오전 9:13:18
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오전 11:11:26
    class Table_bedpanChild_admissionTable : public CremaTable<Table_bedpanChild_admissionRow>
    {
    public: 
        Table_bedpanChild_admissionTable();
        Table_bedpanChild_admissionTable(CremaReader::itable& table);
        Table_bedpanChild_admissionTable(std::vector<class Table_bedpanChild_admissionRow*> rows);
    public: 
        virtual ~Table_bedpanChild_admissionTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bedpanChild_admissionRow* Find(unsigned long long Shackleton) const;
    };
    class Table_bedpanChild1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// genie electroencephalographic hominid Grayce guffaw putrescent decustomised kayak braille Anni Robbyn demagogy canniness
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        unsigned char hamster;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        Type3 badinage;
        /// <summary>
        /// purulence slutty Aler Montanan
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        Type33 misogamist;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        unsigned char anathema;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        short Armin;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        time_t syllabusss;
        const class Table_bedpanChild1Table* Table;
        const Table_bedpanRow* Parent;
    public: 
        Table_bedpanChild1Row(CremaReader::irow& row, Table_bedpanChild1Table* table);
    };
    // Creator: Admin_mousse
    // CreatedDateTime: 2016-07-25 오전 11:13:22
    // Modifier: Admin_mousse
    // ModifiedDateTime: 2016-07-25 오전 11:13:22
    class Table_bedpanChild1Table : public CremaTable<Table_bedpanChild1Row>
    {
    public: 
        Table_bedpanChild1Table();
        Table_bedpanChild1Table(CremaReader::itable& table);
        Table_bedpanChild1Table(std::vector<class Table_bedpanChild1Row*> rows);
    public: 
        virtual ~Table_bedpanChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bedpanChild1Row* Find(unsigned char hamster, Type33 misogamist) const;
    };
    class Table_bedpanRow : public CremaRow
    {
    public: 
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t Stendhal;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        int cheerer;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t wreckage;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t Andriette;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:29:21
        long long oviduct;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:29:21
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:29:21
        long long Osbourn;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:29:21
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:29:21
        long long laminae;
        /// <summary>
        /// Sheryl planar clevis dully Archibaldo rotator helpfulness mariachi Tabby trousseau Tbilisi redshift Pen Saharan else impecunious madmen gravitational Hellenize
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:29:21
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:29:21
        int deferring;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 11:29:21
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 11:29:21
        bool straitness;
        const class Table_bedpanTable* Table;
        const Table_bedpanChild_admissionTable* Child_admission;
        const Table_bedpanChild1Table* Child1;
    private: 
        static Table_bedpanChild_admissionTable Child_admissionEmpty;
        static Table_bedpanChild1Table Child1Empty;
    public: 
        Table_bedpanRow(CremaReader::irow& row, Table_bedpanTable* table);
    friend static void Table_bedpanSetChild_admission(Table_bedpanRow* target, const std::vector<Table_bedpanChild_admissionRow*>& childs);
        static void Table_bedpanSetChild1(Table_bedpanRow* target, const std::vector<Table_bedpanChild1Row*>& childs);
    };
    // Modifier: Admin_Aura
    // ModifiedDateTime: 2016-07-25 오전 11:29:21
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오전 11:11:26
    class Table_bedpanTable : public CremaTable<Table_bedpanRow>
    {
    public: 
        const Table_bedpanChild_admissionTable* Child_admission;
        const Table_bedpanChild1Table* Child1;
    public: 
        Table_bedpanTable();
        Table_bedpanTable(CremaReader::itable& table);
    public: 
        virtual ~Table_bedpanTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bedpanRow* Find(time_t Stendhal, int cheerer) const;
    };
    class Table_wristRow : public CremaRow
    {
    public: 
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Admin_eyesore
        // ModifiedDateTime: 2016-07-25 오후 1:03:09
        short Gerri;
        /// <summary>
        /// scenery experiential cuneiform quarto measured Shandie Adenauer Nettie pastern
        /// </summary>
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        double Alia;
        /// <summary>
        /// identified waylayer hieroglyphic minke offstage electrodynamics circulations ersatz seaplane Dorothy chuntering Ill entitle curability
        /// </summary>
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:40:09
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        float sensuous;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 9:58:43
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 9:58:43
        std::string beautifier;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 11:40:09
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 11:40:09
        unsigned int nugget;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 11:40:09
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 11:40:09
        double picketer;
        // Creator: Admin_eyesore
        // CreatedDateTime: 2016-07-25 오후 1:03:09
        // Modifier: Admin_eyesore
        // ModifiedDateTime: 2016-07-25 오후 1:03:09
        char graceful;
        /// <summary>
        /// Pamelina populist Los prognostication aped frolicking Waikiki emblazonment Ardyth manifold aperiodicity Brillo expectoration wintry
        /// </summary>
        // Creator: Admin_eyesore
        // CreatedDateTime: 2016-07-25 오후 1:03:09
        // Modifier: Admin_eyesore
        // ModifiedDateTime: 2016-07-25 오후 1:03:09
        short epic;
        const class Table_wristTable* Table;
    public: 
        Table_wristRow(CremaReader::irow& row, Table_wristTable* table);
    };
    // Modifier: Admin_eyesore
    // ModifiedDateTime: 2016-07-25 오후 1:03:09
    // ContentsModifier: Admin_asterisked
    // ContentsModifiedDateTime: 2016-07-25 오전 11:57:38
    class Table_wristTable : public CremaTable<Table_wristRow>
    {
    public: 
        Table_wristTable();
        Table_wristTable(CremaReader::itable& table);
    public: 
        virtual ~Table_wristTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_wristRow* Find(short Gerri) const;
    };
    class Table33Child_dissociableRow : public CremaRow
    {
    public: 
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:39:06
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:39:06
        int highbrow;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:39:06
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:39:06
        float howsoever;
        /// <summary>
        /// West lowborn palliative cachet summable Martinez shortening subsequence Lila Olga telescope merrymaker aerodrome Yagi Kendrick Tiphanie flirtatious
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:39:06
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:39:06
        unsigned int Shoshanna;
        const class Table33Child_dissociableTable* Table;
        const class Table33Row* Parent;
    public: 
        Table33Child_dissociableRow(CremaReader::irow& row, Table33Child_dissociableTable* table);
    };
    // Creator: Admin_Marley
    // CreatedDateTime: 2016-07-25 오전 9:39:06
    // Modifier: Admin_Marley
    // ModifiedDateTime: 2016-07-25 오전 9:39:06
    // ContentsModifier: Admin_mousse
    // ContentsModifiedDateTime: 2016-07-25 오후 6:11:22
    class Table33Child_dissociableTable : public CremaTable<Table33Child_dissociableRow>
    {
    public: 
        Table33Child_dissociableTable();
        Table33Child_dissociableTable(CremaReader::itable& table);
        Table33Child_dissociableTable(std::vector<class Table33Child_dissociableRow*> rows);
    public: 
        virtual ~Table33Child_dissociableTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table33Child_dissociableRow* Find(int highbrow) const;
    };
    class Table33Row : public CremaRow
    {
    public: 
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double meatpacking;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        unsigned char guardedness;
        /// <summary>
        /// Bronny confute mawkish endure depravity adroitness hoopla thereat accused transmutation Emery sen pathfinder
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double Dugald;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        int polymaths;
        /// <summary>
        /// rounded Sean marathoner pressman acupuncturist Tandy famish Randene senior Romola Ulster Dugald Autumn Cash telegraph
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        Type_Madison thighbone;
        /// <summary>
        /// calvary Rawley airfield togged trivial hydrometer knits Albina girded predestination peculate boyscout remitted Lucifer Peter
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 10:40:33
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 10:56:26
        unsigned int astronomy;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 10:40:33
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 10:40:33
        unsigned int latish;
        /// <summary>
        /// Bushido Annora gym renovation Stockhausen sociobiology Lyndon humiliate fencepost libbing sanguined handless Cincinnati
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 10:40:33
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 10:56:26
        bool Taney;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 10:40:33
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 10:40:33
        char Mable;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 10:56:26
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 10:56:26
        time_t emblazon;
        /// <summary>
        /// exposure compositor loquaciousness
        /// </summary>
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 10:56:26
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:24:25
        unsigned long long monorail;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 10:56:26
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 10:56:26
        short cowhand;
        /// <summary>
        /// London comprehensibility foretaste hesitancy Breckenridge sorehead twitchy courgette Wolff Talmud retrofitted phosphide councilwomen epidermis buyback supremal airtightness cubit enrichment
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:24:25
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:24:25
        bool fisticuff;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:24:25
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:24:25
        float germicidal;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:24:25
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:24:25
        Type_Madison collinear;
        const class Table33Table* Table;
        const Table33Child_dissociableTable* Child_dissociable;
    private: 
        static Table33Child_dissociableTable Child_dissociableEmpty;
    public: 
        Table33Row(CremaReader::irow& row, Table33Table* table);
    friend static void Table33SetChild_dissociable(Table33Row* target, const std::vector<Table33Child_dissociableRow*>& childs);
    };
    // Creator: Admin_Hooke
    // CreatedDateTime: 2016-07-25 오전 9:32:32
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오전 11:24:25
    // ContentsModifier: Admin_mousse
    // ContentsModifiedDateTime: 2016-07-25 오후 6:11:22
    class Table33Table : public CremaTable<Table33Row>
    {
    public: 
        const Table33Child_dissociableTable* Child_dissociable;
    public: 
        Table33Table();
        Table33Table(CremaReader::itable& table);
    public: 
        virtual ~Table33Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table33Row* Find(double meatpacking) const;
    };
    class Table_drawnChild_BeardRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:11
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:11
        bool yang;
        /// <summary>
        /// curdle indebtedness gaudy insatiably
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:11
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 9:16:49
        short embedding;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:11
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 9:16:49
        std::string sectionalized;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 9:16:49
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 9:16:49
        time_t backstabbing;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 9:16:49
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 9:16:49
        unsigned short omnibus;
        const class Table_drawnChild_BeardTable* Table;
        const class Table_drawnRow* Parent;
    public: 
        Table_drawnChild_BeardRow(CremaReader::irow& row, Table_drawnChild_BeardTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:11
    // Modifier: Admin_whispering
    // ModifiedDateTime: 2016-07-25 오전 9:16:49
    // ContentsModifier: Member_scuzzy
    // ContentsModifiedDateTime: 2016-07-25 오전 9:38:35
    class Table_drawnChild_BeardTable : public CremaTable<Table_drawnChild_BeardRow>
    {
    public: 
        Table_drawnChild_BeardTable();
        Table_drawnChild_BeardTable(CremaReader::itable& table);
        Table_drawnChild_BeardTable(std::vector<class Table_drawnChild_BeardRow*> rows);
    public: 
        virtual ~Table_drawnChild_BeardTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_drawnChild_BeardRow* Find(bool yang) const;
    };
    class Table_drawnRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        unsigned short Hereford;
        const class Table_drawnTable* Table;
        const Table_drawnChild_BeardTable* Child_Beard;
    private: 
        static Table_drawnChild_BeardTable Child_BeardEmpty;
    public: 
        Table_drawnRow(CremaReader::irow& row, Table_drawnTable* table);
    friend static void Table_drawnSetChild_Beard(Table_drawnRow* target, const std::vector<Table_drawnChild_BeardRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:05
    // ContentsModifier: Member_scuzzy
    // ContentsModifiedDateTime: 2016-07-25 오전 9:38:35
    class Table_drawnTable : public CremaTable<Table_drawnRow>
    {
    public: 
        const Table_drawnChild_BeardTable* Child_Beard;
    public: 
        Table_drawnTable();
        Table_drawnTable(CremaReader::itable& table);
    public: 
        virtual ~Table_drawnTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_drawnRow* Find(unsigned short Hereford) const;
    };
    class Table_HallinanRow : public CremaRow
    {
    public: 
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:40:15
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:40:15
        char victimize;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:40:15
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:40:15
        unsigned short overlay;
        /// <summary>
        /// legalization Rubi chaff comforted tuberous eroticism theorization chromatographic near modulation helmsman Everett ancient
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:40:15
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:40:15
        Type36 Endymion;
        const class Table_HallinanTable* Table;
    public: 
        Table_HallinanRow(CremaReader::irow& row, Table_HallinanTable* table);
    };
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오전 10:40:15
    // ContentsModifier: Member_neurosis
    // ContentsModifiedDateTime: 2016-07-25 오후 11:09:40
    class Table_HallinanTable : public CremaTable<Table_HallinanRow>
    {
    public: 
        Table_HallinanTable();
        Table_HallinanTable(CremaReader::itable& table);
    public: 
        virtual ~Table_HallinanTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_HallinanRow* Find(char victimize) const;
    };
    class Table175Row : public CremaRow
    {
    public: 
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 2:16:57
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 2:16:57
        Type6 Cork;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 2:16:57
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 2:16:57
        double Terrill;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 2:16:57
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 2:16:57
        Type_Mather salubrious;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 2:16:57
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 2:16:57
        short copora;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오후 2:16:57
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오후 2:16:57
        int baggy;
        const class Table175Table* Table;
    public: 
        Table175Row(CremaReader::irow& row, Table175Table* table);
    };
    // Creator: Admin_reggae
    // CreatedDateTime: 2016-07-25 오후 2:16:57
    // Modifier: Admin_reggae
    // ModifiedDateTime: 2016-07-25 오후 2:16:57
    class Table175Table : public CremaTable<Table175Row>
    {
    public: 
        Table175Table();
        Table175Table(CremaReader::itable& table);
    public: 
        virtual ~Table175Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table175Row* Find(Type6 Cork) const;
    };
    class Table85Row : public CremaRow
    {
    public: 
        /// <summary>
        /// aperitif sallow Jerrylee Prado Betti Brandeis Joycelin neighborer
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:05:07
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:05:07
        int Chang;
        /// <summary>
        /// porcupine Sergei Caro smugger flatterer haggler levee uncreate Bridger Wier freedman scandalize tawny cadger trinitrotoluene recrudescent
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:05:07
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:05:07
        time_t scrapheap;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:05:07
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:05:07
        char breaststroke;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 11:49:48
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 11:49:48
        unsigned int allotting;
        /// <summary>
        /// Sully televangelism heal Hugo Eldon Barrera Sindhi Carlton
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 11:49:48
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 11:49:48
        std::string cordiality;
        const class Table85Table* Table;
    public: 
        Table85Row(CremaReader::irow& row, Table85Table* table);
    };
    // Creator: Admin_serviceableness
    // CreatedDateTime: 2016-07-25 오전 11:05:06
    // Modifier: Member_constipate
    // ModifiedDateTime: 2016-07-25 오전 11:49:48
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 1:32:12
    class Table85Table : public CremaTable<Table85Row>
    {
    public: 
        Table85Table();
        Table85Table(CremaReader::itable& table);
    public: 
        virtual ~Table85Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table85Row* Find(int Chang, char breaststroke) const;
    };
    class Table151Row : public CremaRow
    {
    public: 
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오후 12:46:46
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오후 12:46:46
        int Crissy;
        /// <summary>
        /// Jul Skylab dray husbandman shirtwaist pawnbroking torridity wastage Ramiro
        /// </summary>
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오후 12:46:46
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오후 12:46:46
        unsigned char Aguilar;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오후 12:46:46
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오후 12:46:46
        time_t admirable;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오후 12:46:46
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오후 12:46:46
        Type9 Batsheva;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오후 12:46:46
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오후 12:46:46
        float Maurizio;
        const class Table151Table* Table;
    public: 
        Table151Row(CremaReader::irow& row, Table151Table* table);
    };
    // Creator: Admin_whispering
    // CreatedDateTime: 2016-07-25 오후 12:46:46
    // Modifier: Admin_whispering
    // ModifiedDateTime: 2016-07-25 오후 12:46:46
    // ContentsModifier: Admin_toe
    // ContentsModifiedDateTime: 2016-07-25 오후 10:16:31
    class Table151Table : public CremaTable<Table151Row>
    {
    public: 
        Table151Table();
        Table151Table(CremaReader::itable& table);
    public: 
        virtual ~Table151Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table151Row* Find(int Crissy) const;
    };
    class Table_alienRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int rattling;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int deleterious;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        long long Dalmatian;
        const class Table_alienTable* Table;
    public: 
        Table_alienRow(CremaReader::irow& row, Table_alienTable* table);
    };
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 9:17:22
    // ContentsModifier: Admin_gifted
    // ContentsModifiedDateTime: 2016-07-25 오전 10:03:48
    class Table_alienTable : public CremaTable<Table_alienRow>
    {
    public: 
        Table_alienTable();
        Table_alienTable(CremaReader::itable& table);
    public: 
        virtual ~Table_alienTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_alienRow* Find(unsigned int snapback) const;
    };
    class Table_crystallizesChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:24
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:24
        char gos;
        const class Table_crystallizesChild2Table* Table;
        const class Table_crystallizesRow* Parent;
    public: 
        Table_crystallizesChild2Row(CremaReader::irow& row, Table_crystallizesChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:24
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:24
    class Table_crystallizesChild2Table : public CremaTable<Table_crystallizesChild2Row>
    {
    public: 
        Table_crystallizesChild2Table();
        Table_crystallizesChild2Table(CremaReader::itable& table);
        Table_crystallizesChild2Table(std::vector<class Table_crystallizesChild2Row*> rows);
    public: 
        virtual ~Table_crystallizesChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_crystallizesChild2Row* Find(char gos) const;
    };
    class Table_crystallizesChild3Row : public CremaRow
    {
    public: 
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        time_t lovably;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        short rendering;
        /// <summary>
        /// disbarment
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        std::string Wallace;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        unsigned int superstructure;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        short appearer;
        /// <summary>
        /// plosive Moscow imprinting paratyphoid cavemen farrago offense soon Rand Thibaud Limpopo affray fountain evade membranous undercover
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        std::string kitchenware;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        char Kora;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:29:11
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:29:11
        int silence;
        const class Table_crystallizesChild3Table* Table;
        const Table_crystallizesRow* Parent;
    public: 
        Table_crystallizesChild3Row(CremaReader::irow& row, Table_crystallizesChild3Table* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오전 9:29:11
    // Modifier: Member_kirsch
    // ModifiedDateTime: 2016-07-25 오전 9:29:11
    class Table_crystallizesChild3Table : public CremaTable<Table_crystallizesChild3Row>
    {
    public: 
        Table_crystallizesChild3Table();
        Table_crystallizesChild3Table(CremaReader::itable& table);
        Table_crystallizesChild3Table(std::vector<class Table_crystallizesChild3Row*> rows);
    public: 
        virtual ~Table_crystallizesChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_crystallizesChild3Row* Find(time_t lovably, const std::string& kitchenware) const;
    };
    class Table_crystallizesRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:07
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:07
        Type3 reprehensible;
        const class Table_crystallizesTable* Table;
        const Table_crystallizesChild2Table* Child2;
        const Table_crystallizesChild3Table* Child3;
    private: 
        static Table_crystallizesChild2Table Child2Empty;
        static Table_crystallizesChild3Table Child3Empty;
    public: 
        Table_crystallizesRow(CremaReader::irow& row, Table_crystallizesTable* table);
    friend static void Table_crystallizesSetChild2(Table_crystallizesRow* target, const std::vector<Table_crystallizesChild2Row*>& childs);
        static void Table_crystallizesSetChild3(Table_crystallizesRow* target, const std::vector<Table_crystallizesChild3Row*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:07
    class Table_crystallizesTable : public CremaTable<Table_crystallizesRow>
    {
    public: 
        const Table_crystallizesChild2Table* Child2;
        const Table_crystallizesChild3Table* Child3;
    public: 
        Table_crystallizesTable();
        Table_crystallizesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_crystallizesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_crystallizesRow* Find(Type3 reprehensible) const;
    };
    class Table112Row : public CremaRow
    {
    public: 
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        Type11 Lehigh;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        time_t Attic;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        int malaria;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        unsigned int Chiarra;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        bool Pound;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        time_t prescient;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 11:38:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 11:38:52
        short infarction;
        const class Table112Table* Table;
    public: 
        Table112Row(CremaReader::irow& row, Table112Table* table);
    };
    // Creator: Member_noncredit
    // CreatedDateTime: 2016-07-25 오전 11:38:52
    // Modifier: Member_noncredit
    // ModifiedDateTime: 2016-07-25 오전 11:38:52
    // ContentsModifier: Admin_distinctiveness
    // ContentsModifiedDateTime: 2016-07-25 오후 8:40:49
    class Table112Table : public CremaTable<Table112Row>
    {
    public: 
        Table112Table();
        Table112Table(CremaReader::itable& table);
    public: 
        virtual ~Table112Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table112Row* Find(Type11 Lehigh, int malaria) const;
    };
    class Table116Row : public CremaRow
    {
    public: 
        /// <summary>
        /// again misprision inbreed underexposure begrudge sodomize
        /// </summary>
        // Creator: Member_wholemeal
        // CreatedDateTime: 2016-07-25 오전 11:46:13
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 11:46:13
        short hybridization;
        // Creator: Member_wholemeal
        // CreatedDateTime: 2016-07-25 오전 11:46:13
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 11:46:13
        Type_Madison Blackstone;
        // Creator: Member_wholemeal
        // CreatedDateTime: 2016-07-25 오전 11:46:13
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 11:46:13
        Type_HeraclitusDeletable adulator;
        // Creator: Member_wholemeal
        // CreatedDateTime: 2016-07-25 오전 11:46:13
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 11:46:13
        bool durational;
        // Creator: Member_wholemeal
        // CreatedDateTime: 2016-07-25 오전 11:46:13
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 11:46:13
        unsigned char advertisement;
        // Creator: Member_wholemeal
        // CreatedDateTime: 2016-07-25 오전 11:46:13
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 11:46:13
        Type_Mather mercuric;
        const class Table116Table* Table;
    public: 
        Table116Row(CremaReader::irow& row, Table116Table* table);
    };
    // Creator: Member_wholemeal
    // CreatedDateTime: 2016-07-25 오전 11:46:13
    // Modifier: Member_wholemeal
    // ModifiedDateTime: 2016-07-25 오전 11:46:13
    // ContentsModifier: Admin_reggae
    // ContentsModifiedDateTime: 2016-07-25 오후 12:20:36
    class Table116Table : public CremaTable<Table116Row>
    {
    public: 
        Table116Table();
        Table116Table(CremaReader::itable& table);
    public: 
        virtual ~Table116Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table116Row* Find(short hybridization) const;
    };
    class Table199Row : public CremaRow
    {
    public: 
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        Type79 craze;
        /// <summary>
        /// Morna edge jamboree Boyer platitudinous vibrate metaphorical infix week interrelation syncope aurora lightening boisterous prison joyrode hearth
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        char gluon;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        unsigned short bagged;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        time_t infringer;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        long long Kristen;
        /// <summary>
        /// ergonomics duster rheology Emylee ugly Westminster ft proof Os percipience gingerbread Alanson amethystine klystron
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        double Wendy;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        char monoxide;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오후 5:28:09
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오후 5:28:09
        int plier;
        const class Table199Table* Table;
    public: 
        Table199Row(CremaReader::irow& row, Table199Table* table);
    };
    // Creator: Member_Cristy
    // CreatedDateTime: 2016-07-25 오후 5:28:09
    // Modifier: Member_Cristy
    // ModifiedDateTime: 2016-07-25 오후 5:28:09
    class Table199Table : public CremaTable<Table199Row>
    {
    public: 
        Table199Table();
        Table199Table(CremaReader::itable& table);
    public: 
        virtual ~Table199Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table199Row* Find(Type79 craze, time_t infringer, long long Kristen) const;
    };
    class Table9Child1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        long long hardhat;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        bool adulterant;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        std::string anticyclonic;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        int swoop;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        int Kamehameha;
        /// <summary>
        /// accustomed paralytically sectioned Averyl seeing positions gangrenous Bumbry aphelion toothache Gielgud apprehensible cloak gilbert Achilles Paule
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        double cuckoo;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 5:04:47
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 5:04:47
        float Pavel;
        /// <summary>
        /// Mellisa cohere receiver Gladi Pershing twelvemonth mahatma parasitically skillet Aggi artillery greedy electable
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 5:04:47
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 5:04:47
        unsigned long long yesteryear;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 5:04:47
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 5:04:47
        int Ono;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 5:04:47
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 5:04:47
        long long titian;
        const class Table9Child1Table* Table;
        const class Table9Row* Parent;
    public: 
        Table9Child1Row(CremaReader::irow& row, Table9Child1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:10
    // Modifier: Member_Dorine
    // ModifiedDateTime: 2016-07-25 오후 5:04:47
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오전 9:20:29
    class Table9Child1Table : public CremaTable<Table9Child1Row>
    {
    public: 
        Table9Child1Table();
        Table9Child1Table(CremaReader::itable& table);
        Table9Child1Table(std::vector<class Table9Child1Row*> rows);
    public: 
        virtual ~Table9Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table9Child1Row* Find(long long hardhat, int Kamehameha) const;
    };
    class Table9Child_warringDeletableRow : public CremaRow
    {
    public: 
        /// <summary>
        /// inexorably toothily Katheryn auntie
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:40:08
        unsigned char koala;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        int renovate;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        long long Norplant;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        bool Palisades;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        double ranter;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:40:08
        float Agamemnon;
        /// <summary>
        /// locked hypnotism invincibleness
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        char viscountess;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        unsigned short Adelbert;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        unsigned long long chemiluminescence;
        /// <summary>
        /// conceivably styrene apply Scheherezade footless informative sum compeer Solon SEATO gruel aardvark supervised Chile lookout aped Ephrayim nobleman
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:40:08
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:40:08
        Type_canted Uri;
        /// <summary>
        /// cocklebur pestilent squall forequarter hyphenation Scarlatti proletarian Bernstein knight coordinated freehand morass glassily nonnuclear
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:40:08
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:40:08
        time_t stalker;
        const class Table9Child_warringDeletableTable* Table;
        const Table9Row* Parent;
    public: 
        Table9Child_warringDeletableRow(CremaReader::irow& row, Table9Child_warringDeletableTable* table);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오전 9:21:41
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오전 11:40:08
    class Table9Child_warringDeletableTable : public CremaTable<Table9Child_warringDeletableRow>
    {
    public: 
        Table9Child_warringDeletableTable();
        Table9Child_warringDeletableTable(CremaReader::itable& table);
        Table9Child_warringDeletableTable(std::vector<class Table9Child_warringDeletableRow*> rows);
    public: 
        virtual ~Table9Child_warringDeletableTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table9Child_warringDeletableRow* Find(unsigned char koala, bool Palisades, double ranter, unsigned long long chemiluminescence) const;
    };
    class Table9Row : public CremaRow
    {
    public: 
        /// <summary>
        /// lightener precursory convex Qantas Jethro snowboard ever
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        std::string saturate;
        /// <summary>
        /// Iseabal trounce Blackstone yogurt protector conversational objection comparative whey
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        char Selma;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        Type_canted Urbana;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        unsigned short diarrhea;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        Type_Madison DH;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 2:51:24
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        std::string graphics;
        /// <summary>
        /// Ta geld systemization flabbiness ideograph antidemocratic
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 2:51:24
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        unsigned long long bade;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 2:51:24
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        short modesty;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 2:51:24
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        int implant;
        /// <summary>
        /// scrutinizing climatological element toxicity nudest issuant sublist dietetic holistically abhorring predator Gilli emulative insured Fleischer ghostwrite reverberation directorate
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 2:51:24
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        float epicyclic;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 2:51:24
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 2:51:24
        unsigned long long pear;
        const class Table9Table* Table;
        const Table9Child1Table* Child1;
        const Table9Child_warringDeletableTable* Child_warringDeletable;
    private: 
        static Table9Child1Table Child1Empty;
        static Table9Child_warringDeletableTable Child_warringDeletableEmpty;
    public: 
        Table9Row(CremaReader::irow& row, Table9Table* table);
    friend static void Table9SetChild1(Table9Row* target, const std::vector<Table9Child1Row*>& childs);
        static void Table9SetChild_warringDeletable(Table9Row* target, const std::vector<Table9Child_warringDeletableRow*>& childs);
    };
    // Modifier: Admin_Hooke
    // ModifiedDateTime: 2016-07-25 오후 2:51:24
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오전 9:20:29
    class Table9Table : public CremaTable<Table9Row>
    {
    public: 
        const Table9Child1Table* Child1;
        const Table9Child_warringDeletableTable* Child_warringDeletable;
    public: 
        Table9Table();
        Table9Table(CremaReader::itable& table);
    public: 
        virtual ~Table9Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table9Row* Find(const std::string& saturate) const;
    };
    class Table_piquantnessRow : public CremaRow
    {
    public: 
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:14:02
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 11:59:01
        float culpableness;
        /// <summary>
        /// gentlefolk Eric Finley subject Mar bickerer Eskimo concoct philosophic metabolize threatener halocarbon indescribableness Robin goofy selenography comedienne
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 11:59:01
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 11:59:01
        unsigned long long spare;
        /// <summary>
        /// roof Malissa carpetbagged Mitchael disbandment daffiness arterioscleroses jeep Malaya patella Robertson trinitarian trainspotter robbed canny hobbyhorse
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 11:59:01
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 11:59:01
        Type_Page ltd;
        const class Table_piquantnessTable* Table;
    public: 
        Table_piquantnessRow(CremaReader::irow& row, Table_piquantnessTable* table);
    };
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 11:59:01
    class Table_piquantnessTable : public CremaTable<Table_piquantnessRow>
    {
    public: 
        Table_piquantnessTable();
        Table_piquantnessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_piquantnessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_piquantnessRow* Find(float culpableness) const;
    };
    class Table111Row : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        short bani;
        /// <summary>
        /// catatonia Ashla
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        unsigned char sinusitis;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        short foul;
        /// <summary>
        /// illiterate
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        Type_HeraclitusDeletable foll;
        /// <summary>
        /// desktop chatting endocrinologist sharpshoot Scopes mountebank Manitoba Serengeti prolongate sheet timberline naval illegitimate
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        std::string operable;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        short soreness;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:38:31
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:38:31
        unsigned long long IT;
        const class Table111Table* Table;
    public: 
        Table111Row(CremaReader::irow& row, Table111Table* table);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오전 11:38:31
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오전 11:38:31
    // ContentsModifier: Admin_enshroud
    // ContentsModifiedDateTime: 2016-07-25 오전 11:58:19
    class Table111Table : public CremaTable<Table111Row>
    {
    public: 
        Table111Table();
        Table111Table(CremaReader::itable& table);
    public: 
        virtual ~Table111Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table111Row* Find(short bani) const;
    };
    class Table28Row : public CremaRow
    {
    public: 
        /// <summary>
        /// mare relinquish extermination indent herbivorous lesbianism obsequy extortioner pile auction Vivi coffeemaker
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:24:54
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:24:54
        time_t error;
        /// <summary>
        /// implementor vacuousness Adiana advert reverent drinkable oboe DOA slam precept anode
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:24:54
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:24:54
        std::string Clarance;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:24:54
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:24:54
        Type_livingness Gerardo;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:24:54
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:24:54
        unsigned long long Chilean;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:24:54
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:24:54
        short vibrionic;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:24:54
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:24:54
        short windflower;
        const class Table28Table* Table;
    public: 
        Table28Row(CremaReader::irow& row, Table28Table* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오전 9:24:54
    // Modifier: Member_kirsch
    // ModifiedDateTime: 2016-07-25 오전 9:24:54
    // ContentsModifier: Admin_Lisetta
    // ContentsModifiedDateTime: 2016-07-25 오후 12:00:37
    class Table28Table : public CremaTable<Table28Row>
    {
    public: 
        Table28Table();
        Table28Table(CremaReader::itable& table);
    public: 
        virtual ~Table28Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table28Row* Find(time_t error) const;
    };
    class Table_surveyChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        short photojournalism;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        long long panel;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        Type_supportedDeletable welsher;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        float rump;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        Type_rifled iambic;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        unsigned int bogey;
        /// <summary>
        /// facsimileing nephew viewer tightfisted Polaris complete conflicting desultoriness suitableness farfetchedness sparring Gavra Danyelle Pittman unprovocative Hispaniola alkalinity chamber
        /// </summary>
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        int expensiveness;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오전 10:32:34
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오전 10:32:34
        time_t pervasiveness;
        const class Table_surveyChild1Table* Table;
        const class Table_surveyRow* Parent;
    public: 
        Table_surveyChild1Row(CremaReader::irow& row, Table_surveyChild1Table* table);
    };
    // Creator: Member_liking
    // CreatedDateTime: 2016-07-25 오전 10:32:34
    // Modifier: Member_liking
    // ModifiedDateTime: 2016-07-25 오전 10:32:34
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오전 11:25:17
    class Table_surveyChild1Table : public CremaTable<Table_surveyChild1Row>
    {
    public: 
        Table_surveyChild1Table();
        Table_surveyChild1Table(CremaReader::itable& table);
        Table_surveyChild1Table(std::vector<class Table_surveyChild1Row*> rows);
    public: 
        virtual ~Table_surveyChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_surveyChild1Row* Find(short photojournalism, int expensiveness) const;
    };
    class Table_surveyRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Sapphire dosimeter
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double Tanny;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char fagoting;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        Type_Madison aim;
        /// <summary>
        /// moths oscillator lilac procaine crackdown Andriana trimmed hullabaloo
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        std::string brutality;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float scantly;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        int British;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char broadcast;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float injurer;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 10:29:39
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 10:29:39
        short dedicative;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 10:29:39
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 10:29:39
        int puzzle;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 10:29:39
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 10:29:39
        unsigned char lies;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 10:29:39
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 10:29:39
        unsigned char Heall;
        const class Table_surveyTable* Table;
        const Table_surveyChild1Table* Child1;
    private: 
        static Table_surveyChild1Table Child1Empty;
    public: 
        Table_surveyRow(CremaReader::irow& row, Table_surveyTable* table);
    friend static void Table_surveySetChild1(Table_surveyRow* target, const std::vector<Table_surveyChild1Row*>& childs);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 10:29:39
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오전 11:25:17
    class Table_surveyTable : public CremaTable<Table_surveyRow>
    {
    public: 
        const Table_surveyChild1Table* Child1;
    public: 
        Table_surveyTable();
        Table_surveyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_surveyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_surveyRow* Find(double Tanny, const std::string& brutality) const;
    };
    class Table128Child1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// sprightliness antihistorical dieresis cutup electromyographic piezoelectricity racegoers
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        int Qaddafi;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        Type_applejack Hebraism;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        float limitless;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        float Carlyle;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        int we;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        double equipartition;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:30:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:30:52
        Type55 metallurgical;
        const class Table128Child1Table* Table;
        const class Table128Row* Parent;
    public: 
        Table128Child1Row(CremaReader::irow& row, Table128Child1Table* table);
    };
    // Creator: Member_deception
    // CreatedDateTime: 2016-07-25 오후 12:30:52
    // Modifier: Member_deception
    // ModifiedDateTime: 2016-07-25 오후 12:30:52
    // ContentsModifier: Member_holographs
    // ContentsModifiedDateTime: 2016-07-25 오후 9:17:44
    class Table128Child1Table : public CremaTable<Table128Child1Row>
    {
    public: 
        Table128Child1Table();
        Table128Child1Table(CremaReader::itable& table);
        Table128Child1Table(std::vector<class Table128Child1Row*> rows);
    public: 
        virtual ~Table128Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table128Child1Row* Find(int Qaddafi) const;
    };
    class Table128Row : public CremaRow
    {
    public: 
        /// <summary>
        /// explicative Debra shrubbing Chaunce nullification subtenancy Bernadene
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:59:10
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:59:10
        long long Peron;
        /// <summary>
        /// muse uncodable vindicator Zimbabwe heterostructure flatware sleight Xerox spacewomen Dagny loper
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:59:10
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:59:10
        bool banisher;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:59:10
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:59:10
        float millimeter;
        const class Table128Table* Table;
        const Table128Child1Table* Child1;
    private: 
        static Table128Child1Table Child1Empty;
    public: 
        Table128Row(CremaReader::irow& row, Table128Table* table);
    friend static void Table128SetChild1(Table128Row* target, const std::vector<Table128Child1Row*>& childs);
    };
    // Creator: Admin_mousse
    // CreatedDateTime: 2016-07-25 오전 11:59:10
    // Modifier: Admin_mousse
    // ModifiedDateTime: 2016-07-25 오전 11:59:10
    // ContentsModifier: Member_holographs
    // ContentsModifiedDateTime: 2016-07-25 오후 9:17:44
    class Table128Table : public CremaTable<Table128Row>
    {
    public: 
        const Table128Child1Table* Child1;
    public: 
        Table128Table();
        Table128Table(CremaReader::itable& table);
    public: 
        virtual ~Table128Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table128Row* Find(long long Peron) const;
    };
    class Table31Row : public CremaRow
    {
    public: 
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:31:18
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:31:18
        int etc;
        /// <summary>
        /// employee latrine cliquey toolsmith intrametropolitan Drucill dystopia Naur petrify bishopric Rocco tuple flout trackbed botch
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:31:18
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:31:18
        long long puers;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:31:18
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:31:18
        unsigned int freewheeling;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:31:18
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:06:36
        unsigned int demonstrator;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:31:18
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:31:18
        unsigned long long allay;
        /// <summary>
        /// punch Marna struggler granularity termagant LIFO earn Lanai Lucy views gos
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:06:36
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:06:36
        Type_pledge dethrone;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:06:36
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:06:36
        short Ann;
        const class Table31Table* Table;
    public: 
        Table31Row(CremaReader::irow& row, Table31Table* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오전 9:31:18
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오전 10:06:36
    // ContentsModifier: Member_noncredit
    // ContentsModifiedDateTime: 2016-07-25 오전 10:12:41
    class Table31Table : public CremaTable<Table31Row>
    {
    public: 
        Table31Table();
        Table31Table(CremaReader::itable& table);
    public: 
        virtual ~Table31Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table31Row* Find(int etc) const;
    };
    class Table34Row : public CremaRow
    {
    public: 
        /// <summary>
        /// legged Can Accra Ivette barred step filamentary oilskin Ardeen hammertoe direful herbage
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:32:37
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:32:37
        time_t appellative;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:32:37
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:32:37
        unsigned long long corpulence;
        const class Table34Table* Table;
    public: 
        Table34Row(CremaReader::irow& row, Table34Table* table);
    };
    // Creator: Admin_distinctiveness
    // CreatedDateTime: 2016-07-25 오전 9:32:37
    // Modifier: Admin_distinctiveness
    // ModifiedDateTime: 2016-07-25 오전 9:32:37
    // ContentsModifier: Member_Garwin
    // ContentsModifiedDateTime: 2016-07-25 오후 9:24:09
    class Table34Table : public CremaTable<Table34Row>
    {
    public: 
        Table34Table();
        Table34Table(CremaReader::itable& table);
    public: 
        virtual ~Table34Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table34Row* Find(time_t appellative) const;
    };
    class Table_stockpileRow : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:49:06
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        long long outmaneuver;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:49:06
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:49:06
        bool Heddi;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        long long sidle;
        /// <summary>
        /// Virgilio windpipe outsetting spavin fuller psychos lascivious gulp hallows cleanable flagpole fullish grip
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:57:21
        int kWh;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:57:21
        std::string toothpick;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:57:21
        Type13 overstate;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        char schoolyard;
        /// <summary>
        /// Maximo sunsetting Georgena Jakob nosily ketone Segre ruler strap fatal Yorick Harlow
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        short Tuareg;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        double Sennett;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        double deicer;
        /// <summary>
        /// Matterhorn
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        long long prefect;
        const class Table_stockpileTable* Table;
    public: 
        Table_stockpileRow(CremaReader::irow& row, Table_stockpileTable* table);
    };
    // Modifier: Member_role
    // ModifiedDateTime: 2016-07-25 오전 11:09:03
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 9:08:24
    class Table_stockpileTable : public CremaTable<Table_stockpileRow>
    {
    public: 
        Table_stockpileTable();
        Table_stockpileTable(CremaReader::itable& table);
    public: 
        virtual ~Table_stockpileTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_stockpileRow* Find(long long outmaneuver) const;
    };
    class Table44Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오후 5:08:41
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오후 5:08:41
        unsigned short normalized;
        const class Table44Child1Table* Table;
        const class Table44Row* Parent;
    public: 
        Table44Child1Row(CremaReader::irow& row, Table44Child1Table* table);
    };
    // Creator: Admin_indoctrinator
    // CreatedDateTime: 2016-07-25 오후 5:08:40
    // Modifier: Admin_indoctrinator
    // ModifiedDateTime: 2016-07-25 오후 5:08:41
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 11:03:00
    class Table44Child1Table : public CremaTable<Table44Child1Row>
    {
    public: 
        Table44Child1Table();
        Table44Child1Table(CremaReader::itable& table);
        Table44Child1Table(std::vector<class Table44Child1Row*> rows);
    public: 
        virtual ~Table44Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table44Child1Row* Find(unsigned short normalized) const;
    };
    class Table44Row : public CremaRow
    {
    public: 
        /// <summary>
        /// viva Mathewson jugful Roberta again Bergsten masseur
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 9:45:41
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        unsigned char pylori;
        /// <summary>
        /// Hapsburg burl sixtieths pendent geopolitics mincemeat Shanan dyne initiating neurology else chance improperness dignify whammy monogramming universality Nagoya
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오후 12:20:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        int zigzag;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오후 12:20:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        unsigned int Appolonia;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오후 12:20:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        long long sahib;
        const class Table44Table* Table;
        const Table44Child1Table* Child1;
    private: 
        static Table44Child1Table Child1Empty;
    public: 
        Table44Row(CremaReader::irow& row, Table44Table* table);
    friend static void Table44SetChild1(Table44Row* target, const std::vector<Table44Child1Row*>& childs);
    };
    // Creator: Member_whosoever
    // CreatedDateTime: 2016-07-25 오전 9:45:41
    // Modifier: Member_budgie
    // ModifiedDateTime: 2016-07-25 오후 12:20:56
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 11:03:00
    class Table44Table : public CremaTable<Table44Row>
    {
    public: 
        const Table44Child1Table* Child1;
    public: 
        Table44Table();
        Table44Table(CremaReader::itable& table);
    public: 
        virtual ~Table44Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table44Row* Find(unsigned char pylori) const;
    };
    class Table67Row : public CremaRow
    {
    public: 
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_Russian
        // ModifiedDateTime: 2016-07-25 오후 3:32:45
        Type_Gretta event;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        char serendipitous;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        int Pawtucket;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        std::string cordial;
        // Creator: Admin_Russian
        // CreatedDateTime: 2016-07-25 오후 3:32:45
        // Modifier: Admin_Russian
        // ModifiedDateTime: 2016-07-25 오후 3:32:45
        Type52 eugenics;
        // Creator: Admin_Russian
        // CreatedDateTime: 2016-07-25 오후 3:32:45
        // Modifier: Admin_Russian
        // ModifiedDateTime: 2016-07-25 오후 3:32:45
        int Sher;
        // Creator: Admin_Russian
        // CreatedDateTime: 2016-07-25 오후 3:32:45
        // Modifier: Admin_Russian
        // ModifiedDateTime: 2016-07-25 오후 3:32:45
        short nemeses;
        /// <summary>
        /// veal unicameral belated Stacy terbium gunship peaky Putin Arni socialized Oneida dace unpleasing discretized winnow consolable
        /// </summary>
        // Creator: Admin_Russian
        // CreatedDateTime: 2016-07-25 오후 3:32:45
        // Modifier: Admin_Russian
        // ModifiedDateTime: 2016-07-25 오후 3:32:45
        Type85 collimated;
        const class Table67Table* Table;
    public: 
        Table67Row(CremaReader::irow& row, Table67Table* table);
    };
    // Creator: Admin_perch
    // CreatedDateTime: 2016-07-25 오전 10:32:53
    // Modifier: Admin_Russian
    // ModifiedDateTime: 2016-07-25 오후 3:32:45
    // ContentsModifier: Member_Dorine
    // ContentsModifiedDateTime: 2016-07-25 오후 5:04:55
    class Table67Table : public CremaTable<Table67Row>
    {
    public: 
        Table67Table();
        Table67Table(CremaReader::itable& table);
    public: 
        virtual ~Table67Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table67Row* Find(Type_Gretta event, const std::string& cordial) const;
    };
    class Table_accidentRow : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        short Portsmouth;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        Type_rennet bout;
        /// <summary>
        /// Ravi Buchanan Dejesus Wilde
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 10:57:01
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 10:57:01
        Type_HeraclitusDeletable aerosol;
        const class Table_accidentTable* Table;
    public: 
        Table_accidentRow(CremaReader::irow& row, Table_accidentTable* table);
    };
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 10:57:01
    // ContentsModifier: Member_nubbin
    // ContentsModifiedDateTime: 2016-07-25 오후 8:53:22
    class Table_accidentTable : public CremaTable<Table_accidentRow>
    {
    public: 
        Table_accidentTable();
        Table_accidentTable(CremaReader::itable& table);
    public: 
        virtual ~Table_accidentTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_accidentRow* Find(short Portsmouth) const;
    };
    class Table_symbioticChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Patti;
        /// <summary>
        /// jamboree path bedded crablike sliced drubber radiosterilization Martinez Mugabe slough Mirilla Harv Genevieve hairsbreadth
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        double glazed;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        bool diffract;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        unsigned int calamitous;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Cranmer;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Volvo;
        const class Table_symbioticChild1Table* Table;
        const class Table_symbioticRow* Parent;
    public: 
        Table_symbioticChild1Row(CremaReader::irow& row, Table_symbioticChild1Table* table);
    };
    // Creator: Admin_snootily
    // CreatedDateTime: 2016-07-25 오전 9:53:45
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오전 9:53:45
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 11:08:57
    class Table_symbioticChild1Table : public CremaTable<Table_symbioticChild1Row>
    {
    public: 
        Table_symbioticChild1Table();
        Table_symbioticChild1Table(CremaReader::itable& table);
        Table_symbioticChild1Table(std::vector<class Table_symbioticChild1Row*> rows);
    public: 
        virtual ~Table_symbioticChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_symbioticChild1Row* Find(int Patti, bool diffract) const;
    };
    class Table_symbioticRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int trollish;
        /// <summary>
        /// Alan Frankfurter hemorrhagic Jehoshaphat
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        bool lukewarm;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        /// <summary>
        /// miserableness noteworthiness leaky dustily conservatory tempt Weston OOo
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오후 12:14:23
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오후 12:14:23
        Type20 mechanism;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오후 12:14:23
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오후 12:14:23
        int bobsledded;
        const class Table_symbioticTable* Table;
        const Table_symbioticChild1Table* Child1;
    private: 
        static Table_symbioticChild1Table Child1Empty;
    public: 
        Table_symbioticRow(CremaReader::irow& row, Table_symbioticTable* table);
    friend static void Table_symbioticSetChild1(Table_symbioticRow* target, const std::vector<Table_symbioticChild1Row*>& childs);
    };
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오후 12:14:23
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 11:08:57
    class Table_symbioticTable : public CremaTable<Table_symbioticRow>
    {
    public: 
        const Table_symbioticChild1Table* Child1;
    public: 
        Table_symbioticTable();
        Table_symbioticTable(CremaReader::itable& table);
    public: 
        virtual ~Table_symbioticTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_symbioticRow* Find(unsigned int snapback) const;
    };
    class Table_ThornburgRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table_ThornburgTable* Table;
    public: 
        Table_ThornburgRow(CremaReader::irow& row, Table_ThornburgTable* table);
    };
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    class Table_ThornburgTable : public CremaTable<Table_ThornburgRow>
    {
    public: 
        Table_ThornburgTable();
        Table_ThornburgTable(CremaReader::itable& table);
    public: 
        virtual ~Table_ThornburgTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_ThornburgRow* Find(Type6 lumberyard, char uncap) const;
    };
    class Table_vixenishRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned short Araucanian;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        const class Table_vixenishTable* Table;
    public: 
        Table_vixenishRow(CremaReader::irow& row, Table_vixenishTable* table);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:15:17
    // ContentsModifier: Member_Teasdale
    // ContentsModifiedDateTime: 2016-07-25 오후 10:42:05
    class Table_vixenishTable : public CremaTable<Table_vixenishRow>
    {
    public: 
        Table_vixenishTable();
        Table_vixenishTable(CremaReader::itable& table);
    public: 
        virtual ~Table_vixenishTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_vixenishRow* Find(double corpsman, bool jetting) const;
    };
    class Table142Row : public CremaRow
    {
    public: 
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:25:00
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:25:00
        float lagging;
        /// <summary>
        /// anonymous slabbed Dotson Cronus Giuditta distantness naphthalene meatless tasting RC presider profitless elevenths impracticality impassivity
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:25:00
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:25:00
        float Ethyl;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:25:00
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 6:14:41
        int inflate;
        /// <summary>
        /// Cygnus
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:25:00
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:25:00
        std::string continuum;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:25:00
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:25:00
        double Kathryne;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 6:14:41
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 6:14:41
        time_t LCM;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 6:14:41
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 6:14:41
        unsigned short Marietta;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 6:14:41
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 6:14:41
        int petitioner;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 6:14:41
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 6:14:41
        int Magdalena;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 6:14:41
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 6:14:41
        unsigned short apprehend;
        const class Table142Table* Table;
    public: 
        Table142Row(CremaReader::irow& row, Table142Table* table);
    };
    // Creator: Member_pacifist
    // CreatedDateTime: 2016-07-25 오후 12:25:00
    // Modifier: Member_semiautomatic
    // ModifiedDateTime: 2016-07-25 오후 6:14:41
    // ContentsModifier: Member_privatization
    // ContentsModifiedDateTime: 2016-07-25 오후 8:26:50
    class Table142Table : public CremaTable<Table142Row>
    {
    public: 
        Table142Table();
        Table142Table(CremaReader::itable& table);
    public: 
        virtual ~Table142Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table142Row* Find(float lagging) const;
    };
    class Table96Row : public CremaRow
    {
    public: 
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 11:23:13
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 11:23:13
        Type_gustily impoliticness;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 11:23:13
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 11:23:13
        int Roberto;
        /// <summary>
        /// egoistic officer Congregationalist restrictively tranquilize wolves lordliness Calgary Elie breather Modesty Brighton waft roe jackknife
        /// </summary>
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 11:23:13
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 11:23:13
        Type_artiness hurried;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 11:23:13
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 11:23:13
        unsigned long long resplendent;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 11:23:13
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 11:23:13
        int papillae;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 11:23:13
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 11:23:13
        short popularism;
        const class Table96Table* Table;
    public: 
        Table96Row(CremaReader::irow& row, Table96Table* table);
    };
    // Creator: Member_scuzzy
    // CreatedDateTime: 2016-07-25 오전 11:23:13
    // Modifier: Member_scuzzy
    // ModifiedDateTime: 2016-07-25 오전 11:23:13
    class Table96Table : public CremaTable<Table96Row>
    {
    public: 
        Table96Table();
        Table96Table(CremaReader::itable& table);
    public: 
        virtual ~Table96Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table96Row* Find(Type_gustily impoliticness, Type_artiness hurried, short popularism) const;
    };
    class Table98Child1Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오후 12:13:39
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오후 12:13:39
        int syncopation;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오후 12:13:39
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오후 12:13:39
        char Rayner;
        /// <summary>
        /// achievable undated racer Laurasia Faulkner Bradstreet expurgate Algonquian preventive workaround bridleway BCD baroness
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오후 12:13:39
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:36:49
        bool abjure;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오후 12:13:39
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오후 12:13:39
        long long Nukualofa;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:36:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:36:49
        std::string escrow;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:36:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:36:49
        int thriver;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:36:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:36:49
        Type_Porrima gigged;
        const class Table98Child1Table* Table;
        const class Table98Row* Parent;
    public: 
        Table98Child1Row(CremaReader::irow& row, Table98Child1Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오후 12:13:38
    // Modifier: Admin_Marley
    // ModifiedDateTime: 2016-07-25 오후 12:36:49
    // ContentsModifier: Admin_getup
    // ContentsModifiedDateTime: 2016-07-25 오후 8:42:33
    class Table98Child1Table : public CremaTable<Table98Child1Row>
    {
    public: 
        Table98Child1Table();
        Table98Child1Table(CremaReader::itable& table);
        Table98Child1Table(std::vector<class Table98Child1Row*> rows);
    public: 
        virtual ~Table98Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table98Child1Row* Find(int syncopation) const;
    };
    class Table98Row : public CremaRow
    {
    public: 
        /// <summary>
        /// workplace figged Isidoro irritation Allen neurologist disinfectant Ramona Lesya milkiness Singaporean pegged directs godparent prejudger wish Sonni Lovell Orv
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 11:27:07
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 11:27:07
        int distension;
        const class Table98Table* Table;
        const Table98Child1Table* Child1;
    private: 
        static Table98Child1Table Child1Empty;
    public: 
        Table98Row(CremaReader::irow& row, Table98Table* table);
    friend static void Table98SetChild1(Table98Row* target, const std::vector<Table98Child1Row*>& childs);
    };
    // Creator: Member_idle
    // CreatedDateTime: 2016-07-25 오전 11:27:07
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오전 11:27:07
    // ContentsModifier: Admin_getup
    // ContentsModifiedDateTime: 2016-07-25 오후 8:42:33
    class Table98Table : public CremaTable<Table98Row>
    {
    public: 
        const Table98Child1Table* Child1;
    public: 
        Table98Table();
        Table98Table(CremaReader::itable& table);
    public: 
        virtual ~Table98Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table98Row* Find(int distension) const;
    };
    class Table_refunderChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        unsigned char hauberk;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        std::string tortoiseshell;
        /// <summary>
        /// grok literacy ingratiating defoliant humongous resole glummer Charlot Jennings limy shiftiness spunky Wallas Demetri denier
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        unsigned char costarring;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        bool cod;
        /// <summary>
        /// Angevin
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        std::string SEATO;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        float shucker;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        time_t gasworks;
        const class Table_refunderChild1Table* Table;
        const class Table_refunderRow* Parent;
    public: 
        Table_refunderChild1Row(CremaReader::irow& row, Table_refunderChild1Table* table);
    };
    // Creator: Admin_Lisetta
    // CreatedDateTime: 2016-07-25 오전 10:25:30
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 10:25:30
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 10:13:47
    class Table_refunderChild1Table : public CremaTable<Table_refunderChild1Row>
    {
    public: 
        Table_refunderChild1Table();
        Table_refunderChild1Table(CremaReader::itable& table);
        Table_refunderChild1Table(std::vector<class Table_refunderChild1Row*> rows);
    public: 
        virtual ~Table_refunderChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_refunderChild1Row* Find(unsigned char hauberk) const;
    };
    class Table_refunderRow : public CremaRow
    {
    public: 
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double meatpacking;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        unsigned char guardedness;
        /// <summary>
        /// Bronny confute mawkish endure depravity adroitness hoopla thereat accused transmutation Emery sen pathfinder
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double Dugald;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        int polymaths;
        /// <summary>
        /// rounded Sean marathoner pressman acupuncturist Tandy famish Randene senior Romola Ulster Dugald Autumn Cash telegraph
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        Type_Madison thighbone;
        const class Table_refunderTable* Table;
        const Table_refunderChild1Table* Child1;
    private: 
        static Table_refunderChild1Table Child1Empty;
    public: 
        Table_refunderRow(CremaReader::irow& row, Table_refunderTable* table);
    friend static void Table_refunderSetChild1(Table_refunderRow* target, const std::vector<Table_refunderChild1Row*>& childs);
    };
    // Modifier: Admin_Hooke
    // ModifiedDateTime: 2016-07-25 오전 9:32:32
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 10:13:47
    class Table_refunderTable : public CremaTable<Table_refunderRow>
    {
    public: 
        const Table_refunderChild1Table* Child1;
    public: 
        Table_refunderTable();
        Table_refunderTable(CremaReader::itable& table);
    public: 
        virtual ~Table_refunderTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_refunderRow* Find(double meatpacking) const;
    };
    class Table_wolvesChild1Row : public CremaRow
    {
    public: 
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        char Jolee;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        Type_Mather singletree;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        long long blunderer;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        Type70 condolence;
        /// <summary>
        /// observance anapest alveoli xii
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        int runaway;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        float precious;
        /// <summary>
        /// Hurley Belem scrumptious snowball finial nonchalant jackknives Kippie Bertina
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        int Anstice;
        /// <summary>
        /// raconteur surrogation Dov Parker illy stealthily bedraggle turboprop scribal Anabella morphophonemics impractical likeness
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오후 1:52:24
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오후 1:52:24
        unsigned short shielder;
        const class Table_wolvesChild1Table* Table;
        const class Table_wolvesRow* Parent;
    public: 
        Table_wolvesChild1Row(CremaReader::irow& row, Table_wolvesChild1Table* table);
    };
    // Creator: member
    // CreatedDateTime: 2016-07-25 오후 1:52:24
    // Modifier: member
    // ModifiedDateTime: 2016-07-25 오후 1:52:24
    class Table_wolvesChild1Table : public CremaTable<Table_wolvesChild1Row>
    {
    public: 
        Table_wolvesChild1Table();
        Table_wolvesChild1Table(CremaReader::itable& table);
        Table_wolvesChild1Table(std::vector<class Table_wolvesChild1Row*> rows);
    public: 
        virtual ~Table_wolvesChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_wolvesChild1Row* Find(char Jolee, float precious) const;
    };
    class Table_wolvesRow : public CremaRow
    {
    public: 
        /// <summary>
        /// newscasting overweight beneficialness resinous epileptic shovelful
        /// </summary>
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오전 10:35:29
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오전 10:35:29
        unsigned int tempura;
        const class Table_wolvesTable* Table;
        const Table_wolvesChild1Table* Child1;
    private: 
        static Table_wolvesChild1Table Child1Empty;
    public: 
        Table_wolvesRow(CremaReader::irow& row, Table_wolvesTable* table);
    friend static void Table_wolvesSetChild1(Table_wolvesRow* target, const std::vector<Table_wolvesChild1Row*>& childs);
    };
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오전 10:35:29
    // ContentsModifier: Admin_eyesore
    // ContentsModifiedDateTime: 2016-07-25 오후 1:27:18
    class Table_wolvesTable : public CremaTable<Table_wolvesRow>
    {
    public: 
        const Table_wolvesChild1Table* Child1;
    public: 
        Table_wolvesTable();
        Table_wolvesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_wolvesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_wolvesRow* Find(unsigned int tempura) const;
    };
    class Table45Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오후 12:09:33
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오후 12:09:33
        int intractable;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오후 12:09:33
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오후 12:09:33
        int romanticist;
        const class Table45Child1Table* Table;
        const class Table45Row* Parent;
    public: 
        Table45Child1Row(CremaReader::irow& row, Table45Child1Table* table);
    };
    // Creator: Admin_Lisetta
    // CreatedDateTime: 2016-07-25 오후 12:09:33
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오후 12:09:33
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 4:48:49
    class Table45Child1Table : public CremaTable<Table45Child1Row>
    {
    public: 
        Table45Child1Table();
        Table45Child1Table(CremaReader::itable& table);
        Table45Child1Table(std::vector<class Table45Child1Row*> rows);
    public: 
        virtual ~Table45Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table45Child1Row* Find(int intractable, int romanticist) const;
    };
    class Table45Row : public CremaRow
    {
    public: 
        /// <summary>
        /// linguine respectable Goodyear splatter stretchy desalinate
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:46:27
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:46:27
        int monumental;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:46:27
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:46:27
        char nonplussed;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:46:27
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오후 1:14:28
        unsigned char pterodactyl;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:46:27
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:46:27
        short concerted;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오후 1:14:28
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오후 1:14:28
        char refrozen;
        const class Table45Table* Table;
        const Table45Child1Table* Child1;
    private: 
        static Table45Child1Table Child1Empty;
    public: 
        Table45Row(CremaReader::irow& row, Table45Table* table);
    friend static void Table45SetChild1(Table45Row* target, const std::vector<Table45Child1Row*>& childs);
    };
    // Creator: Admin_Aura
    // CreatedDateTime: 2016-07-25 오전 9:46:27
    // Modifier: Admin_miscegenation
    // ModifiedDateTime: 2016-07-25 오후 1:14:28
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 4:48:49
    class Table45Table : public CremaTable<Table45Row>
    {
    public: 
        const Table45Child1Table* Child1;
    public: 
        Table45Table();
        Table45Table(CremaReader::itable& table);
    public: 
        virtual ~Table45Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table45Row* Find(int monumental) const;
    };
    class Table83Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 12:25:15
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 12:25:15
        long long feign;
        /// <summary>
        /// agribusiness Rice listener cowling arithmetical platting egalitarianism mountaineer
        /// </summary>
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 12:25:15
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 12:25:15
        int snob;
        /// <summary>
        /// Rd readout chardonnay Gandhian fired supermom fabricator annoyer
        /// </summary>
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 12:25:15
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 12:25:15
        double lobby;
        const class Table83Child1Table* Table;
        const class Table83Row* Parent;
    public: 
        Table83Child1Row(CremaReader::irow& row, Table83Child1Table* table);
    };
    // Creator: Admin_signalization
    // CreatedDateTime: 2016-07-25 오후 12:25:15
    // Modifier: Admin_signalization
    // ModifiedDateTime: 2016-07-25 오후 12:25:15
    class Table83Child1Table : public CremaTable<Table83Child1Row>
    {
    public: 
        Table83Child1Table();
        Table83Child1Table(CremaReader::itable& table);
        Table83Child1Table(std::vector<class Table83Child1Row*> rows);
    public: 
        virtual ~Table83Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table83Child1Row* Find(long long feign) const;
    };
    class Table83Row : public CremaRow
    {
    public: 
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:00:52
        long long offstage;
        /// <summary>
        /// benightedness savoriest Eiffel
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오후 12:34:51
        time_t pinhead;
        /// <summary>
        /// Nazarene vine virtuoso acquaintanceship Jimenez conicalness math oceangoing Arabist
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:00:52
        unsigned int fancily;
        /// <summary>
        /// insufferably Celsius meat
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오후 12:34:51
        long long starlet;
        /// <summary>
        /// sipping idolization Ballard revivify DiMaggio psaltery protection wedge ordinate badminton Wodehouse
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:00:52
        std::string perkiness;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:00:52
        char genially;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:00:52
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:00:52
        Type_gustily flax;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오후 12:34:51
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오후 12:34:51
        unsigned long long brickbat;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오후 12:34:51
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오후 12:34:51
        Type_surprise Clemente;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오후 12:34:51
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오후 12:34:51
        Type_Dianna fractious;
        /// <summary>
        /// bullet megadeaths Reunion sneakily occult initiator regatta anastomosis
        /// </summary>
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오후 12:34:51
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오후 12:34:51
        bool unsightliness;
        const class Table83Table* Table;
        const Table83Child1Table* Child1;
    private: 
        static Table83Child1Table Child1Empty;
    public: 
        Table83Row(CremaReader::irow& row, Table83Table* table);
    friend static void Table83SetChild1(Table83Row* target, const std::vector<Table83Child1Row*>& childs);
    };
    // Creator: Admin_Marshal
    // CreatedDateTime: 2016-07-25 오전 11:00:52
    // Modifier: Member_noncredit
    // ModifiedDateTime: 2016-07-25 오후 12:34:51
    // ContentsModifier: Member_potage
    // ContentsModifiedDateTime: 2016-07-25 오전 11:21:41
    class Table83Table : public CremaTable<Table83Row>
    {
    public: 
        const Table83Child1Table* Child1;
    public: 
        Table83Table();
        Table83Table(CremaReader::itable& table);
    public: 
        virtual ~Table83Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table83Row* Find(long long offstage, const std::string& perkiness) const;
    };
    class Table_sherbetChild_GallupRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        long long hardhat;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        int capacity;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        bool adulterant;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        std::string anticyclonic;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        int swoop;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        int Kamehameha;
        /// <summary>
        /// accustomed paralytically sectioned Averyl seeing positions gangrenous Bumbry aphelion toothache Gielgud apprehensible cloak gilbert Achilles Paule
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:10
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:10
        double cuckoo;
        const class Table_sherbetChild_GallupTable* Table;
        const class Table_sherbetRow* Parent;
    public: 
        Table_sherbetChild_GallupRow(CremaReader::irow& row, Table_sherbetChild_GallupTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:10
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:10
    // ContentsModifier: Member_Alex
    // ContentsModifiedDateTime: 2016-07-25 오후 2:09:35
    class Table_sherbetChild_GallupTable : public CremaTable<Table_sherbetChild_GallupRow>
    {
    public: 
        Table_sherbetChild_GallupTable();
        Table_sherbetChild_GallupTable(CremaReader::itable& table);
        Table_sherbetChild_GallupTable(std::vector<class Table_sherbetChild_GallupRow*> rows);
    public: 
        virtual ~Table_sherbetChild_GallupTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_sherbetChild_GallupRow* Find(long long hardhat, int Kamehameha) const;
    };
    class Table_sherbetChild3Row : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        unsigned char koala;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        int renovate;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        long long Norplant;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        bool Palisades;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        double ranter;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        float Agamemnon;
        /// <summary>
        /// locked hypnotism invincibleness
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        char viscountess;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        unsigned short Adelbert;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:21:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:21:41
        unsigned long long chemiluminescence;
        const class Table_sherbetChild3Table* Table;
        const Table_sherbetRow* Parent;
    public: 
        Table_sherbetChild3Row(CremaReader::irow& row, Table_sherbetChild3Table* table);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오전 9:21:41
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오전 9:21:41
    // ContentsModifier: Member_Alex
    // ContentsModifiedDateTime: 2016-07-25 오후 2:09:35
    class Table_sherbetChild3Table : public CremaTable<Table_sherbetChild3Row>
    {
    public: 
        Table_sherbetChild3Table();
        Table_sherbetChild3Table(CremaReader::itable& table);
        Table_sherbetChild3Table(std::vector<class Table_sherbetChild3Row*> rows);
    public: 
        virtual ~Table_sherbetChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_sherbetChild3Row* Find(unsigned char koala, bool Palisades, double ranter, unsigned long long chemiluminescence) const;
    };
    class Table_sherbetRow : public CremaRow
    {
    public: 
        /// <summary>
        /// lightener precursory convex Qantas Jethro snowboard ever
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        std::string saturate;
        /// <summary>
        /// Iseabal trounce Blackstone yogurt protector conversational objection comparative whey
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        char Selma;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        Type_canted Urbana;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:12:18
        unsigned short diarrhea;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:09
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:09
        Type_Madison DH;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:12:18
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:12:18
        unsigned int torque;
        /// <summary>
        /// extrasensory stonewort septuagenarian pedicure manful village faithlessness Samuelson oligarchy cubical decennial offtrack Theodor intoxicant axis workroom
        /// </summary>
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오전 10:12:18
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오전 10:12:18
        float submissiveness;
        const class Table_sherbetTable* Table;
        const Table_sherbetChild_GallupTable* Child_Gallup;
        const Table_sherbetChild3Table* Child3;
    private: 
        static Table_sherbetChild_GallupTable Child_GallupEmpty;
        static Table_sherbetChild3Table Child3Empty;
    public: 
        Table_sherbetRow(CremaReader::irow& row, Table_sherbetTable* table);
    friend static void Table_sherbetSetChild_Gallup(Table_sherbetRow* target, const std::vector<Table_sherbetChild_GallupRow*>& childs);
        static void Table_sherbetSetChild3(Table_sherbetRow* target, const std::vector<Table_sherbetChild3Row*>& childs);
    };
    // Modifier: Member_semiautomatic
    // ModifiedDateTime: 2016-07-25 오전 10:12:18
    // ContentsModifier: Member_Alex
    // ContentsModifiedDateTime: 2016-07-25 오후 2:09:35
    class Table_sherbetTable : public CremaTable<Table_sherbetRow>
    {
    public: 
        const Table_sherbetChild_GallupTable* Child_Gallup;
        const Table_sherbetChild3Table* Child3;
    public: 
        Table_sherbetTable();
        Table_sherbetTable(CremaReader::itable& table);
    public: 
        virtual ~Table_sherbetTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_sherbetRow* Find(const std::string& saturate) const;
    };
    class Table_freighterRow : public CremaRow
    {
    public: 
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        unsigned int Argentina;
        /// <summary>
        /// Aldebaran wraps illuminate froth customize tugboat thwarter vituperate disappointing Shafer slurp Willoughby
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        Type_Multan wingding;
        const class Table_freighterTable* Table;
    public: 
        Table_freighterRow(CremaReader::irow& row, Table_freighterTable* table);
    };
    // Modifier: Admin_miscegenation
    // ModifiedDateTime: 2016-07-25 오전 9:42:07
    class Table_freighterTable : public CremaTable<Table_freighterRow>
    {
    public: 
        Table_freighterTable();
        Table_freighterTable(CremaReader::itable& table);
    public: 
        virtual ~Table_freighterTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_freighterRow* Find(unsigned int Argentina) const;
    };
    class Table_HanoverianChild_closingRow : public CremaRow
    {
    public: 
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:36:58
        unsigned long long Shackleton;
        /// <summary>
        /// fainthearted Hay
        /// </summary>
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:36:58
        std::string austereness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오전 9:42:11
        long long casaba;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:36:58
        bool reflection;
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오전 9:42:11
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오전 9:42:11
        float publishes;
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오전 9:42:11
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오전 9:42:11
        short nonempty;
        const class Table_HanoverianChild_closingTable* Table;
        const class Table_HanoverianRow* Parent;
    public: 
        Table_HanoverianChild_closingRow(CremaReader::irow& row, Table_HanoverianChild_closingTable* table);
    };
    // Creator: Member_privatization
    // CreatedDateTime: 2016-07-25 오전 9:13:17
    // Modifier: Member_sportiness
    // ModifiedDateTime: 2016-07-25 오전 9:42:11
    // ContentsModifier: Admin_Augustus
    // ContentsModifiedDateTime: 2016-07-25 오전 11:19:52
    class Table_HanoverianChild_closingTable : public CremaTable<Table_HanoverianChild_closingRow>
    {
    public: 
        Table_HanoverianChild_closingTable();
        Table_HanoverianChild_closingTable(CremaReader::itable& table);
        Table_HanoverianChild_closingTable(std::vector<class Table_HanoverianChild_closingRow*> rows);
    public: 
        virtual ~Table_HanoverianChild_closingTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_HanoverianChild_closingRow* Find(unsigned long long Shackleton) const;
    };
    class Table_HanoverianChild_MartinoRow : public CremaRow
    {
    public: 
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오전 9:27:57
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오전 9:27:57
        time_t whitening;
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오전 9:27:57
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오전 9:27:57
        int anthropometric;
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오전 9:27:57
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오전 9:27:57
        int bartend;
        const class Table_HanoverianChild_MartinoTable* Table;
        const Table_HanoverianRow* Parent;
    public: 
        Table_HanoverianChild_MartinoRow(CremaReader::irow& row, Table_HanoverianChild_MartinoTable* table);
    };
    // Creator: Admin_energized
    // CreatedDateTime: 2016-07-25 오전 9:27:57
    // Modifier: Admin_energized
    // ModifiedDateTime: 2016-07-25 오전 9:27:57
    // ContentsModifier: Admin_Augustus
    // ContentsModifiedDateTime: 2016-07-25 오전 11:19:52
    class Table_HanoverianChild_MartinoTable : public CremaTable<Table_HanoverianChild_MartinoRow>
    {
    public: 
        Table_HanoverianChild_MartinoTable();
        Table_HanoverianChild_MartinoTable(CremaReader::itable& table);
        Table_HanoverianChild_MartinoTable(std::vector<class Table_HanoverianChild_MartinoRow*> rows);
    public: 
        virtual ~Table_HanoverianChild_MartinoTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_HanoverianChild_MartinoRow* Find(time_t whitening, int bartend) const;
    };
    class Table_HanoverianRow : public CremaRow
    {
    public: 
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t Stendhal;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        int cheerer;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t wreckage;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t Andriette;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        long long oviduct;
        const class Table_HanoverianTable* Table;
        const Table_HanoverianChild_closingTable* Child_closing;
        const Table_HanoverianChild_MartinoTable* Child_Martino;
    private: 
        static Table_HanoverianChild_closingTable Child_closingEmpty;
        static Table_HanoverianChild_MartinoTable Child_MartinoEmpty;
    public: 
        Table_HanoverianRow(CremaReader::irow& row, Table_HanoverianTable* table);
    friend static void Table_HanoverianSetChild_closing(Table_HanoverianRow* target, const std::vector<Table_HanoverianChild_closingRow*>& childs);
        static void Table_HanoverianSetChild_Martino(Table_HanoverianRow* target, const std::vector<Table_HanoverianChild_MartinoRow*>& childs);
    };
    // Modifier: Member_scuzzy
    // ModifiedDateTime: 2016-07-25 오전 5:53:33
    // ContentsModifier: Admin_Augustus
    // ContentsModifiedDateTime: 2016-07-25 오전 11:19:52
    class Table_HanoverianTable : public CremaTable<Table_HanoverianRow>
    {
    public: 
        const Table_HanoverianChild_closingTable* Child_closing;
        const Table_HanoverianChild_MartinoTable* Child_Martino;
    public: 
        Table_HanoverianTable();
        Table_HanoverianTable(CremaReader::itable& table);
    public: 
        virtual ~Table_HanoverianTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_HanoverianRow* Find(time_t Stendhal, int cheerer) const;
    };
    class Table_houriChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        unsigned char hauberk;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        std::string tortoiseshell;
        /// <summary>
        /// grok literacy ingratiating defoliant humongous resole glummer Charlot Jennings limy shiftiness spunky Wallas Demetri denier
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        unsigned char costarring;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        bool cod;
        /// <summary>
        /// Angevin
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        std::string SEATO;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        float shucker;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        time_t gasworks;
        const class Table_houriChild1Table* Table;
        const class Table_houriRow* Parent;
    public: 
        Table_houriChild1Row(CremaReader::irow& row, Table_houriChild1Table* table);
    };
    // Creator: Admin_Lisetta
    // CreatedDateTime: 2016-07-25 오전 10:25:30
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 10:25:30
    // ContentsModifier: Member_creel
    // ContentsModifiedDateTime: 2016-07-25 오후 1:29:13
    class Table_houriChild1Table : public CremaTable<Table_houriChild1Row>
    {
    public: 
        Table_houriChild1Table();
        Table_houriChild1Table(CremaReader::itable& table);
        Table_houriChild1Table(std::vector<class Table_houriChild1Row*> rows);
    public: 
        virtual ~Table_houriChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_houriChild1Row* Find(unsigned char hauberk) const;
    };
    class Table_houriRow : public CremaRow
    {
    public: 
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double meatpacking;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        unsigned char guardedness;
        /// <summary>
        /// Bronny confute mawkish endure depravity adroitness hoopla thereat accused transmutation Emery sen pathfinder
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double Dugald;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        int polymaths;
        /// <summary>
        /// Maalox reoccupy chevalier custom furring morose Anet Elnore stunning drop babysat
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 11:52:08
        Type_Madison thighbone;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 11:52:08
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 11:52:08
        unsigned int renovate;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 11:52:08
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 11:52:08
        unsigned long long visible;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 11:52:08
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 11:52:08
        int typeahead;
        const class Table_houriTable* Table;
        const Table_houriChild1Table* Child1;
    private: 
        static Table_houriChild1Table Child1Empty;
    public: 
        Table_houriRow(CremaReader::irow& row, Table_houriTable* table);
    friend static void Table_houriSetChild1(Table_houriRow* target, const std::vector<Table_houriChild1Row*>& childs);
    };
    // Modifier: member
    // ModifiedDateTime: 2016-07-25 오전 11:52:08
    // ContentsModifier: Member_creel
    // ContentsModifiedDateTime: 2016-07-25 오후 1:29:13
    class Table_houriTable : public CremaTable<Table_houriRow>
    {
    public: 
        const Table_houriChild1Table* Child1;
    public: 
        Table_houriTable();
        Table_houriTable(CremaReader::itable& table);
    public: 
        virtual ~Table_houriTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_houriRow* Find(double meatpacking) const;
    };
    class Table191Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Charis granddaughter Perez epochs North matchbox
        /// </summary>
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 4:54:33
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 4:54:33
        bool emergence;
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 4:54:33
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 4:54:33
        Type77 plebiscite;
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 4:54:33
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 4:54:33
        Type_rennet christened;
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 4:54:33
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 4:54:33
        unsigned int cylindric;
        /// <summary>
        /// Malory
        /// </summary>
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 4:54:33
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 4:54:33
        double cryostat;
        /// <summary>
        /// mantle Christoffel Stoicism informative
        /// </summary>
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 4:54:33
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 4:54:33
        Type26 cotillion;
        const class Table191Table* Table;
    public: 
        Table191Row(CremaReader::irow& row, Table191Table* table);
    };
    // Creator: Member_Simenon
    // CreatedDateTime: 2016-07-25 오후 4:54:33
    // Modifier: Member_Simenon
    // ModifiedDateTime: 2016-07-25 오후 4:54:33
    class Table191Table : public CremaTable<Table191Row>
    {
    public: 
        Table191Table();
        Table191Table(CremaReader::itable& table);
    public: 
        virtual ~Table191Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table191Row* Find(bool emergence, Type_rennet christened) const;
    };
    class Table_lunchtimeRow : public CremaRow
    {
    public: 
        /// <summary>
        /// aperitif sallow Jerrylee Prado Betti Brandeis Joycelin neighborer
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:05:07
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:05:07
        int Chang;
        /// <summary>
        /// porcupine Sergei Caro smugger flatterer haggler levee uncreate Bridger Wier freedman scandalize tawny cadger trinitrotoluene recrudescent
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:05:07
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:05:07
        time_t scrapheap;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:05:07
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:05:07
        char breaststroke;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 11:49:48
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 11:49:48
        unsigned int allotting;
        /// <summary>
        /// Sully televangelism heal Hugo Eldon Barrera Sindhi Carlton
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 11:49:48
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 11:49:48
        std::string cordiality;
        const class Table_lunchtimeTable* Table;
    public: 
        Table_lunchtimeRow(CremaReader::irow& row, Table_lunchtimeTable* table);
    };
    // Modifier: Member_constipate
    // ModifiedDateTime: 2016-07-25 오전 11:49:48
    class Table_lunchtimeTable : public CremaTable<Table_lunchtimeRow>
    {
    public: 
        Table_lunchtimeTable();
        Table_lunchtimeTable(CremaReader::itable& table);
    public: 
        virtual ~Table_lunchtimeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_lunchtimeRow* Find(int Chang, char breaststroke) const;
    };
    class Table165Row : public CremaRow
    {
    public: 
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 1:38:16
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 1:38:16
        bool impersonality;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 1:38:16
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 1:38:16
        std::string intercession;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 1:38:16
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 1:38:16
        Type_Page meiosis;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 1:38:16
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 1:38:16
        int nut;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 1:38:16
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 1:38:16
        short psychedelic;
        const class Table165Table* Table;
    public: 
        Table165Row(CremaReader::irow& row, Table165Table* table);
    };
    // Creator: Member_potage
    // CreatedDateTime: 2016-07-25 오후 1:38:16
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오후 1:38:16
    class Table165Table : public CremaTable<Table165Row>
    {
    public: 
        Table165Table();
        Table165Table(CremaReader::itable& table);
    public: 
        virtual ~Table165Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table165Row* Find(bool impersonality) const;
    };
    class Table_dreamlessChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        const class Table_dreamlessChild1Table* Table;
        const class Table_dreamlessRow* Parent;
    public: 
        Table_dreamlessChild1Row(CremaReader::irow& row, Table_dreamlessChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:55
    class Table_dreamlessChild1Table : public CremaTable<Table_dreamlessChild1Row>
    {
    public: 
        Table_dreamlessChild1Table();
        Table_dreamlessChild1Table(CremaReader::itable& table);
        Table_dreamlessChild1Table(std::vector<class Table_dreamlessChild1Row*> rows);
    public: 
        virtual ~Table_dreamlessChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_dreamlessChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_dreamlessChild_newsprintRow : public CremaRow
    {
    public: 
        /// <summary>
        /// allocative lobotomize Orwell horsedom Usenet campesinos Eolanda provincial Giralda dwarfish interaction psychopathology posterior obtuse balladeer
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        int outgrip;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        unsigned char condominium;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t guiltlessness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool splash;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool entrapping;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t Hamnet;
        const class Table_dreamlessChild_newsprintTable* Table;
        const Table_dreamlessRow* Parent;
    public: 
        Table_dreamlessChild_newsprintRow(CremaReader::irow& row, Table_dreamlessChild_newsprintTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오전 9:21:09
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:55
    class Table_dreamlessChild_newsprintTable : public CremaTable<Table_dreamlessChild_newsprintRow>
    {
    public: 
        Table_dreamlessChild_newsprintTable();
        Table_dreamlessChild_newsprintTable(CremaReader::itable& table);
        Table_dreamlessChild_newsprintTable(std::vector<class Table_dreamlessChild_newsprintRow*> rows);
    public: 
        virtual ~Table_dreamlessChild_newsprintTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_dreamlessChild_newsprintRow* Find(int outgrip) const;
    };
    class Table_dreamlessChild_nevusRow : public CremaRow
    {
    public: 
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        unsigned char repetition;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        std::string phonetician;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        std::string Nanni;
        /// <summary>
        /// Bernardino Armour Aventine drainboard Hedy steadiness Ionian circumnavigation pauperism palatine negligible souse urinary
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        bool monographs;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 9:26:33
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        long long humus;
        const class Table_dreamlessChild_nevusTable* Table;
        const Table_dreamlessRow* Parent;
    public: 
        Table_dreamlessChild_nevusRow(CremaReader::irow& row, Table_dreamlessChild_nevusTable* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오전 9:25:31
    // Modifier: Member_Cristy
    // ModifiedDateTime: 2016-07-25 오전 9:26:33
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:55
    class Table_dreamlessChild_nevusTable : public CremaTable<Table_dreamlessChild_nevusRow>
    {
    public: 
        Table_dreamlessChild_nevusTable();
        Table_dreamlessChild_nevusTable(CremaReader::itable& table);
        Table_dreamlessChild_nevusTable(std::vector<class Table_dreamlessChild_nevusRow*> rows);
    public: 
        virtual ~Table_dreamlessChild_nevusTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_dreamlessChild_nevusRow* Find(unsigned char repetition) const;
    };
    class Table_dreamlessChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// massive tapping symbiotic hammock prohibitionist flippable subsidizer steamboat diabolism ambit
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        long long vaginae;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        double obvious;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        unsigned int sachet;
        /// <summary>
        /// Martian fatigue conceivable clammily caftan chalet flashy fantail gemology quadrennium Gerda bewilder Bamby feasibility tanbark
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        Type11 underpayment;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        char axle;
        const class Table_dreamlessChild3Table* Table;
        const Table_dreamlessRow* Parent;
    public: 
        Table_dreamlessChild3Row(CremaReader::irow& row, Table_dreamlessChild3Table* table);
    };
    // Creator: Member_Clary
    // CreatedDateTime: 2016-07-25 오전 10:48:30
    // Modifier: Member_Clary
    // ModifiedDateTime: 2016-07-25 오전 10:48:30
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:55
    class Table_dreamlessChild3Table : public CremaTable<Table_dreamlessChild3Row>
    {
    public: 
        Table_dreamlessChild3Table();
        Table_dreamlessChild3Table(CremaReader::itable& table);
        Table_dreamlessChild3Table(std::vector<class Table_dreamlessChild3Row*> rows);
    public: 
        virtual ~Table_dreamlessChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_dreamlessChild3Row* Find(long long vaginae) const;
    };
    class Table_dreamlessChild2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// gadder Bruno foolishness signore puddle Alhambra Siva Josey rowdy coconut buskin conciliar Jacquette defoliant dowse urge charbroil
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        float Enos;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        double pervasive;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        bool lubricator;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        std::string hallmark;
        const class Table_dreamlessChild2Table* Table;
        const Table_dreamlessRow* Parent;
    public: 
        Table_dreamlessChild2Row(CremaReader::irow& row, Table_dreamlessChild2Table* table);
    };
    // Creator: Member_pacifist
    // CreatedDateTime: 2016-07-25 오후 2:35:01
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오후 2:35:02
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:55
    class Table_dreamlessChild2Table : public CremaTable<Table_dreamlessChild2Row>
    {
    public: 
        Table_dreamlessChild2Table();
        Table_dreamlessChild2Table(CremaReader::itable& table);
        Table_dreamlessChild2Table(std::vector<class Table_dreamlessChild2Row*> rows);
    public: 
        virtual ~Table_dreamlessChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_dreamlessChild2Row* Find(float Enos, const std::string& hallmark) const;
    };
    class Table_dreamlessRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        const class Table_dreamlessTable* Table;
        const Table_dreamlessChild1Table* Child1;
        const Table_dreamlessChild_newsprintTable* Child_newsprint;
        const Table_dreamlessChild_nevusTable* Child_nevus;
        const Table_dreamlessChild3Table* Child3;
        const Table_dreamlessChild2Table* Child2;
    private: 
        static Table_dreamlessChild1Table Child1Empty;
        static Table_dreamlessChild_newsprintTable Child_newsprintEmpty;
        static Table_dreamlessChild_nevusTable Child_nevusEmpty;
        static Table_dreamlessChild3Table Child3Empty;
        static Table_dreamlessChild2Table Child2Empty;
    public: 
        Table_dreamlessRow(CremaReader::irow& row, Table_dreamlessTable* table);
    friend static void Table_dreamlessSetChild1(Table_dreamlessRow* target, const std::vector<Table_dreamlessChild1Row*>& childs);
        static void Table_dreamlessSetChild_newsprint(Table_dreamlessRow* target, const std::vector<Table_dreamlessChild_newsprintRow*>& childs);
        static void Table_dreamlessSetChild_nevus(Table_dreamlessRow* target, const std::vector<Table_dreamlessChild_nevusRow*>& childs);
        static void Table_dreamlessSetChild3(Table_dreamlessRow* target, const std::vector<Table_dreamlessChild3Row*>& childs);
        static void Table_dreamlessSetChild2(Table_dreamlessRow* target, const std::vector<Table_dreamlessChild2Row*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:03
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:55
    class Table_dreamlessTable : public CremaTable<Table_dreamlessRow>
    {
    public: 
        const Table_dreamlessChild1Table* Child1;
        const Table_dreamlessChild_newsprintTable* Child_newsprint;
        const Table_dreamlessChild_nevusTable* Child_nevus;
        const Table_dreamlessChild3Table* Child3;
        const Table_dreamlessChild2Table* Child2;
    public: 
        Table_dreamlessTable();
        Table_dreamlessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_dreamlessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_dreamlessRow* Find(double eviction) const;
    };
    class Table81Row : public CremaRow
    {
    public: 
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        Type39 drowse;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        unsigned char Galaxy;
        /// <summary>
        /// bimodal Vancouver fascist Graves irreversibly wrought scraggly supernatant titer prohibit conger unassuming Christa lightweight tarmac garlic Karaganda
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        unsigned char propelled;
        /// <summary>
        /// Guillaume overspecialize bestrew attention yellowy spicy sexology GPA Alvy Derwin principality fallible Nickola Milo fiche sadness stadium Kassey
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        time_t colic;
        /// <summary>
        /// memory bi specifically
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        Type_nephew excavator;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        unsigned short Malthusian;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:59:11
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:59:11
        Type21 yapped;
        const class Table81Table* Table;
    public: 
        Table81Row(CremaReader::irow& row, Table81Table* table);
    };
    // Creator: Member_antique
    // CreatedDateTime: 2016-07-25 오전 10:59:11
    // Modifier: Member_antique
    // ModifiedDateTime: 2016-07-25 오전 10:59:11
    // ContentsModifier: Admin_cofferdam
    // ContentsModifiedDateTime: 2016-07-25 오후 8:44:36
    class Table81Table : public CremaTable<Table81Row>
    {
    public: 
        Table81Table();
        Table81Table(CremaReader::itable& table);
    public: 
        virtual ~Table81Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table81Row* Find(Type39 drowse, unsigned char propelled) const;
    };
    class Table_chicaneRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Budd Vicente GHQ amethystine confederate moviegoer jitney abjure preisolated Kaunas concave
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:32:37
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        time_t brushfire;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:32:37
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:32:37
        unsigned long long corpulence;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 11:33:28
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        unsigned int dammed;
        /// <summary>
        /// Golden imaginary birdhouse lotus Edd Felike Rhiannon Ratfor
        /// </summary>
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 11:33:28
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        unsigned short Golgotha;
        /// <summary>
        /// Beerbohm rapist Phillipe Kamchatka underclothes cuprous constitutional Rozina logbook modulus Airedale sabra Breanne Josee Nobie dominate onward
        /// </summary>
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 11:33:28
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        char planarity;
        const class Table_chicaneTable* Table;
    public: 
        Table_chicaneRow(CremaReader::irow& row, Table_chicaneTable* table);
    };
    // Modifier: Member_Maye
    // ModifiedDateTime: 2016-07-25 오전 11:33:28
    // ContentsModifier: Admin_truck
    // ContentsModifiedDateTime: 2016-07-25 오후 6:43:32
    class Table_chicaneTable : public CremaTable<Table_chicaneRow>
    {
    public: 
        Table_chicaneTable();
        Table_chicaneTable(CremaReader::itable& table);
    public: 
        virtual ~Table_chicaneTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_chicaneRow* Find(time_t brushfire) const;
    };
    class Table90Row : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:12:19
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:12:19
        time_t Presbyterian;
        const class Table90Table* Table;
    public: 
        Table90Row(CremaReader::irow& row, Table90Table* table);
    };
    // Creator: Admin_serviceableness
    // CreatedDateTime: 2016-07-25 오전 11:12:19
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오전 11:12:19
    // ContentsModifier: Admin_therefore
    // ContentsModifiedDateTime: 2016-07-25 오후 9:34:25
    class Table90Table : public CremaTable<Table90Row>
    {
    public: 
        Table90Table();
        Table90Table(CremaReader::itable& table);
    public: 
        virtual ~Table90Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table90Row* Find(time_t Presbyterian) const;
    };
    class Table203Row : public CremaRow
    {
    public: 
        /// <summary>
        /// whose prefatory daub officially CFO Cordilleras Budweiser Oldenburg hectometer assessed Theodosia handwork decaf statecraft
        /// </summary>
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:09:57
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:09:57
        std::string clamminess;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:09:57
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:09:57
        unsigned short epigrapher;
        /// <summary>
        /// ufologist ironwood cardioid grader Bernadene Tori thinnest peevish pulpy Gratia tau firmest inamorata derelict bathetic Leeward prognosis
        /// </summary>
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:09:57
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:09:57
        bool Sebastian;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:09:57
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:09:57
        time_t branned;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:09:57
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:09:57
        int necessity;
        const class Table203Table* Table;
    public: 
        Table203Row(CremaReader::irow& row, Table203Table* table);
    };
    // Creator: Admin_enshroud
    // CreatedDateTime: 2016-07-25 오후 6:09:57
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오후 6:09:57
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오후 9:13:23
    class Table203Table : public CremaTable<Table203Row>
    {
    public: 
        Table203Table();
        Table203Table(CremaReader::itable& table);
    public: 
        virtual ~Table203Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table203Row* Find(const std::string& clamminess, time_t branned) const;
    };
    class Table_attachmentRow : public CremaRow
    {
    public: 
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:23:26
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:23:26
        short payed;
        /// <summary>
        /// limitless testatrices Kristian malevolence Loella Carolynn
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:23:26
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:23:26
        unsigned int Neville;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:34:08
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:34:08
        long long loom;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:34:08
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:34:08
        std::string laxativeness;
        const class Table_attachmentTable* Table;
    public: 
        Table_attachmentRow(CremaReader::irow& row, Table_attachmentTable* table);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:34:08
    // ContentsModifier: Admin_probationary
    // ContentsModifiedDateTime: 2016-07-25 오후 6:17:27
    class Table_attachmentTable : public CremaTable<Table_attachmentRow>
    {
    public: 
        Table_attachmentTable();
        Table_attachmentTable(CremaReader::itable& table);
    public: 
        virtual ~Table_attachmentTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_attachmentRow* Find(short payed) const;
    };
    class Table195Row : public CremaRow
    {
    public: 
        /// <summary>
        /// riotousness subclassifications
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 5:12:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 5:12:14
        unsigned char mediation;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 5:12:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 5:12:14
        Type23 neophyte;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 5:12:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 5:12:14
        bool office;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 5:12:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 5:12:14
        unsigned int balaclava;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오후 5:12:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오후 5:12:14
        unsigned long long Margarete;
        const class Table195Table* Table;
    public: 
        Table195Row(CremaReader::irow& row, Table195Table* table);
    };
    // Creator: Member_potage
    // CreatedDateTime: 2016-07-25 오후 5:12:14
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오후 5:12:14
    // ContentsModifier: Admin_truck
    // ContentsModifiedDateTime: 2016-07-25 오후 8:22:23
    class Table195Table : public CremaTable<Table195Row>
    {
    public: 
        Table195Table();
        Table195Table(CremaReader::itable& table);
    public: 
        virtual ~Table195Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table195Row* Find(unsigned char mediation) const;
    };
    class Table_PamirsRow : public CremaRow
    {
    public: 
        /// <summary>
        /// leveled soon bravo entered fatefulness mandolin appealer malicious particulate Cleon cit needlewomen proprioception folkway Bandung tool trimness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type8 misstep;
        /// <summary>
        /// betroth weekly anhydrous toilsome teletext crackup ledger fructose Elizabeth chivying regardless vestibule letdown Garvin
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        std::string Alistair;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type15 birth;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Abdel;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        unsigned long long cousinly;
        /// <summary>
        /// mayer tween Gaulish Marisa Delawarean sacrificer Hieronymus
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Paley;
        const class Table_PamirsTable* Table;
    public: 
        Table_PamirsRow(CremaReader::irow& row, Table_PamirsTable* table);
    };
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오전 9:39:09
    class Table_PamirsTable : public CremaTable<Table_PamirsRow>
    {
    public: 
        Table_PamirsTable();
        Table_PamirsTable(CremaReader::itable& table);
    public: 
        virtual ~Table_PamirsTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_PamirsRow* Find(Type8 misstep) const;
    };
    class Table_kinderRow : public CremaRow
    {
    public: 
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 12:43:22
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 12:43:22
        std::string typewriter;
        /// <summary>
        /// squabber Florenza Donnelly hardtop puritan Wabash rustication obnoxiousness denouncer
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 12:43:22
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 12:43:22
        int instituter;
        /// <summary>
        /// alignment froufrou pithily homebuilder Mycenaean curlew middlebrow Moloch forgivable
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 12:43:22
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 12:43:22
        std::string outhit;
        const class Table_kinderTable* Table;
    public: 
        Table_kinderRow(CremaReader::irow& row, Table_kinderTable* table);
    };
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오후 12:43:22
    // ContentsModifier: Admin_therefore
    // ContentsModifiedDateTime: 2016-07-25 오후 9:03:36
    class Table_kinderTable : public CremaTable<Table_kinderRow>
    {
    public: 
        Table_kinderTable();
        Table_kinderTable(CremaReader::itable& table);
    public: 
        virtual ~Table_kinderTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_kinderRow* Find(const std::string& typewriter) const;
    };
    class Table_deathlessRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table_deathlessTable* Table;
    public: 
        Table_deathlessRow(CremaReader::irow& row, Table_deathlessTable* table);
    };
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 6:03:48
    class Table_deathlessTable : public CremaTable<Table_deathlessRow>
    {
    public: 
        Table_deathlessTable();
        Table_deathlessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_deathlessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_deathlessRow* Find(Type6 lumberyard, char uncap) const;
    };
    class Table117Row : public CremaRow
    {
    public: 
        /// <summary>
        /// eating Shulman rose cloy exhaustion Karamazov
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:46:54
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:46:54
        std::string paranormal;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:46:54
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:46:54
        time_t kipping;
        /// <summary>
        /// tension Bordon riparian Vanna eggbeater sipper Majesty mastectomy granddaughter bilinear battery garrote crispness Blenheim sipper externalization
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:46:54
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:46:54
        Type21 receptionist;
        const class Table117Table* Table;
    public: 
        Table117Row(CremaReader::irow& row, Table117Table* table);
    };
    // Creator: Admin_gifted
    // CreatedDateTime: 2016-07-25 오전 11:46:54
    // Modifier: Admin_gifted
    // ModifiedDateTime: 2016-07-25 오전 11:46:54
    // ContentsModifier: Admin_Hooke
    // ContentsModifiedDateTime: 2016-07-25 오후 9:09:45
    class Table117Table : public CremaTable<Table117Row>
    {
    public: 
        Table117Table();
        Table117Table(CremaReader::itable& table);
    public: 
        virtual ~Table117Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table117Row* Find(const std::string& paranormal) const;
    };
    class Table_selectionRow : public CremaRow
    {
    public: 
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        float seemliness;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        short sandpit;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned char carbonization;
        /// <summary>
        /// Lindi panel piousness marshallings certainty homier milquetoast Banneker Vermeer runaround mot Bataan corralled organizes ephemeris Giustina
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        std::string whacker;
        /// <summary>
        /// prerecord knapsack Fischer Cicely inveigle Clarence dentifrice pass Jamar Aristides
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned long long diluteness;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned int happing;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        long long considerable;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        double mis;
        const class Table_selectionTable* Table;
    public: 
        Table_selectionRow(CremaReader::irow& row, Table_selectionTable* table);
    };
    // Modifier: Member_Cristy
    // ModifiedDateTime: 2016-07-25 오전 11:30:08
    // ContentsModifier: Admin_inducement
    // ContentsModifiedDateTime: 2016-07-25 오후 10:59:46
    class Table_selectionTable : public CremaTable<Table_selectionRow>
    {
    public: 
        Table_selectionTable();
        Table_selectionTable(CremaReader::itable& table);
    public: 
        virtual ~Table_selectionTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_selectionRow* Find(float seemliness) const;
    };
    class Table1Child1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 10:54:55
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 10:54:55
        Type_livingness canoeist;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 10:54:55
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 10:54:55
        int blunder;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 10:54:55
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 10:54:55
        time_t fastidious;
        const class Table1Child1Table* Table;
        const class Table1Row* Parent;
    public: 
        Table1Child1Row(CremaReader::irow& row, Table1Child1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: Admin_gifted
    // ModifiedDateTime: 2016-07-25 오전 10:54:55
    // ContentsModifier: Member_kirsch
    // ContentsModifiedDateTime: 2016-07-25 오전 10:54:11
    class Table1Child1Table : public CremaTable<Table1Child1Row>
    {
    public: 
        Table1Child1Table();
        Table1Child1Table(CremaReader::itable& table);
        Table1Child1Table(std::vector<class Table1Child1Row*> rows);
    public: 
        virtual ~Table1Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table1Child1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table1Child2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:37:47
        int outgrip;
        /// <summary>
        /// Tripp calvary amusement antinomian essay innards comforting Creighton sentential whammy reefer lender draftee Syracuse Juneau FIFO Arley
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        bool eruption;
        /// <summary>
        /// reckoning transferee efficient Mersey thunderstorm Karlee
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        Type_Attn busty;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        unsigned long long Glory;
        const class Table1Child2Table* Table;
        const Table1Row* Parent;
    public: 
        Table1Child2Row(CremaReader::irow& row, Table1Child2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오전 9:45:59
    // ContentsModifier: Member_kirsch
    // ContentsModifiedDateTime: 2016-07-25 오전 10:54:11
    class Table1Child2Table : public CremaTable<Table1Child2Row>
    {
    public: 
        Table1Child2Table();
        Table1Child2Table(CremaReader::itable& table);
        Table1Child2Table(std::vector<class Table1Child2Row*> rows);
    public: 
        virtual ~Table1Child2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table1Child2Row* Find(int outgrip) const;
    };
    class Table1Child_debatableRow : public CremaRow
    {
    public: 
        /// <summary>
        /// briny earning Danica Calgary extraction caseharden infirmity Kiele bouncily Devlen outstay
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long dampen;
        /// <summary>
        /// correction tremulous ingot
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long hearing;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned char bedsheets;
        /// <summary>
        /// beefiness indicative symmetrical overcomer sheen railroading scented bars nonperformance Perseid osteopathy Jule fierce phlox Regor metricize Kirghiz Argus orgasm
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        int Terri;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        bool Zagreb;
        /// <summary>
        /// Kelci freebie islander candidness glyceride interrogate Mariann Hertzsprung Wisconsin Harriot deja cryostat Photostat armlet adapted cavity
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        float reading;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        double leopardess;
        const class Table1Child_debatableTable* Table;
        const Table1Row* Parent;
    public: 
        Table1Child_debatableRow(CremaReader::irow& row, Table1Child_debatableTable* table);
    };
    // Creator: Member_creel
    // CreatedDateTime: 2016-07-25 오전 9:40:44
    // Modifier: Member_creel
    // ModifiedDateTime: 2016-07-25 오전 9:40:45
    // ContentsModifier: Member_kirsch
    // ContentsModifiedDateTime: 2016-07-25 오전 10:54:11
    class Table1Child_debatableTable : public CremaTable<Table1Child_debatableRow>
    {
    public: 
        Table1Child_debatableTable();
        Table1Child_debatableTable(CremaReader::itable& table);
        Table1Child_debatableTable(std::vector<class Table1Child_debatableRow*> rows);
    public: 
        virtual ~Table1Child_debatableTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table1Child_debatableRow* Find(unsigned long long dampen, bool Zagreb) const;
    };
    class Table1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        double eviction;
        /// <summary>
        /// palliate Rudd mesa opportunistically Jarvis Drucy Tawnya despondency lazily Bradney Bucky hazel lackey Nicolai humanitarianism Alden
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:04:15
        unsigned short Stefan;
        /// <summary>
        /// leitmotif Daile
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:04:15
        Type_Madison Cesarean;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:04:15
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:04:15
        bool cytoplasm;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:04:15
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:04:15
        Type35 Haddad;
        const class Table1Table* Table;
        const Table1Child1Table* Child1;
        const Table1Child2Table* Child2;
        const Table1Child_debatableTable* Child_debatable;
    private: 
        static Table1Child1Table Child1Empty;
        static Table1Child2Table Child2Empty;
        static Table1Child_debatableTable Child_debatableEmpty;
    public: 
        Table1Row(CremaReader::irow& row, Table1Table* table);
    friend static void Table1SetChild1(Table1Row* target, const std::vector<Table1Child1Row*>& childs);
        static void Table1SetChild2(Table1Row* target, const std::vector<Table1Child2Row*>& childs);
        static void Table1SetChild_debatable(Table1Row* target, const std::vector<Table1Child_debatableRow*>& childs);
    };
    // Modifier: Admin_titted
    // ModifiedDateTime: 2016-07-25 오전 11:04:15
    // ContentsModifier: Member_kirsch
    // ContentsModifiedDateTime: 2016-07-25 오전 10:54:11
    class Table1Table : public CremaTable<Table1Row>
    {
    public: 
        const Table1Child1Table* Child1;
        const Table1Child2Table* Child2;
        const Table1Child_debatableTable* Child_debatable;
    public: 
        Table1Table();
        Table1Table(CremaReader::itable& table);
    public: 
        virtual ~Table1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table1Row* Find(double eviction) const;
    };
    class Table68Row : public CremaRow
    {
    public: 
        /// <summary>
        /// newscasting overweight beneficialness resinous epileptic shovelful
        /// </summary>
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오전 10:35:29
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오전 10:35:29
        unsigned int tempura;
        const class Table68Table* Table;
    public: 
        Table68Row(CremaReader::irow& row, Table68Table* table);
    };
    // Creator: Admin_enshroud
    // CreatedDateTime: 2016-07-25 오전 10:35:29
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오전 10:35:29
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 8:07:32
    class Table68Table : public CremaTable<Table68Row>
    {
    public: 
        Table68Table();
        Table68Table(CremaReader::itable& table);
    public: 
        virtual ~Table68Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table68Row* Find(unsigned int tempura) const;
    };
    class Table_emotionlessRow : public CremaRow
    {
    public: 
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오후 1:24:58
        Type_Gretta Nilsson;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        char serendipitous;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        int Pawtucket;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오후 1:24:58
        std::string krone;
        const class Table_emotionlessTable* Table;
    public: 
        Table_emotionlessRow(CremaReader::irow& row, Table_emotionlessTable* table);
    };
    // Modifier: Admin_perch
    // ModifiedDateTime: 2016-07-25 오전 10:32:53
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 8:21:15
    class Table_emotionlessTable : public CremaTable<Table_emotionlessRow>
    {
    public: 
        Table_emotionlessTable();
        Table_emotionlessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_emotionlessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_emotionlessRow* Find(Type_Gretta Nilsson, const std::string& krone) const;
    };
    class Table_halterRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 2:07:00
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int rattling;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int deleterious;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 2:07:00
        long long Dalmatian;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 2:07:00
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 2:07:00
        time_t daysack;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 2:07:00
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 2:07:00
        char sabbath;
        const class Table_halterTable* Table;
    public: 
        Table_halterRow(CremaReader::irow& row, Table_halterTable* table);
    };
    // Modifier: Admin_gifted
    // ModifiedDateTime: 2016-07-25 오후 2:07:00
    // ContentsModifier: Admin_Augustus
    // ContentsModifiedDateTime: 2016-07-25 오후 8:23:53
    class Table_halterTable : public CremaTable<Table_halterRow>
    {
    public: 
        Table_halterTable();
        Table_halterTable(CremaReader::itable& table);
    public: 
        virtual ~Table_halterTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_halterRow* Find(unsigned int snapback) const;
    };
    class Table_studioRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Sapphire dosimeter
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:34:07
        double Midwest;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:34:07
        double locale;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        Type_Madison aim;
        /// <summary>
        /// moths oscillator lilac procaine crackdown Andriana trimmed hullabaloo
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:34:07
        std::string outfielder;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:34:07
        float suitableness;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        int British;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char broadcast;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float injurer;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:34:07
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:34:07
        std::string revelry;
        /// <summary>
        /// Herminia brawniness whitter Gordie coachmen narrate jitterbugging conscientiousness inhabited Marine beside firestorm preposterous income promulgation
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:34:07
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:34:07
        float Congo;
        // Creator: Admin_eyesore
        // CreatedDateTime: 2016-07-25 오후 12:20:20
        // Modifier: Admin_eyesore
        // ModifiedDateTime: 2016-07-25 오후 12:20:20
        std::string thrall;
        const class Table_studioTable* Table;
    public: 
        Table_studioRow(CremaReader::irow& row, Table_studioTable* table);
    };
    // Modifier: Admin_eyesore
    // ModifiedDateTime: 2016-07-25 오후 12:20:20
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 3:36:20
    class Table_studioTable : public CremaTable<Table_studioRow>
    {
    public: 
        Table_studioTable();
        Table_studioTable(CremaReader::itable& table);
    public: 
        virtual ~Table_studioTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_studioRow* Find(double Midwest, const std::string& outfielder) const;
    };
    class Table115Row : public CremaRow
    {
    public: 
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 11:41:51
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 11:41:51
        unsigned int Pawtucket;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 11:41:51
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 11:41:51
        int leatherneck;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 11:41:51
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 11:41:51
        Type_consortia polymorphic;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 11:41:51
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 11:41:51
        time_t rollicking;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 11:41:51
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 11:41:51
        long long remodel;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 11:41:51
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 11:41:51
        long long minster;
        const class Table115Table* Table;
    public: 
        Table115Row(CremaReader::irow& row, Table115Table* table);
    };
    // Creator: Member_schoolchild
    // CreatedDateTime: 2016-07-25 오전 11:41:51
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 11:41:51
    // ContentsModifier: Member_king
    // ContentsModifiedDateTime: 2016-07-25 오후 6:27:13
    class Table115Table : public CremaTable<Table115Row>
    {
    public: 
        Table115Table();
        Table115Table(CremaReader::itable& table);
    public: 
        virtual ~Table115Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table115Row* Find(unsigned int Pawtucket) const;
    };
    class Table182Child1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// giddap riverboat Carletonian visualizes mdse parrot Frigidaire shutting Dorree implant lift machinelike lying YMCA Bert Cong
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        long long divalent;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        double thoughtlessness;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        int dextrose;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        bool belladonna;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        Type80 sadden;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        int clef;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오후 6:29:43
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오후 6:29:43
        Type_Gretta footlights;
        const class Table182Child1Table* Table;
        const class Table182Row* Parent;
    public: 
        Table182Child1Row(CremaReader::irow& row, Table182Child1Table* table);
    };
    // Creator: Member_idle
    // CreatedDateTime: 2016-07-25 오후 6:29:43
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오후 6:29:43
    class Table182Child1Table : public CremaTable<Table182Child1Row>
    {
    public: 
        Table182Child1Table();
        Table182Child1Table(CremaReader::itable& table);
        Table182Child1Table(std::vector<class Table182Child1Row*> rows);
    public: 
        virtual ~Table182Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table182Child1Row* Find(long long divalent) const;
    };
    class Table182Row : public CremaRow
    {
    public: 
        /// <summary>
        /// attend forcer
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 2:55:15
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 2:55:15
        unsigned int Borden;
        /// <summary>
        /// culpability Adeline croupy cattery inhibitory reasonably photolysis Madalena obese leaderless accounting peek miry
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 2:55:15
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 2:55:15
        short Mikkel;
        /// <summary>
        /// vaporing bank Loria merciless freshmen expiable
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 2:55:15
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 2:55:15
        unsigned int underadjusting;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 2:55:15
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 2:55:15
        unsigned char transcendence;
        const class Table182Table* Table;
        const Table182Child1Table* Child1;
    private: 
        static Table182Child1Table Child1Empty;
    public: 
        Table182Row(CremaReader::irow& row, Table182Table* table);
    friend static void Table182SetChild1(Table182Row* target, const std::vector<Table182Child1Row*>& childs);
    };
    // Creator: Member_Tanhya
    // CreatedDateTime: 2016-07-25 오후 2:55:15
    // Modifier: Member_Tanhya
    // ModifiedDateTime: 2016-07-25 오후 2:55:15
    class Table182Table : public CremaTable<Table182Row>
    {
    public: 
        const Table182Child1Table* Child1;
    public: 
        Table182Table();
        Table182Table(CremaReader::itable& table);
    public: 
        virtual ~Table182Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table182Row* Find(unsigned int Borden) const;
    };
    class Table_sunRow : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        float unnavigable;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned long long Jarad;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        long long separates;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        time_t assiduity;
        /// <summary>
        /// debilitate vegetation abundant convene philologist outtake unlimber tabula filmy upgrade Gerhard Ronni knowable Mariya
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type8 yardmaster;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned char Sir;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type_Attn thermostat;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        std::string Gregoor;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned short planetarium;
        const class Table_sunTable* Table;
    public: 
        Table_sunRow(CremaReader::irow& row, Table_sunTable* table);
    };
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오전 9:24:20
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오후 11:04:09
    class Table_sunTable : public CremaTable<Table_sunRow>
    {
    public: 
        Table_sunTable();
        Table_sunTable(CremaReader::itable& table);
    public: 
        virtual ~Table_sunTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_sunRow* Find(float unnavigable, time_t assiduity) const;
    };
    class Table_licenseRow : public CremaRow
    {
    public: 
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        time_t ultimateness;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        double erosive;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        int tackler;
        /// <summary>
        /// desirousness terrorize nonscheduled mammalian Julius sizes map Songhai vulgarity archaically implausible charisma basswood Napoleon venison Tatiana
        /// </summary>
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        unsigned int Glass;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        float amylase;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        std::string impose;
        const class Table_licenseTable* Table;
    public: 
        Table_licenseRow(CremaReader::irow& row, Table_licenseTable* table);
    };
    // Modifier: Member_nubbin
    // ModifiedDateTime: 2016-07-25 오후 5:52:44
    class Table_licenseTable : public CremaTable<Table_licenseRow>
    {
    public: 
        Table_licenseTable();
        Table_licenseTable(CremaReader::itable& table);
    public: 
        virtual ~Table_licenseTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_licenseRow* Find(time_t ultimateness, unsigned int Glass, const std::string& impose) const;
    };
    class Table129Row : public CremaRow
    {
    public: 
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:02:00
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:02:00
        std::string periodical;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:02:00
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:02:00
        Type27 Lorri;
        /// <summary>
        /// everlasting bicarb arrestor mewl Tonya Ti frigged houselights addictive abutted Atria vastness ultracentrifuge conceivable allowable manage ramrodded nightstand
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:02:00
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:02:00
        unsigned long long construe;
        const class Table129Table* Table;
    public: 
        Table129Row(CremaReader::irow& row, Table129Table* table);
    };
    // Creator: Member_neurosis
    // CreatedDateTime: 2016-07-25 오후 12:02:00
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:02:00
    // ContentsModifier: Member_throbbing
    // ContentsModifiedDateTime: 2016-07-25 오후 5:58:18
    class Table129Table : public CremaTable<Table129Row>
    {
    public: 
        Table129Table();
        Table129Table(CremaReader::itable& table);
    public: 
        virtual ~Table129Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table129Row* Find(const std::string& periodical) const;
    };
    class Table_navigableChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned short woodlouse;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Letitia;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int Livonia;
        /// <summary>
        /// Lowery turpentine
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Praia;
        /// <summary>
        /// housekeep nontarnishable
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string Christmas;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int earner;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int forwent;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned int dependability;
        const class Table_navigableChild1Table* Table;
        const class Table_navigableRow* Parent;
    public: 
        Table_navigableChild1Row(CremaReader::irow& row, Table_navigableChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    class Table_navigableChild1Table : public CremaTable<Table_navigableChild1Row>
    {
    public: 
        Table_navigableChild1Table();
        Table_navigableChild1Table(CremaReader::itable& table);
        Table_navigableChild1Table(std::vector<class Table_navigableChild1Row*> rows);
    public: 
        virtual ~Table_navigableChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_navigableChild1Row* Find(unsigned short woodlouse) const;
    };
    class Table_navigableChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        char Lynn;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short clause;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        short scrupulosity;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short abbrev;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned char microdot;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        Type_Multan Estes;
        const class Table_navigableChild2Table* Table;
        const Table_navigableRow* Parent;
    public: 
        Table_navigableChild2Row(CremaReader::irow& row, Table_navigableChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:13
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:13
    class Table_navigableChild2Table : public CremaTable<Table_navigableChild2Row>
    {
    public: 
        Table_navigableChild2Table();
        Table_navigableChild2Table(CremaReader::itable& table);
        Table_navigableChild2Table(std::vector<class Table_navigableChild2Row*> rows);
    public: 
        virtual ~Table_navigableChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_navigableChild2Row* Find(char Lynn, unsigned short abbrev) const;
    };
    class Table_navigableChild_tapiocaRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned char illegality;
        /// <summary>
        /// cavity Nauru workableness overeagerness King inlander Wroclaw Rachel hark digitalization Geoffry algebra approacher deceitful pigswill autosuggestibility embouchure
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int metricize;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        std::string bong;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int confound;
        /// <summary>
        /// muffle Sprint lobby footstool Harriet joust diligentness savior Vandyke burliness Gunther tripoli grunter incorruptibly Maker Araldo ramrodding Falwell muteness
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        bool coprophagous;
        /// <summary>
        /// bevy unwaivering ichthyology cradling
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int rosin;
        const class Table_navigableChild_tapiocaTable* Table;
        const Table_navigableRow* Parent;
    public: 
        Table_navigableChild_tapiocaRow(CremaReader::irow& row, Table_navigableChild_tapiocaTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:27
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:27
    class Table_navigableChild_tapiocaTable : public CremaTable<Table_navigableChild_tapiocaRow>
    {
    public: 
        Table_navigableChild_tapiocaTable();
        Table_navigableChild_tapiocaTable(CremaReader::itable& table);
        Table_navigableChild_tapiocaTable(std::vector<class Table_navigableChild_tapiocaRow*> rows);
    public: 
        virtual ~Table_navigableChild_tapiocaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_navigableChild_tapiocaRow* Find(unsigned char illegality, unsigned int metricize, unsigned int confound, unsigned int rosin) const;
    };
    class Table_navigableRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Multan multiplicative;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Meiji math;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Meiji rickshaw;
        /// <summary>
        /// Orlando obliviousness conventicle Samuelson formalin kitten mouth exploded archeology
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Arlan dimmed;
        /// <summary>
        /// cleanable wishful unforced MB Pelee meatloaves represented
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        double bucker;
        const class Table_navigableTable* Table;
        const Table_navigableChild1Table* Child1;
        const Table_navigableChild2Table* Child2;
        const Table_navigableChild_tapiocaTable* Child_tapioca;
    private: 
        static Table_navigableChild1Table Child1Empty;
        static Table_navigableChild2Table Child2Empty;
        static Table_navigableChild_tapiocaTable Child_tapiocaEmpty;
    public: 
        Table_navigableRow(CremaReader::irow& row, Table_navigableTable* table);
    friend static void Table_navigableSetChild1(Table_navigableRow* target, const std::vector<Table_navigableChild1Row*>& childs);
        static void Table_navigableSetChild2(Table_navigableRow* target, const std::vector<Table_navigableChild2Row*>& childs);
        static void Table_navigableSetChild_tapioca(Table_navigableRow* target, const std::vector<Table_navigableChild_tapiocaRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:05
    class Table_navigableTable : public CremaTable<Table_navigableRow>
    {
    public: 
        const Table_navigableChild1Table* Child1;
        const Table_navigableChild2Table* Child2;
        const Table_navigableChild_tapiocaTable* Child_tapioca;
    public: 
        Table_navigableTable();
        Table_navigableTable(CremaReader::itable& table);
    public: 
        virtual ~Table_navigableTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_navigableRow* Find(Type_Multan multiplicative) const;
    };
    class Table_anchorRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table_anchorTable* Table;
    public: 
        Table_anchorRow(CremaReader::irow& row, Table_anchorTable* table);
    };
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    // ContentsModifier: Member_Simenon
    // ContentsModifiedDateTime: 2016-07-25 오후 10:26:05
    class Table_anchorTable : public CremaTable<Table_anchorRow>
    {
    public: 
        Table_anchorTable();
        Table_anchorTable(CremaReader::itable& table);
    public: 
        virtual ~Table_anchorTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_anchorRow* Find(Type6 lumberyard, char uncap) const;
    };
    class Table_LeontineRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 10:43:21
        double referral;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 10:43:21
        Type3 Tana;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 10:43:21
        Type4 baryon;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        int Shawnee;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:07:02
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        time_t ostensibly;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:07:02
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        std::string Chrissie;
        /// <summary>
        /// jug Ileane Cossack masque ageless hacksaw serendipity farina Ticonderoga Seagram Gambian orbit supremacy whistler nil divinity Kurdish
        /// </summary>
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:07:02
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        std::string needlewoman;
        const class Table_LeontineTable* Table;
    public: 
        Table_LeontineRow(CremaReader::irow& row, Table_LeontineTable* table);
    };
    // Modifier: Admin_whispering
    // ModifiedDateTime: 2016-07-25 오전 11:07:02
    class Table_LeontineTable : public CremaTable<Table_LeontineRow>
    {
    public: 
        Table_LeontineTable();
        Table_LeontineTable(CremaReader::itable& table);
    public: 
        virtual ~Table_LeontineTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_LeontineRow* Find(double referral, Type4 baryon, const std::string& needlewoman) const;
    };
    class Table149Row : public CremaRow
    {
    public: 
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 12:43:22
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 12:43:22
        std::string typewriter;
        /// <summary>
        /// squabber Florenza Donnelly hardtop puritan Wabash rustication obnoxiousness denouncer
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 12:43:22
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 12:43:22
        int instituter;
        /// <summary>
        /// alignment froufrou pithily homebuilder Mycenaean curlew middlebrow Moloch forgivable
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 12:43:22
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 12:43:22
        std::string outhit;
        const class Table149Table* Table;
    public: 
        Table149Row(CremaReader::irow& row, Table149Table* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오후 12:43:22
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오후 12:43:22
    // ContentsModifier: Member_pacifist
    // ContentsModifiedDateTime: 2016-07-25 오후 5:27:11
    class Table149Table : public CremaTable<Table149Row>
    {
    public: 
        Table149Table();
        Table149Table(CremaReader::itable& table);
    public: 
        virtual ~Table149Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table149Row* Find(const std::string& typewriter) const;
    };
    class Table17Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Sapphire dosimeter
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double Tanny;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double locale;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char fagoting;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        Type_Madison aim;
        /// <summary>
        /// moths oscillator lilac procaine crackdown Andriana trimmed hullabaloo
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        std::string brutality;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float scantly;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        int British;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char broadcast;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float injurer;
        const class Table17Table* Table;
    public: 
        Table17Row(CremaReader::irow& row, Table17Table* table);
    };
    // Creator: Admin_wholesomeness
    // CreatedDateTime: 2016-07-25 오전 9:15:25
    // Modifier: Admin_wholesomeness
    // ModifiedDateTime: 2016-07-25 오전 9:15:25
    // ContentsModifier: Admin_injection
    // ContentsModifiedDateTime: 2016-07-25 오후 10:15:48
    class Table17Table : public CremaTable<Table17Row>
    {
    public: 
        Table17Table();
        Table17Table(CremaReader::itable& table);
    public: 
        virtual ~Table17Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table17Row* Find(double Tanny, const std::string& brutality) const;
    };
    class Table_hoodlumChild_smuttyDeletableRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clitoral precedence cockily romantic
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 10:01:46
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 10:01:46
        float stranglehold;
        /// <summary>
        /// Merrill thriver basinful flighty wasting Sana internuclear sanatorium scrollbar zonked enrage Arni configuration Lent annual finality secretiveness AP
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 10:01:46
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 10:01:46
        Type1 affluent;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 10:01:46
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:05:45
        unsigned short photostatic;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 10:01:46
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 10:01:46
        long long toadstool;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 10:01:46
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 10:01:46
        time_t schnauzer;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 10:01:46
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 10:01:46
        bool predation;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:05:45
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:05:45
        Type_rifled Ade;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:05:45
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:05:45
        int gag;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 12:47:30
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 12:47:30
        long long sequoia;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 12:47:30
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 12:47:30
        long long somerset;
        /// <summary>
        /// alderwomen prohibitionist Agosto footling sagaciousness seal bidder beset Winna nib eyeful wrenching Workman lammer humorless staffroom filibuster crayfish referendum
        /// </summary>
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 12:47:30
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 12:47:30
        Type_RhodesDeletable diffusion;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 12:47:30
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 12:47:30
        std::string haggler;
        const class Table_hoodlumChild_smuttyDeletableTable* Table;
        const class Table_hoodlumRow* Parent;
    public: 
        Table_hoodlumChild_smuttyDeletableRow(CremaReader::irow& row, Table_hoodlumChild_smuttyDeletableTable* table);
    };
    // Creator: Admin_miscegenation
    // CreatedDateTime: 2016-07-25 오전 10:01:46
    // Modifier: Member_semiautomatic
    // ModifiedDateTime: 2016-07-25 오후 12:47:30
    // ContentsModifier: Member_lender
    // ContentsModifiedDateTime: 2016-07-25 오후 2:17:03
    class Table_hoodlumChild_smuttyDeletableTable : public CremaTable<Table_hoodlumChild_smuttyDeletableRow>
    {
    public: 
        Table_hoodlumChild_smuttyDeletableTable();
        Table_hoodlumChild_smuttyDeletableTable(CremaReader::itable& table);
        Table_hoodlumChild_smuttyDeletableTable(std::vector<class Table_hoodlumChild_smuttyDeletableRow*> rows);
    public: 
        virtual ~Table_hoodlumChild_smuttyDeletableTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_hoodlumChild_smuttyDeletableRow* Find(float stranglehold) const;
    };
    class Table_hoodlumRow : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        short Portsmouth;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        Type_rennet bout;
        /// <summary>
        /// Ravi Buchanan Dejesus Wilde
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 10:57:01
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 10:57:01
        Type_HeraclitusDeletable aerosol;
        const class Table_hoodlumTable* Table;
        const Table_hoodlumChild_smuttyDeletableTable* Child_smuttyDeletable;
    private: 
        static Table_hoodlumChild_smuttyDeletableTable Child_smuttyDeletableEmpty;
    public: 
        Table_hoodlumRow(CremaReader::irow& row, Table_hoodlumTable* table);
    friend static void Table_hoodlumSetChild_smuttyDeletable(Table_hoodlumRow* target, const std::vector<Table_hoodlumChild_smuttyDeletableRow*>& childs);
    };
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 10:57:01
    // ContentsModifier: Member_lender
    // ContentsModifiedDateTime: 2016-07-25 오후 2:17:03
    class Table_hoodlumTable : public CremaTable<Table_hoodlumRow>
    {
    public: 
        const Table_hoodlumChild_smuttyDeletableTable* Child_smuttyDeletable;
    public: 
        Table_hoodlumTable();
        Table_hoodlumTable(CremaReader::itable& table);
    public: 
        virtual ~Table_hoodlumTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_hoodlumRow* Find(short Portsmouth) const;
    };
    class Table138Row : public CremaRow
    {
    public: 
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        short cartographer;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        char dastardly;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        short rimless;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        Type21 views;
        /// <summary>
        /// stabilize Ptolemaists retro nosecone dilatory
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        unsigned char grubbed;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        unsigned short vapid;
        /// <summary>
        /// servomechanism elicit garlic misjudge seesaw
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        float antigenic;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        char ethnicity;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 12:16:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 12:16:17
        Type_insolent assimilate;
        const class Table138Table* Table;
    public: 
        Table138Row(CremaReader::irow& row, Table138Table* table);
    };
    // Creator: Member_Tanhya
    // CreatedDateTime: 2016-07-25 오후 12:16:17
    // Modifier: Member_Tanhya
    // ModifiedDateTime: 2016-07-25 오후 12:16:17
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 12:17:31
    class Table138Table : public CremaTable<Table138Row>
    {
    public: 
        Table138Table();
        Table138Table(CremaReader::itable& table);
    public: 
        virtual ~Table138Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table138Row* Find(short cartographer, Type21 views, unsigned char grubbed, char ethnicity) const;
    };
    class Table88Row : public CremaRow
    {
    public: 
        /// <summary>
        /// voter execrably Seeley chapel
        /// </summary>
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:09:05
        unsigned short Seabrook;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:09:05
        Type_consortia Garry;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:09:05
        unsigned long long thereof;
        /// <summary>
        /// buzzer logging Pall Menkent darkener drawler China Jung predicate efficient torte quotation provenance personableness shelterer USA
        /// </summary>
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:32:52
        int further;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:32:52
        double issuer;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:09:05
        char breeding;
        /// <summary>
        /// Peck balancedness grudge Codie Copernican underclothes Garnett extravagance Kuwaiti tyrannic sufferer naked turgid Jamison
        /// </summary>
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 11:09:05
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:09:05
        Type12 dander;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:32:52
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:32:52
        Type_canted Masada;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:32:52
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:32:52
        short impressible;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:32:52
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:32:52
        float endurably;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 11:32:52
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 11:32:52
        Type_Jenelle Burty;
        const class Table88Table* Table;
    public: 
        Table88Row(CremaReader::irow& row, Table88Table* table);
    };
    // Creator: Member_Richard
    // CreatedDateTime: 2016-07-25 오전 11:09:05
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오전 11:32:52
    // ContentsModifier: Admin_asterisked
    // ContentsModifiedDateTime: 2016-07-25 오후 10:18:44
    class Table88Table : public CremaTable<Table88Row>
    {
    public: 
        Table88Table();
        Table88Table(CremaReader::itable& table);
    public: 
        virtual ~Table88Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table88Row* Find(unsigned short Seabrook, double issuer) const;
    };
    class Table_BonneeRow : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        short Portsmouth;
        /// <summary>
        /// guilt Filberto
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:51:11
        Type_rennet bout;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:51:11
        long long overexpose;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:51:11
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:51:11
        unsigned short leotard;
        const class Table_BonneeTable* Table;
    public: 
        Table_BonneeRow(CremaReader::irow& row, Table_BonneeTable* table);
    };
    // Modifier: Member_throbbing
    // ModifiedDateTime: 2016-07-25 오후 1:51:11
    // ContentsModifier: Admin_Darill
    // ContentsModifiedDateTime: 2016-07-25 오후 10:59:40
    class Table_BonneeTable : public CremaTable<Table_BonneeRow>
    {
    public: 
        Table_BonneeTable();
        Table_BonneeTable(CremaReader::itable& table);
    public: 
        virtual ~Table_BonneeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_BonneeRow* Find(short Portsmouth) const;
    };
    class Table_JoycelinRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Budd Vicente GHQ amethystine confederate moviegoer jitney abjure preisolated Kaunas concave
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:32:37
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        time_t brushfire;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:32:37
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:32:37
        unsigned long long corpulence;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 11:33:28
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        unsigned int dammed;
        /// <summary>
        /// Golden imaginary birdhouse lotus Edd Felike Rhiannon Ratfor
        /// </summary>
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 11:33:28
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        unsigned short Golgotha;
        /// <summary>
        /// Beerbohm rapist Phillipe Kamchatka underclothes cuprous constitutional Rozina logbook modulus Airedale sabra Breanne Josee Nobie dominate onward
        /// </summary>
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오전 11:33:28
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오전 11:33:28
        char planarity;
        const class Table_JoycelinTable* Table;
    public: 
        Table_JoycelinRow(CremaReader::irow& row, Table_JoycelinTable* table);
    };
    // Modifier: Member_Maye
    // ModifiedDateTime: 2016-07-25 오전 11:33:28
    // ContentsModifier: Admin_disregardful
    // ContentsModifiedDateTime: 2016-07-25 오후 10:45:36
    class Table_JoycelinTable : public CremaTable<Table_JoycelinRow>
    {
    public: 
        Table_JoycelinTable();
        Table_JoycelinTable(CremaReader::itable& table);
    public: 
        virtual ~Table_JoycelinTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_JoycelinRow* Find(time_t brushfire) const;
    };
    class Table_reticulateChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:57:13
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:57:13
        bool warhead;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:57:13
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:57:13
        short champ;
        /// <summary>
        /// darkly artichoke worldwide Turk Madelaine Carilyn quandary decorated
        /// </summary>
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:57:13
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:57:13
        int relaxedness;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:57:13
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:57:13
        Type_rifled calorimetric;
        /// <summary>
        /// Silesia bloody pedagogical Edgar procreatory clusters breeder monosyllable sexism tempter stage cognizable cackle Desirae saddle expressionist Cerberus
        /// </summary>
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:57:13
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:57:13
        unsigned short rhesus;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:57:13
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:57:13
        Type_spokespeople Runyon;
        const class Table_reticulateChild1Table* Table;
        const class Table_reticulateRow* Parent;
    public: 
        Table_reticulateChild1Row(CremaReader::irow& row, Table_reticulateChild1Table* table);
    };
    // Creator: Member_Cecilia
    // CreatedDateTime: 2016-07-25 오전 11:57:13
    // Modifier: Member_Cecilia
    // ModifiedDateTime: 2016-07-25 오전 11:57:13
    class Table_reticulateChild1Table : public CremaTable<Table_reticulateChild1Row>
    {
    public: 
        Table_reticulateChild1Table();
        Table_reticulateChild1Table(CremaReader::itable& table);
        Table_reticulateChild1Table(std::vector<class Table_reticulateChild1Row*> rows);
    public: 
        virtual ~Table_reticulateChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_reticulateChild1Row* Find(bool warhead) const;
    };
    class Table_reticulateChild2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Newman quibble
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 1:03:50
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 1:03:50
        short Ward;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오후 1:03:50
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오후 1:03:50
        short writeup;
        const class Table_reticulateChild2Table* Table;
        const Table_reticulateRow* Parent;
    public: 
        Table_reticulateChild2Row(CremaReader::irow& row, Table_reticulateChild2Table* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오후 1:03:50
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오후 1:03:50
    class Table_reticulateChild2Table : public CremaTable<Table_reticulateChild2Row>
    {
    public: 
        Table_reticulateChild2Table();
        Table_reticulateChild2Table(CremaReader::itable& table);
        Table_reticulateChild2Table(std::vector<class Table_reticulateChild2Row*> rows);
    public: 
        virtual ~Table_reticulateChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_reticulateChild2Row* Find(short Ward) const;
    };
    class Table_reticulateRow : public CremaRow
    {
    public: 
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        int immediacy;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        short dateline;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type_Gretta setup;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        double lettering;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type_Multan colatitude;
        /// <summary>
        /// zestfulness burdock Lynnelle groveling smilax Linton wirehair Sib honored Boise stockholder kiddish Agretha dominant Adolphe elderliness fuhrer Ethyl
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        char Sam;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        float maleficence;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type1 Fermi;
        const class Table_reticulateTable* Table;
        const Table_reticulateChild1Table* Child1;
        const Table_reticulateChild2Table* Child2;
    private: 
        static Table_reticulateChild1Table Child1Empty;
        static Table_reticulateChild2Table Child2Empty;
    public: 
        Table_reticulateRow(CremaReader::irow& row, Table_reticulateTable* table);
    friend static void Table_reticulateSetChild1(Table_reticulateRow* target, const std::vector<Table_reticulateChild1Row*>& childs);
        static void Table_reticulateSetChild2(Table_reticulateRow* target, const std::vector<Table_reticulateChild2Row*>& childs);
    };
    // Modifier: Admin_distinctiveness
    // ModifiedDateTime: 2016-07-25 오전 9:20:56
    class Table_reticulateTable : public CremaTable<Table_reticulateRow>
    {
    public: 
        const Table_reticulateChild1Table* Child1;
        const Table_reticulateChild2Table* Child2;
    public: 
        Table_reticulateTable();
        Table_reticulateTable(CremaReader::itable& table);
    public: 
        virtual ~Table_reticulateTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_reticulateRow* Find(int immediacy, double lettering, Type_Multan colatitude, float maleficence) const;
    };
    class Table114Row : public CremaRow
    {
    public: 
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        int Elie;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        short traction;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        time_t cartload;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        time_t Cartwright;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오후 12:30:06
        unsigned short handshaking;
        /// <summary>
        /// brier Opal Jeri Fremont Shirlee Ecuadoran reverent BBS microscopy Southeast Apache mismatch hightail loathsome circumcision numerable hardtack Vonda
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오후 12:30:06
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오후 12:30:06
        int Timex;
        const class Table114Table* Table;
    public: 
        Table114Row(CremaReader::irow& row, Table114Table* table);
    };
    // Creator: Member_king
    // CreatedDateTime: 2016-07-25 오전 11:41:32
    // Modifier: Member_role
    // ModifiedDateTime: 2016-07-25 오후 12:30:06
    // ContentsModifier: Member_Simenon
    // ContentsModifiedDateTime: 2016-07-25 오후 2:32:41
    class Table114Table : public CremaTable<Table114Row>
    {
    public: 
        Table114Table();
        Table114Table(CremaReader::itable& table);
    public: 
        virtual ~Table114Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table114Row* Find(int Elie) const;
    };
    class Table118Row : public CremaRow
    {
    public: 
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 11:47:54
        unsigned char romantically;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 11:47:54
        float interwoven;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 11:47:54
        unsigned int speed;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 11:47:54
        unsigned char Provencals;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 11:47:54
        float biologic;
        /// <summary>
        /// retroflexion Newsweekly fogged electric rerecord Melita Wright analyticity comforter ureter
        /// </summary>
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 11:47:54
        int volcanoes;
        /// <summary>
        /// Ferrari outpoint Vern Adrianna ency sudden infatuation Datamation emblematic miscast fiat beguilement mainstream Rodin python reproductive Danville lotto
        /// </summary>
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 11:47:54
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오후 5:56:40
        Type30 extendedness;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오후 5:56:40
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오후 5:56:40
        Type60 Renaud;
        /// <summary>
        /// accessors Maxim computerese December Edithe Alia bouncing risotto farmyard hallow misdeed midsummer outliers licorice Erich Jonas familiarize delirium
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오후 5:56:40
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오후 5:56:40
        float satisfactory;
        /// <summary>
        /// woodwork buggery irony projected Addams raven windburn gobble stupendousness tenability antinomian
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오후 5:56:40
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오후 5:56:40
        unsigned int coursework;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오후 5:56:40
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오후 5:56:40
        time_t potentiating;
        const class Table118Table* Table;
    public: 
        Table118Row(CremaReader::irow& row, Table118Table* table);
    };
    // Creator: Member_Indianapolis
    // CreatedDateTime: 2016-07-25 오전 11:47:54
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오후 5:56:40
    class Table118Table : public CremaTable<Table118Row>
    {
    public: 
        Table118Table();
        Table118Table(CremaReader::itable& table);
    public: 
        virtual ~Table118Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table118Row* Find(unsigned char romantically, float interwoven, Type30 extendedness, time_t potentiating) const;
    };
    class Table170Row : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오후 2:04:49
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오후 2:04:49
        char excise;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오후 2:04:49
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오후 2:04:49
        bool trio;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오후 2:04:49
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오후 2:04:49
        bool inquiry;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오후 2:04:49
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오후 2:04:49
        Type_hyperboloidal concealment;
        /// <summary>
        /// ovulate lacing Polanski Nikoletta untellable switchman Surat Arlette monkish shapeless Stella Kristine
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오후 2:04:49
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오후 2:04:49
        Type77 cornfield;
        const class Table170Table* Table;
    public: 
        Table170Row(CremaReader::irow& row, Table170Table* table);
    };
    // Creator: Member_jitterbugger
    // CreatedDateTime: 2016-07-25 오후 2:04:49
    // Modifier: Member_jitterbugger
    // ModifiedDateTime: 2016-07-25 오후 2:04:49
    // ContentsModifier: Member_Simenon
    // ContentsModifiedDateTime: 2016-07-25 오후 6:21:03
    class Table170Table : public CremaTable<Table170Row>
    {
    public: 
        Table170Table();
        Table170Table(CremaReader::itable& table);
    public: 
        virtual ~Table170Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table170Row* Find(char excise, bool inquiry) const;
    };
    class Table64Row : public CremaRow
    {
    public: 
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오전 10:26:07
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오전 10:26:07
        bool furthermost;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오전 10:26:07
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오전 10:26:07
        int parliament;
        const class Table64Table* Table;
    public: 
        Table64Row(CremaReader::irow& row, Table64Table* table);
    };
    // Creator: Member_nubbin
    // CreatedDateTime: 2016-07-25 오전 10:26:07
    // Modifier: Member_nubbin
    // ModifiedDateTime: 2016-07-25 오전 10:26:07
    // ContentsModifier: Admin_Hooke
    // ContentsModifiedDateTime: 2016-07-25 오후 5:28:49
    class Table64Table : public CremaTable<Table64Row>
    {
    public: 
        Table64Table();
        Table64Table(CremaReader::itable& table);
    public: 
        virtual ~Table64Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table64Row* Find(bool furthermost) const;
    };
    class Table_designedRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Sapphire dosimeter
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double Tanny;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double locale;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char fagoting;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        Type_Madison aim;
        /// <summary>
        /// moths oscillator lilac procaine crackdown Andriana trimmed hullabaloo
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        std::string brutality;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float scantly;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        int British;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char broadcast;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float injurer;
        const class Table_designedTable* Table;
    public: 
        Table_designedRow(CremaReader::irow& row, Table_designedTable* table);
    };
    // Modifier: Admin_wholesomeness
    // ModifiedDateTime: 2016-07-25 오전 9:15:25
    // ContentsModifier: Admin_disregardful
    // ContentsModifiedDateTime: 2016-07-25 오후 8:20:26
    class Table_designedTable : public CremaTable<Table_designedRow>
    {
    public: 
        Table_designedTable();
        Table_designedTable(CremaReader::itable& table);
    public: 
        virtual ~Table_designedTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_designedRow* Find(double Tanny, const std::string& brutality) const;
    };
    class Table_scoutRow : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오후 2:41:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오후 2:41:41
        float turk;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오후 2:41:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오후 2:41:41
        Type74 blankness;
        const class Table_scoutTable* Table;
    public: 
        Table_scoutRow(CremaReader::irow& row, Table_scoutTable* table);
    };
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오후 2:41:41
    // ContentsModifier: Member_creel
    // ContentsModifiedDateTime: 2016-07-25 오후 5:14:35
    class Table_scoutTable : public CremaTable<Table_scoutRow>
    {
    public: 
        Table_scoutTable();
        Table_scoutTable(CremaReader::itable& table);
    public: 
        virtual ~Table_scoutTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_scoutRow* Find(float turk) const;
    };
    class Table_summarizerChild_WinnetkaRow : public CremaRow
    {
    public: 
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:40:31
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:40:31
        int exudation;
        const class Table_summarizerChild_WinnetkaTable* Table;
        const class Table_summarizerRow* Parent;
    public: 
        Table_summarizerChild_WinnetkaRow(CremaReader::irow& row, Table_summarizerChild_WinnetkaTable* table);
    };
    // Creator: Member_Dorine
    // CreatedDateTime: 2016-07-25 오전 10:40:31
    // Modifier: Member_Dorine
    // ModifiedDateTime: 2016-07-25 오전 10:40:31
    // ContentsModifier: Member_budgie
    // ContentsModifiedDateTime: 2016-07-25 오후 6:13:53
    class Table_summarizerChild_WinnetkaTable : public CremaTable<Table_summarizerChild_WinnetkaRow>
    {
    public: 
        Table_summarizerChild_WinnetkaTable();
        Table_summarizerChild_WinnetkaTable(CremaReader::itable& table);
        Table_summarizerChild_WinnetkaTable(std::vector<class Table_summarizerChild_WinnetkaRow*> rows);
    public: 
        virtual ~Table_summarizerChild_WinnetkaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_summarizerChild_WinnetkaRow* Find(int exudation) const;
    };
    class Table_summarizerRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned short Araucanian;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        const class Table_summarizerTable* Table;
        const Table_summarizerChild_WinnetkaTable* Child_Winnetka;
    private: 
        static Table_summarizerChild_WinnetkaTable Child_WinnetkaEmpty;
    public: 
        Table_summarizerRow(CremaReader::irow& row, Table_summarizerTable* table);
    friend static void Table_summarizerSetChild_Winnetka(Table_summarizerRow* target, const std::vector<Table_summarizerChild_WinnetkaRow*>& childs);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:15:17
    // ContentsModifier: Member_budgie
    // ContentsModifiedDateTime: 2016-07-25 오후 6:13:53
    class Table_summarizerTable : public CremaTable<Table_summarizerRow>
    {
    public: 
        const Table_summarizerChild_WinnetkaTable* Child_Winnetka;
    public: 
        Table_summarizerTable();
        Table_summarizerTable(CremaReader::itable& table);
    public: 
        virtual ~Table_summarizerTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_summarizerRow* Find(double corpsman, bool jetting) const;
    };
    class Table132Row : public CremaRow
    {
    public: 
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오후 12:12:08
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오후 12:12:08
        time_t sexy;
        const class Table132Table* Table;
    public: 
        Table132Row(CremaReader::irow& row, Table132Table* table);
    };
    // Creator: Member_currant
    // CreatedDateTime: 2016-07-25 오후 12:12:08
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오후 12:12:08
    // ContentsModifier: Member_immunology
    // ContentsModifiedDateTime: 2016-07-25 오후 6:10:58
    class Table132Table : public CremaTable<Table132Row>
    {
    public: 
        Table132Table();
        Table132Table(CremaReader::itable& table);
    public: 
        virtual ~Table132Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table132Row* Find(time_t sexy) const;
    };
    class Table133Row : public CremaRow
    {
    public: 
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        Type3 Teresita;
        /// <summary>
        /// distinctive hormonal retractile collectivize beachhead formalize phonetic tarantula defamatory epitomizer hypertext biennium Jamill Barton
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        unsigned char bloody;
        /// <summary>
        /// odiousness Acrux Niccolo vie theeing rotational laconic
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        double deerstalker;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        int overrule;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        unsigned long long stripped;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        char baler;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        bool Alikee;
        /// <summary>
        /// millwright collimated dell
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        std::string windup;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 12:12:45
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 12:12:45
        Type_Arlan drizzling;
        const class Table133Table* Table;
    public: 
        Table133Row(CremaReader::irow& row, Table133Table* table);
    };
    // Creator: Admin_Marshal
    // CreatedDateTime: 2016-07-25 오후 12:12:45
    // Modifier: Admin_Marshal
    // ModifiedDateTime: 2016-07-25 오후 12:12:45
    class Table133Table : public CremaTable<Table133Row>
    {
    public: 
        Table133Table();
        Table133Table(CremaReader::itable& table);
    public: 
        virtual ~Table133Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table133Row* Find(Type3 Teresita) const;
    };
    class Table154Row : public CremaRow
    {
    public: 
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 12:47:44
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 12:47:44
        unsigned short qualification;
        /// <summary>
        /// Kirby transgressor subtext suppress unassuming spanning skiing zapping captivator temperance leafstalk animist indifference Eran Craggy econ
        /// </summary>
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 12:47:44
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 12:47:44
        int bite;
        const class Table154Table* Table;
    public: 
        Table154Row(CremaReader::irow& row, Table154Table* table);
    };
    // Creator: Member_nonjudicial
    // CreatedDateTime: 2016-07-25 오후 12:47:44
    // Modifier: Member_nonjudicial
    // ModifiedDateTime: 2016-07-25 오후 12:47:44
    // ContentsModifier: Admin_wholesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 9:07:14
    class Table154Table : public CremaTable<Table154Row>
    {
    public: 
        Table154Table();
        Table154Table(CremaReader::itable& table);
    public: 
        virtual ~Table154Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table154Row* Find(unsigned short qualification) const;
    };
    class Table_fittedRow : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:49:06
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        long long outmaneuver;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:49:06
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:49:06
        bool Heddi;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        long long sidle;
        /// <summary>
        /// Virgilio windpipe outsetting spavin fuller psychos lascivious gulp hallows cleanable flagpole fullish grip
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:57:21
        int kWh;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:57:21
        std::string toothpick;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:57:21
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:57:21
        Type13 overstate;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        char schoolyard;
        /// <summary>
        /// Maximo sunsetting Georgena Jakob nosily ketone Segre ruler strap fatal Yorick Harlow
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        short Tuareg;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        double Sennett;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        double deicer;
        /// <summary>
        /// Matterhorn
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:09:03
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:09:03
        long long prefect;
        const class Table_fittedTable* Table;
    public: 
        Table_fittedRow(CremaReader::irow& row, Table_fittedTable* table);
    };
    // Modifier: Member_role
    // ModifiedDateTime: 2016-07-25 오전 11:09:03
    // ContentsModifier: Admin_getup
    // ContentsModifiedDateTime: 2016-07-25 오후 8:10:43
    class Table_fittedTable : public CremaTable<Table_fittedRow>
    {
    public: 
        Table_fittedTable();
        Table_fittedTable(CremaReader::itable& table);
    public: 
        virtual ~Table_fittedTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_fittedRow* Find(long long outmaneuver) const;
    };
    class Table_TupungatoChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        int parabolic;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned short syncopation;
        /// <summary>
        /// husk transceiver Derk theatric alibi pilferage Fermi adjust Ilysa demonic binocular fidget Carmelia isochronal Xanthus Quixotism departmentalize Beardsley
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        bool steamroller;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        long long purloiner;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        short rattrap;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned int Redondo;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        char peach;
        /// <summary>
        /// deicer communion uncivilized forthcoming LPG searcher Cathee mapmaker bode bushel curvature cause addresser lumpiness clog calculable spikiness nobleness
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:08:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:08:56
        long long asbestos;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:08:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:08:56
        unsigned short glazing;
        const class Table_TupungatoChild1Table* Table;
        const class Table_TupungatoRow* Parent;
    public: 
        Table_TupungatoChild1Row(CremaReader::irow& row, Table_TupungatoChild1Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 9:25:57
    // Modifier: Member_budgie
    // ModifiedDateTime: 2016-07-25 오전 10:08:56
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 9:40:17
    class Table_TupungatoChild1Table : public CremaTable<Table_TupungatoChild1Row>
    {
    public: 
        Table_TupungatoChild1Table();
        Table_TupungatoChild1Table(CremaReader::itable& table);
        Table_TupungatoChild1Table(std::vector<class Table_TupungatoChild1Row*> rows);
    public: 
        virtual ~Table_TupungatoChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_TupungatoChild1Row* Find(int parabolic, short rattrap) const;
    };
    class Table_TupungatoRow : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long marginalia;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        long long chatted;
        /// <summary>
        /// shallowness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        std::string dutiful;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long strangulate;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:18:59
        unsigned int Rozella;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        char patrician;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        unsigned short brunet;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        short sweeping;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오전 11:18:59
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:18:59
        int priesthood;
        const class Table_TupungatoTable* Table;
        const Table_TupungatoChild1Table* Child1;
    private: 
        static Table_TupungatoChild1Table Child1Empty;
    public: 
        Table_TupungatoRow(CremaReader::irow& row, Table_TupungatoTable* table);
    friend static void Table_TupungatoSetChild1(Table_TupungatoRow* target, const std::vector<Table_TupungatoChild1Row*>& childs);
    };
    // Modifier: Admin_signalization
    // ModifiedDateTime: 2016-07-25 오전 11:18:59
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 9:40:17
    class Table_TupungatoTable : public CremaTable<Table_TupungatoRow>
    {
    public: 
        const Table_TupungatoChild1Table* Child1;
    public: 
        Table_TupungatoTable();
        Table_TupungatoTable(CremaReader::itable& table);
    public: 
        virtual ~Table_TupungatoTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_TupungatoRow* Find(unsigned long long marginalia, long long chatted) const;
    };
    class Table130Row : public CremaRow
    {
    public: 
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오후 12:06:30
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오후 12:06:30
        unsigned char duplicative;
        /// <summary>
        /// colossus
        /// </summary>
        // Creator: Admin_chumming
        // CreatedDateTime: 2016-07-25 오후 5:56:22
        // Modifier: Admin_chumming
        // ModifiedDateTime: 2016-07-25 오후 5:56:22
        unsigned long long unfailing;
        // Creator: Admin_chumming
        // CreatedDateTime: 2016-07-25 오후 5:56:22
        // Modifier: Admin_chumming
        // ModifiedDateTime: 2016-07-25 오후 5:56:22
        int Sherman;
        const class Table130Table* Table;
    public: 
        Table130Row(CremaReader::irow& row, Table130Table* table);
    };
    // Creator: Admin_getup
    // CreatedDateTime: 2016-07-25 오후 12:06:30
    // Modifier: Admin_chumming
    // ModifiedDateTime: 2016-07-25 오후 5:56:22
    // ContentsModifier: Admin_Nutrasweet
    // ContentsModifiedDateTime: 2016-07-25 오후 9:08:27
    class Table130Table : public CremaTable<Table130Row>
    {
    public: 
        Table130Table();
        Table130Table(CremaReader::itable& table);
    public: 
        virtual ~Table130Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table130Row* Find(unsigned char duplicative) const;
    };
    class Table200Row : public CremaRow
    {
    public: 
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오후 5:48:07
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오후 5:48:07
        unsigned int paranoia;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오후 5:48:07
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오후 6:45:40
        unsigned short vanquish;
        /// <summary>
        /// Mendeleev insulter tease beeswax departure overdependent shell fall ellipsoidal coarseness oracle
        /// </summary>
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오후 5:48:07
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오후 5:48:07
        unsigned int bonkers;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오후 6:45:40
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오후 6:45:40
        bool spinal;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오후 6:45:40
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오후 6:45:40
        int lagging;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오후 6:45:40
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오후 6:45:40
        unsigned int anywise;
        const class Table200Table* Table;
    public: 
        Table200Row(CremaReader::irow& row, Table200Table* table);
    };
    // Creator: Admin_probationary
    // CreatedDateTime: 2016-07-25 오후 5:48:07
    // Modifier: Admin_probationary
    // ModifiedDateTime: 2016-07-25 오후 6:45:40
    // ContentsModifier: Member_creel
    // ContentsModifiedDateTime: 2016-07-25 오후 10:16:01
    class Table200Table : public CremaTable<Table200Row>
    {
    public: 
        Table200Table();
        Table200Table(CremaReader::itable& table);
    public: 
        virtual ~Table200Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table200Row* Find(unsigned int paranoia, unsigned int bonkers, int lagging) const;
    };
    class Table_capsulizeRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ilona Priscilla tritely graffiti Dollie pannier aileron skillet pharmaceutic peptizing mandolin lash shortage obsessional
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:30:29
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 12:04:11
        Type_hand trenchermen;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:30:29
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:30:29
        unsigned int limit;
        /// <summary>
        /// thorax whetted danseuse sedge
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:30:29
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 12:04:11
        long long gratified;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:30:29
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 12:04:11
        int Yokohama;
        /// <summary>
        /// hypnotherapy technique inveteracy rhythmics
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:30:29
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:30:29
        short Blaire;
        /// <summary>
        /// Savannah endothelial buccaneer genocidal Anthiathia sandbank blinder voraciousness Londoner backorder extremist overbuild diet metastasize Kathi TVA Dole woodruff Cathay
        /// </summary>
        // Creator: Admin_motive
        // CreatedDateTime: 2016-07-25 오후 12:04:11
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 12:04:11
        Type40 polyclinic;
        // Creator: Admin_motive
        // CreatedDateTime: 2016-07-25 오후 12:04:11
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 12:04:11
        short concerned;
        const class Table_capsulizeTable* Table;
    public: 
        Table_capsulizeRow(CremaReader::irow& row, Table_capsulizeTable* table);
    };
    // Modifier: Admin_motive
    // ModifiedDateTime: 2016-07-25 오후 12:04:11
    class Table_capsulizeTable : public CremaTable<Table_capsulizeRow>
    {
    public: 
        Table_capsulizeTable();
        Table_capsulizeTable(CremaReader::itable& table);
    public: 
        virtual ~Table_capsulizeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_capsulizeRow* Find(Type_hand trenchermen) const;
    };
    class Table210Row : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:44:44
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:44:44
        int Pollard;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:44:44
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:44:44
        std::string Ardisj;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:44:44
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:44:44
        bool goodish;
        /// <summary>
        /// lampooner
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:44:44
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:44:44
        short thoroughness;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:44:44
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:44:44
        unsigned short Andie;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:44:44
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:44:44
        int paternalism;
        const class Table210Table* Table;
    public: 
        Table210Row(CremaReader::irow& row, Table210Table* table);
    };
    // Creator: Admin_serviceableness
    // CreatedDateTime: 2016-07-25 오후 6:44:44
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오후 6:44:44
    // ContentsModifier: Member_Cecilia
    // ContentsModifiedDateTime: 2016-07-25 오후 8:31:07
    class Table210Table : public CremaTable<Table210Row>
    {
    public: 
        Table210Table();
        Table210Table(CremaReader::itable& table);
    public: 
        virtual ~Table210Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table210Row* Find(int Pollard, short thoroughness) const;
    };
    class Table192Row : public CremaRow
    {
    public: 
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:57:29
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:57:29
        unsigned short clumsy;
        const class Table192Table* Table;
    public: 
        Table192Row(CremaReader::irow& row, Table192Table* table);
    };
    // Creator: Admin_cenotaphs
    // CreatedDateTime: 2016-07-25 오후 4:57:29
    // Modifier: Admin_cenotaphs
    // ModifiedDateTime: 2016-07-25 오후 4:57:29
    // ContentsModifier: Admin_disregardful
    // ContentsModifiedDateTime: 2016-07-25 오후 10:16:00
    class Table192Table : public CremaTable<Table192Row>
    {
    public: 
        Table192Table();
        Table192Table(CremaReader::itable& table);
    public: 
        virtual ~Table192Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table192Row* Find(unsigned short clumsy) const;
    };
    class Table_adulthoodChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        Type43 florin;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        unsigned long long amazon;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        Type30 featherbed;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        unsigned char Dumont;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        float malevolencies;
        /// <summary>
        /// psychedelically Chablis Winonah painful Marga hostler Delft
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        double weighs;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        std::string Crowley;
        /// <summary>
        /// expressway Endicott hammerless SAT Britney chiffonier Republicanism viz debatable rebel meteoritic uncustomary Mathieu
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 6:09:51
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 6:09:51
        Type_nephew Ewell;
        const class Table_adulthoodChild1Table* Table;
        const class Table_adulthoodRow* Parent;
    public: 
        Table_adulthoodChild1Row(CremaReader::irow& row, Table_adulthoodChild1Table* table);
    };
    // Creator: Admin_snootily
    // CreatedDateTime: 2016-07-25 오후 6:09:51
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오후 6:09:51
    class Table_adulthoodChild1Table : public CremaTable<Table_adulthoodChild1Row>
    {
    public: 
        Table_adulthoodChild1Table();
        Table_adulthoodChild1Table(CremaReader::itable& table);
        Table_adulthoodChild1Table(std::vector<class Table_adulthoodChild1Row*> rows);
    public: 
        virtual ~Table_adulthoodChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_adulthoodChild1Row* Find(Type43 florin) const;
    };
    class Table_adulthoodRow : public CremaRow
    {
    public: 
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 1:27:58
        unsigned char may;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        int whiten;
        /// <summary>
        /// momma backing Deleon nationalizer glycerol wastepaper encephalopathy hairsbreadth dissatisfy praising stanchion Candlewick
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type25 Romans;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type13 Appalachian;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        unsigned short Denmark;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:25:24
        bool Merrie;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        short premeditated;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type_rennet Berzelius;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type_Attn Angelia;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:25:24
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:25:24
        Type50 erupt;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 1:27:58
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 1:27:58
        time_t Yetty;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 1:27:58
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 1:27:58
        short PMS;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 1:27:58
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 1:27:58
        unsigned long long sharia;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오후 1:27:58
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오후 1:27:58
        long long inflexion;
        const class Table_adulthoodTable* Table;
        const Table_adulthoodChild1Table* Child1;
    private: 
        static Table_adulthoodChild1Table Child1Empty;
    public: 
        Table_adulthoodRow(CremaReader::irow& row, Table_adulthoodTable* table);
    friend static void Table_adulthoodSetChild1(Table_adulthoodRow* target, const std::vector<Table_adulthoodChild1Row*>& childs);
    };
    // Modifier: Admin_Marshal
    // ModifiedDateTime: 2016-07-25 오후 1:27:58
    // ContentsModifier: member
    // ContentsModifiedDateTime: 2016-07-25 오후 4:59:34
    class Table_adulthoodTable : public CremaTable<Table_adulthoodRow>
    {
    public: 
        const Table_adulthoodChild1Table* Child1;
    public: 
        Table_adulthoodTable();
        Table_adulthoodTable(CremaReader::itable& table);
    public: 
        virtual ~Table_adulthoodTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_adulthoodRow* Find(unsigned char may) const;
    };
    class Table_gerrymanderRow : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        float unnavigable;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned long long Jarad;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        long long separates;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        time_t assiduity;
        /// <summary>
        /// debilitate vegetation abundant convene philologist outtake unlimber tabula filmy upgrade Gerhard Ronni knowable Mariya
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type8 yardmaster;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned char Sir;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type_Attn thermostat;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        std::string Gregoor;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned short planetarium;
        const class Table_gerrymanderTable* Table;
    public: 
        Table_gerrymanderRow(CremaReader::irow& row, Table_gerrymanderTable* table);
    };
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오전 9:24:20
    // ContentsModifier: Member_Alex
    // ContentsModifiedDateTime: 2016-07-25 오후 5:47:23
    class Table_gerrymanderTable : public CremaTable<Table_gerrymanderRow>
    {
    public: 
        Table_gerrymanderTable();
        Table_gerrymanderTable(CremaReader::itable& table);
    public: 
        virtual ~Table_gerrymanderTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_gerrymanderRow* Find(float unnavigable, time_t assiduity) const;
    };
    class Table193Row : public CremaRow
    {
    public: 
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 5:03:27
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 5:03:27
        unsigned char sisterliness;
        const class Table193Table* Table;
    public: 
        Table193Row(CremaReader::irow& row, Table193Table* table);
    };
    // Creator: Member_nonjudicial
    // CreatedDateTime: 2016-07-25 오후 5:03:27
    // Modifier: Member_nonjudicial
    // ModifiedDateTime: 2016-07-25 오후 5:03:27
    // ContentsModifier: Admin_wholesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 5:09:48
    class Table193Table : public CremaTable<Table193Row>
    {
    public: 
        Table193Table();
        Table193Table(CremaReader::itable& table);
    public: 
        virtual ~Table193Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table193Row* Find(unsigned char sisterliness) const;
    };
    class Table_needlessnessRow : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:27:34
        short Portsmouth;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        Type_rennet bout;
        /// <summary>
        /// stubborn duress Sextans Cyprian Thieu Kenyon homophobic
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:27:34
        unsigned int bowlful;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:00:29
        long long ABS;
        /// <summary>
        /// laundrymen Fredek
        /// </summary>
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 10:27:34
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:27:34
        short bellflower;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 10:27:34
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:27:34
        float preoccupation;
        /// <summary>
        /// brewpub gritter Ryukyu Simpson instructed Kathrine Jacquelyn folklike confidence sander lukewarm invigorate humanism
        /// </summary>
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 10:27:34
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:27:34
        Type_spokespeople nonsensitive;
        /// <summary>
        /// promenader hoarding heathery Proust guile gyroscopic slog
        /// </summary>
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:00:29
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:00:29
        long long implicant;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:00:29
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:00:29
        int qty;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:00:29
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:00:29
        short guile;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:00:29
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:00:29
        float talebearer;
        const class Table_needlessnessTable* Table;
    public: 
        Table_needlessnessRow(CremaReader::irow& row, Table_needlessnessTable* table);
    };
    // Modifier: Admin_probationary
    // ModifiedDateTime: 2016-07-25 오전 11:00:29
    // ContentsModifier: Admin_mousse
    // ContentsModifiedDateTime: 2016-07-25 오전 11:05:00
    class Table_needlessnessTable : public CremaTable<Table_needlessnessRow>
    {
    public: 
        Table_needlessnessTable();
        Table_needlessnessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_needlessnessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_needlessnessRow* Find(short Portsmouth) const;
    };
    class Table24Row : public CremaRow
    {
    public: 
        /// <summary>
        /// urethral stoup
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:21:57
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 9:21:57
        unsigned long long Dina;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:21:57
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 9:21:57
        long long conviction;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:21:57
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 9:21:57
        float Bellanca;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:21:57
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 9:21:57
        unsigned int chancing;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:21:57
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 9:21:57
        int definer;
        const class Table24Table* Table;
    public: 
        Table24Row(CremaReader::irow& row, Table24Table* table);
    };
    // Creator: Admin_Marshal
    // CreatedDateTime: 2016-07-25 오전 9:21:57
    // Modifier: Admin_Marshal
    // ModifiedDateTime: 2016-07-25 오전 9:21:57
    // ContentsModifier: Admin_refreshing
    // ContentsModifiedDateTime: 2016-07-25 오후 8:22:35
    class Table24Table : public CremaTable<Table24Row>
    {
    public: 
        Table24Table();
        Table24Table(CremaReader::itable& table);
    public: 
        virtual ~Table24Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table24Row* Find(unsigned long long Dina) const;
    };
    class Table62Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Pittsburgh Myanmar ambidextrous crowbait gawk Stesha taciturn dandily smithereens catbird
        /// </summary>
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 10:19:47
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:40:26
        Type12 contract;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 10:40:26
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:40:26
        int tile;
        /// <summary>
        /// flinger rebellious league Ontarian creditably grunt allay shover acceptableness reflexion electromagnetism scramming Ophelia wardrobe demount driver
        /// </summary>
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 10:40:26
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 10:40:26
        long long rimless;
        const class Table62Table* Table;
    public: 
        Table62Row(CremaReader::irow& row, Table62Table* table);
    };
    // Creator: Member_scuzzy
    // CreatedDateTime: 2016-07-25 오전 10:19:47
    // Modifier: Member_nonjudicial
    // ModifiedDateTime: 2016-07-25 오전 10:40:26
    class Table62Table : public CremaTable<Table62Row>
    {
    public: 
        Table62Table();
        Table62Table(CremaReader::itable& table);
    public: 
        virtual ~Table62Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table62Row* Find(Type12 contract) const;
    };
    class Table_expansionaryChild_KatrinkaRow : public CremaRow
    {
    public: 
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Patti;
        /// <summary>
        /// jamboree path bedded crablike sliced drubber radiosterilization Martinez Mugabe slough Mirilla Harv Genevieve hairsbreadth
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        double glazed;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        bool diffract;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        unsigned int calamitous;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Cranmer;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Volvo;
        const class Table_expansionaryChild_KatrinkaTable* Table;
        const class Table_expansionaryRow* Parent;
    public: 
        Table_expansionaryChild_KatrinkaRow(CremaReader::irow& row, Table_expansionaryChild_KatrinkaTable* table);
    };
    // Creator: Admin_snootily
    // CreatedDateTime: 2016-07-25 오전 9:53:45
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오전 9:53:45
    // ContentsModifier: Admin_reggae
    // ContentsModifiedDateTime: 2016-07-25 오후 6:30:27
    class Table_expansionaryChild_KatrinkaTable : public CremaTable<Table_expansionaryChild_KatrinkaRow>
    {
    public: 
        Table_expansionaryChild_KatrinkaTable();
        Table_expansionaryChild_KatrinkaTable(CremaReader::itable& table);
        Table_expansionaryChild_KatrinkaTable(std::vector<class Table_expansionaryChild_KatrinkaRow*> rows);
    public: 
        virtual ~Table_expansionaryChild_KatrinkaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_expansionaryChild_KatrinkaRow* Find(int Patti, bool diffract) const;
    };
    class Table_expansionaryRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int trollish;
        /// <summary>
        /// Alan Frankfurter hemorrhagic Jehoshaphat
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        bool lukewarm;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        const class Table_expansionaryTable* Table;
        const Table_expansionaryChild_KatrinkaTable* Child_Katrinka;
    private: 
        static Table_expansionaryChild_KatrinkaTable Child_KatrinkaEmpty;
    public: 
        Table_expansionaryRow(CremaReader::irow& row, Table_expansionaryTable* table);
    friend static void Table_expansionarySetChild_Katrinka(Table_expansionaryRow* target, const std::vector<Table_expansionaryChild_KatrinkaRow*>& childs);
    };
    // Modifier: Member_budgie
    // ModifiedDateTime: 2016-07-25 오전 9:14:09
    // ContentsModifier: Admin_reggae
    // ContentsModifiedDateTime: 2016-07-25 오후 6:30:27
    class Table_expansionaryTable : public CremaTable<Table_expansionaryRow>
    {
    public: 
        const Table_expansionaryChild_KatrinkaTable* Child_Katrinka;
    public: 
        Table_expansionaryTable();
        Table_expansionaryTable(CremaReader::itable& table);
    public: 
        virtual ~Table_expansionaryTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_expansionaryRow* Find(unsigned int snapback) const;
    };
    class Table_GiacintaChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:23
        long long schism;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:23
        double BBC;
        /// <summary>
        /// retch uucp provabilities spastic renewal quiche Topsy stairway Erina quincy transmigrate flabbergast villager Dur striper narrowing Finlay
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        std::string Ge;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 9:13:03
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        char grubbed;
        const class Table_GiacintaChild1Table* Table;
        const class Table_GiacintaRow* Parent;
    public: 
        Table_GiacintaChild1Row(CremaReader::irow& row, Table_GiacintaChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:23
    // Modifier: Member_nonjudicial
    // ModifiedDateTime: 2016-07-25 오전 9:13:03
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 10:44:42
    class Table_GiacintaChild1Table : public CremaTable<Table_GiacintaChild1Row>
    {
    public: 
        Table_GiacintaChild1Table();
        Table_GiacintaChild1Table(CremaReader::itable& table);
        Table_GiacintaChild1Table(std::vector<class Table_GiacintaChild1Row*> rows);
    public: 
        virtual ~Table_GiacintaChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_GiacintaChild1Row* Find(long long schism) const;
    };
    class Table_GiacintaChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:24
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:24
        char gos;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        unsigned short photolysis;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        long long Liberian;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        double Palmyra;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        time_t airbus;
        const class Table_GiacintaChild2Table* Table;
        const Table_GiacintaRow* Parent;
    public: 
        Table_GiacintaChild2Row(CremaReader::irow& row, Table_GiacintaChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:24
    // Modifier: Admin_injection
    // ModifiedDateTime: 2016-07-25 오전 9:30:38
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 10:44:42
    class Table_GiacintaChild2Table : public CremaTable<Table_GiacintaChild2Row>
    {
    public: 
        Table_GiacintaChild2Table();
        Table_GiacintaChild2Table(CremaReader::itable& table);
        Table_GiacintaChild2Table(std::vector<class Table_GiacintaChild2Row*> rows);
    public: 
        virtual ~Table_GiacintaChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_GiacintaChild2Row* Find(char gos) const;
    };
    class Table_GiacintaRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:07
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:07
        Type3 reprehensible;
        /// <summary>
        /// skillfulnesses came misread Albee Americanization uneducated
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 9:14:35
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 9:14:35
        time_t headmastership;
        /// <summary>
        /// concentrator
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 9:14:35
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 9:14:35
        short Gienah;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 9:14:35
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 9:14:35
        float capo;
        const class Table_GiacintaTable* Table;
        const Table_GiacintaChild1Table* Child1;
        const Table_GiacintaChild2Table* Child2;
    private: 
        static Table_GiacintaChild1Table Child1Empty;
        static Table_GiacintaChild2Table Child2Empty;
    public: 
        Table_GiacintaRow(CremaReader::irow& row, Table_GiacintaTable* table);
    friend static void Table_GiacintaSetChild1(Table_GiacintaRow* target, const std::vector<Table_GiacintaChild1Row*>& childs);
        static void Table_GiacintaSetChild2(Table_GiacintaRow* target, const std::vector<Table_GiacintaChild2Row*>& childs);
    };
    // Modifier: member
    // ModifiedDateTime: 2016-07-25 오전 9:14:35
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 10:44:42
    class Table_GiacintaTable : public CremaTable<Table_GiacintaRow>
    {
    public: 
        const Table_GiacintaChild1Table* Child1;
        const Table_GiacintaChild2Table* Child2;
    public: 
        Table_GiacintaTable();
        Table_GiacintaTable(CremaReader::itable& table);
    public: 
        virtual ~Table_GiacintaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_GiacintaRow* Find(Type3 reprehensible, short Gienah) const;
    };
    class Table_IantheChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        const class Table_IantheChild1Table* Table;
        const class Table_IantheRow* Parent;
    public: 
        Table_IantheChild1Row(CremaReader::irow& row, Table_IantheChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    // ContentsModifier: Admin_awesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 9:04:54
    class Table_IantheChild1Table : public CremaTable<Table_IantheChild1Row>
    {
    public: 
        Table_IantheChild1Table();
        Table_IantheChild1Table(CremaReader::itable& table);
        Table_IantheChild1Table(std::vector<class Table_IantheChild1Row*> rows);
    public: 
        virtual ~Table_IantheChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_IantheChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_IantheChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:37:47
        int outgrip;
        /// <summary>
        /// Tripp calvary amusement antinomian essay innards comforting Creighton sentential whammy reefer lender draftee Syracuse Juneau FIFO Arley
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        bool eruption;
        /// <summary>
        /// reckoning transferee efficient Mersey thunderstorm Karlee
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        Type_Attn busty;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        unsigned long long Glory;
        const class Table_IantheChild2Table* Table;
        const Table_IantheRow* Parent;
    public: 
        Table_IantheChild2Row(CremaReader::irow& row, Table_IantheChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오전 9:45:59
    // ContentsModifier: Admin_awesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 9:04:54
    class Table_IantheChild2Table : public CremaTable<Table_IantheChild2Row>
    {
    public: 
        Table_IantheChild2Table();
        Table_IantheChild2Table(CremaReader::itable& table);
        Table_IantheChild2Table(std::vector<class Table_IantheChild2Row*> rows);
    public: 
        virtual ~Table_IantheChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_IantheChild2Row* Find(int outgrip) const;
    };
    class Table_IantheChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// briny earning Danica Calgary extraction caseharden infirmity Kiele bouncily Devlen outstay
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long dampen;
        /// <summary>
        /// correction tremulous ingot
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long hearing;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned char bedsheets;
        /// <summary>
        /// beefiness indicative symmetrical overcomer sheen railroading scented bars nonperformance Perseid osteopathy Jule fierce phlox Regor metricize Kirghiz Argus orgasm
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        int Terri;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        bool Zagreb;
        /// <summary>
        /// Kelci freebie islander candidness glyceride interrogate Mariann Hertzsprung Wisconsin Harriot deja cryostat Photostat armlet adapted cavity
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        float reading;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        double leopardess;
        const class Table_IantheChild3Table* Table;
        const Table_IantheRow* Parent;
    public: 
        Table_IantheChild3Row(CremaReader::irow& row, Table_IantheChild3Table* table);
    };
    // Creator: Member_creel
    // CreatedDateTime: 2016-07-25 오전 9:40:44
    // Modifier: Member_creel
    // ModifiedDateTime: 2016-07-25 오전 9:40:45
    // ContentsModifier: Admin_awesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 9:04:54
    class Table_IantheChild3Table : public CremaTable<Table_IantheChild3Row>
    {
    public: 
        Table_IantheChild3Table();
        Table_IantheChild3Table(CremaReader::itable& table);
        Table_IantheChild3Table(std::vector<class Table_IantheChild3Row*> rows);
    public: 
        virtual ~Table_IantheChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_IantheChild3Row* Find(unsigned long long dampen, bool Zagreb) const;
    };
    class Table_IantheRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        const class Table_IantheTable* Table;
        const Table_IantheChild1Table* Child1;
        const Table_IantheChild2Table* Child2;
        const Table_IantheChild3Table* Child3;
    private: 
        static Table_IantheChild1Table Child1Empty;
        static Table_IantheChild2Table Child2Empty;
        static Table_IantheChild3Table Child3Empty;
    public: 
        Table_IantheRow(CremaReader::irow& row, Table_IantheTable* table);
    friend static void Table_IantheSetChild1(Table_IantheRow* target, const std::vector<Table_IantheChild1Row*>& childs);
        static void Table_IantheSetChild2(Table_IantheRow* target, const std::vector<Table_IantheChild2Row*>& childs);
        static void Table_IantheSetChild3(Table_IantheRow* target, const std::vector<Table_IantheChild3Row*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:03
    // ContentsModifier: Admin_awesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 9:04:54
    class Table_IantheTable : public CremaTable<Table_IantheRow>
    {
    public: 
        const Table_IantheChild1Table* Child1;
        const Table_IantheChild2Table* Child2;
        const Table_IantheChild3Table* Child3;
    public: 
        Table_IantheTable();
        Table_IantheTable(CremaReader::itable& table);
    public: 
        virtual ~Table_IantheTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_IantheRow* Find(double eviction) const;
    };
    class Table_bootprintsChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        /// <summary>
        /// Reedville howsoever wastewater
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:12:54
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        bool Larsen;
        /// <summary>
        /// heredity Anthe syllabus Hyannis Dunn lilliputian misdemeanant Gautama gregariousness spooky
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:12:54
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        unsigned int enforceable;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:12:54
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        double aid;
        const class Table_bootprintsChild1Table* Table;
        const class Table_bootprintsRow* Parent;
    public: 
        Table_bootprintsChild1Row(CremaReader::irow& row, Table_bootprintsChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오전 10:12:54
    // ContentsModifier: Admin_Aura
    // ContentsModifiedDateTime: 2016-07-25 오후 9:11:07
    class Table_bootprintsChild1Table : public CremaTable<Table_bootprintsChild1Row>
    {
    public: 
        Table_bootprintsChild1Table();
        Table_bootprintsChild1Table(CremaReader::itable& table);
        Table_bootprintsChild1Table(std::vector<class Table_bootprintsChild1Row*> rows);
    public: 
        virtual ~Table_bootprintsChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bootprintsChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_bootprintsChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:37:47
        int outgrip;
        /// <summary>
        /// Tripp calvary amusement antinomian essay innards comforting Creighton sentential whammy reefer lender draftee Syracuse Juneau FIFO Arley
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        bool eruption;
        /// <summary>
        /// reckoning transferee efficient Mersey thunderstorm Karlee
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        Type_Attn busty;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        unsigned long long Glory;
        const class Table_bootprintsChild2Table* Table;
        const Table_bootprintsRow* Parent;
    public: 
        Table_bootprintsChild2Row(CremaReader::irow& row, Table_bootprintsChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오전 9:45:59
    // ContentsModifier: Admin_Aura
    // ContentsModifiedDateTime: 2016-07-25 오후 9:11:07
    class Table_bootprintsChild2Table : public CremaTable<Table_bootprintsChild2Row>
    {
    public: 
        Table_bootprintsChild2Table();
        Table_bootprintsChild2Table(CremaReader::itable& table);
        Table_bootprintsChild2Table(std::vector<class Table_bootprintsChild2Row*> rows);
    public: 
        virtual ~Table_bootprintsChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bootprintsChild2Row* Find(int outgrip) const;
    };
    class Table_bootprintsChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// briny earning Danica Calgary extraction caseharden infirmity Kiele bouncily Devlen outstay
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long dampen;
        /// <summary>
        /// correction tremulous ingot
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:06:03
        unsigned long long amuse;
        /// <summary>
        /// incarnation youngster admissibly Lisha patchwork clamber divided
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:06:03
        unsigned char bedsheets;
        /// <summary>
        /// beefiness indicative symmetrical overcomer sheen railroading scented bars nonperformance Perseid osteopathy Jule fierce phlox Regor metricize Kirghiz Argus orgasm
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        int Terri;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        bool Zagreb;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        double leopardess;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오후 5:06:03
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:06:03
        std::string wrongheaded;
        const class Table_bootprintsChild3Table* Table;
        const Table_bootprintsRow* Parent;
    public: 
        Table_bootprintsChild3Row(CremaReader::irow& row, Table_bootprintsChild3Table* table);
    };
    // Creator: Member_creel
    // CreatedDateTime: 2016-07-25 오전 9:40:44
    // Modifier: Member_scuzzy
    // ModifiedDateTime: 2016-07-25 오후 5:06:03
    // ContentsModifier: Admin_Aura
    // ContentsModifiedDateTime: 2016-07-25 오후 9:11:07
    class Table_bootprintsChild3Table : public CremaTable<Table_bootprintsChild3Row>
    {
    public: 
        Table_bootprintsChild3Table();
        Table_bootprintsChild3Table(CremaReader::itable& table);
        Table_bootprintsChild3Table(std::vector<class Table_bootprintsChild3Row*> rows);
    public: 
        virtual ~Table_bootprintsChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bootprintsChild3Row* Find(unsigned long long dampen, bool Zagreb) const;
    };
    class Table_bootprintsRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 1:37:29
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 2:00:24
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:53:58
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:53:58
        char dammit;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 10:08:25
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 10:08:25
        unsigned long long camp;
        /// <summary>
        /// Oliy excreta decorum nodular Katrinka Eris position execration ovalness andiron rifle congruency derrick skylight painless starring Artemas Powers Dael
        /// </summary>
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 10:08:25
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 10:08:25
        unsigned long long Clint;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 1:37:29
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 1:37:29
        char marquee;
        /// <summary>
        /// postmistress RV croup commuter
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 1:37:29
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 2:00:24
        Type51 dunner;
        const class Table_bootprintsTable* Table;
        const Table_bootprintsChild1Table* Child1;
        const Table_bootprintsChild2Table* Child2;
        const Table_bootprintsChild3Table* Child3;
    private: 
        static Table_bootprintsChild1Table Child1Empty;
        static Table_bootprintsChild2Table Child2Empty;
        static Table_bootprintsChild3Table Child3Empty;
    public: 
        Table_bootprintsRow(CremaReader::irow& row, Table_bootprintsTable* table);
    friend static void Table_bootprintsSetChild1(Table_bootprintsRow* target, const std::vector<Table_bootprintsChild1Row*>& childs);
        static void Table_bootprintsSetChild2(Table_bootprintsRow* target, const std::vector<Table_bootprintsChild2Row*>& childs);
        static void Table_bootprintsSetChild3(Table_bootprintsRow* target, const std::vector<Table_bootprintsChild3Row*>& childs);
    };
    // Modifier: Member_deception
    // ModifiedDateTime: 2016-07-25 오후 2:00:24
    // ContentsModifier: Admin_Aura
    // ContentsModifiedDateTime: 2016-07-25 오후 9:11:07
    class Table_bootprintsTable : public CremaTable<Table_bootprintsRow>
    {
    public: 
        const Table_bootprintsChild1Table* Child1;
        const Table_bootprintsChild2Table* Child2;
        const Table_bootprintsChild3Table* Child3;
    public: 
        Table_bootprintsTable();
        Table_bootprintsTable(CremaReader::itable& table);
    public: 
        virtual ~Table_bootprintsTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_bootprintsRow* Find(double eviction) const;
    };
    class Table102Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:02
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:02
        double composedness;
        /// <summary>
        /// deuce reddest Rufus federated obsessional assert Faeroe hotpot dapper cantata rainproof bramble
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:02
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:02
        float presoaks;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:02
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오전 11:45:24
        Type51 Lodge;
        /// <summary>
        /// beatific reasoner mercifulness schmaltzy curtsy Vanzetti strikeout Oedipal fidelity mirthlessness Balboa absinthe sandstorm
        /// </summary>
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오전 11:45:24
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오전 11:45:24
        short Sumter;
        const class Table102Child1Table* Table;
        const class Table102Row* Parent;
    public: 
        Table102Child1Row(CremaReader::irow& row, Table102Child1Table* table);
    };
    // Creator: Admin_Marley
    // CreatedDateTime: 2016-07-25 오전 11:37:02
    // Modifier: Admin_energized
    // ModifiedDateTime: 2016-07-25 오전 11:45:24
    class Table102Child1Table : public CremaTable<Table102Child1Row>
    {
    public: 
        Table102Child1Table();
        Table102Child1Table(CremaReader::itable& table);
        Table102Child1Table(std::vector<class Table102Child1Row*> rows);
    public: 
        virtual ~Table102Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table102Child1Row* Find(double composedness) const;
    };
    class Table102Row : public CremaRow
    {
    public: 
        /// <summary>
        /// prettiness creepy hobo polity misuser ilium marmoreal aphelion authentic Tosca kludger hypothesis interpreted phenomenal einsteinium abeyance exactness
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        Type_Madison Mellisent;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        unsigned int Galileo;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        unsigned int Suzhou;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        long long Leanne;
        /// <summary>
        /// Mesa gin thresh megavolt mediumistic councilperson
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        Type11 add;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        float nodal;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        Type_livingness Malawi;
        /// <summary>
        /// accommodative epitomized neurological determinable fondler feller Felita perforce
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 11:30:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 11:30:55
        unsigned short maria;
        const class Table102Table* Table;
        const Table102Child1Table* Child1;
    private: 
        static Table102Child1Table Child1Empty;
    public: 
        Table102Row(CremaReader::irow& row, Table102Table* table);
    friend static void Table102SetChild1(Table102Row* target, const std::vector<Table102Child1Row*>& childs);
    };
    // Creator: Member_Dorine
    // CreatedDateTime: 2016-07-25 오전 11:30:55
    // Modifier: Member_Dorine
    // ModifiedDateTime: 2016-07-25 오전 11:30:55
    class Table102Table : public CremaTable<Table102Row>
    {
    public: 
        const Table102Child1Table* Child1;
    public: 
        Table102Table();
        Table102Table(CremaReader::itable& table);
    public: 
        virtual ~Table102Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table102Row* Find(Type_Madison Mellisent) const;
    };
    class Table164Row : public CremaRow
    {
    public: 
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 1:37:20
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 1:37:20
        Type_Dianna measles;
        /// <summary>
        /// Grata lapser superintendency outgrew antiwar bandeaux allegorical SSA overfill
        /// </summary>
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 1:37:20
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 1:37:20
        time_t weaving;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 1:37:20
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 1:37:20
        bool Alexandrina;
        // Creator: Member_semiautomatic
        // CreatedDateTime: 2016-07-25 오후 1:37:20
        // Modifier: Member_semiautomatic
        // ModifiedDateTime: 2016-07-25 오후 1:37:20
        Type56 stakeholder;
        const class Table164Table* Table;
    public: 
        Table164Row(CremaReader::irow& row, Table164Table* table);
    };
    // Creator: Member_semiautomatic
    // CreatedDateTime: 2016-07-25 오후 1:37:20
    // Modifier: Member_semiautomatic
    // ModifiedDateTime: 2016-07-25 오후 1:37:20
    // ContentsModifier: Admin_getup
    // ContentsModifiedDateTime: 2016-07-25 오후 6:26:33
    class Table164Table : public CremaTable<Table164Row>
    {
    public: 
        Table164Table();
        Table164Table(CremaReader::itable& table);
    public: 
        virtual ~Table164Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table164Row* Find(Type_Dianna measles, time_t weaving) const;
    };
    class Table120Row : public CremaRow
    {
    public: 
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        int demagogy;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        unsigned long long promulgate;
        /// <summary>
        /// symphonists exposition LyX baseless clandestineness kirsch catafalque bottleneck codicil super anastomosis
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        int valley;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        time_t photojournalist;
        /// <summary>
        /// leftism uttermost barrenness Eyde avoidable sunglass ATM carbonyl Caleb hen Pomona
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        int Elizabet;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        short Antony;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 11:48:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 11:48:41
        unsigned int obs;
        const class Table120Table* Table;
    public: 
        Table120Row(CremaReader::irow& row, Table120Table* table);
    };
    // Creator: Admin_truck
    // CreatedDateTime: 2016-07-25 오전 11:48:41
    // Modifier: Admin_truck
    // ModifiedDateTime: 2016-07-25 오전 11:48:41
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오전 11:55:21
    class Table120Table : public CremaTable<Table120Row>
    {
    public: 
        Table120Table();
        Table120Table(CremaReader::itable& table);
    public: 
        virtual ~Table120Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table120Row* Find(int demagogy) const;
    };
    class Table158Child1Row : public CremaRow
    {
    public: 
        // Creator: Member_Simenon
        // CreatedDateTime: 2016-07-25 오후 2:05:09
        // Modifier: Member_Simenon
        // ModifiedDateTime: 2016-07-25 오후 2:05:09
        int Fragonard;
        const class Table158Child1Table* Table;
        const class Table158Row* Parent;
    public: 
        Table158Child1Row(CremaReader::irow& row, Table158Child1Table* table);
    };
    // Creator: Member_Simenon
    // CreatedDateTime: 2016-07-25 오후 2:05:09
    // Modifier: Member_Simenon
    // ModifiedDateTime: 2016-07-25 오후 2:05:09
    class Table158Child1Table : public CremaTable<Table158Child1Row>
    {
    public: 
        Table158Child1Table();
        Table158Child1Table(CremaReader::itable& table);
        Table158Child1Table(std::vector<class Table158Child1Row*> rows);
    public: 
        virtual ~Table158Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table158Child1Row* Find(int Fragonard) const;
    };
    class Table158Row : public CremaRow
    {
    public: 
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 1:28:15
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 1:28:15
        Type_Attn differential;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 1:28:15
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 1:28:15
        char coworker;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 1:28:15
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 1:28:15
        short polisher;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 1:28:15
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 1:28:15
        int Kentucky;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 1:28:15
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 1:28:15
        Type3 Kaleena;
        const class Table158Table* Table;
        const Table158Child1Table* Child1;
    private: 
        static Table158Child1Table Child1Empty;
    public: 
        Table158Row(CremaReader::irow& row, Table158Table* table);
    friend static void Table158SetChild1(Table158Row* target, const std::vector<Table158Child1Row*>& childs);
    };
    // Creator: Member_Maye
    // CreatedDateTime: 2016-07-25 오후 1:28:15
    // Modifier: Member_Maye
    // ModifiedDateTime: 2016-07-25 오후 1:28:15
    class Table158Table : public CremaTable<Table158Row>
    {
    public: 
        const Table158Child1Table* Child1;
    public: 
        Table158Table();
        Table158Table(CremaReader::itable& table);
    public: 
        virtual ~Table158Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table158Row* Find(Type_Attn differential) const;
    };
    class Table_gynecologicChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        time_t humphs;
        /// <summary>
        /// rappelling currentness carnelian Mitsubishi
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        int beggarliness;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        Type_ultrasonic Judea;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        char aerobically;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        Type_rennet shredder;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        std::string Bresenham;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 12:15:52
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 12:15:52
        Type42 bucksaw;
        const class Table_gynecologicChild1Table* Table;
        const class Table_gynecologicRow* Parent;
    public: 
        Table_gynecologicChild1Row(CremaReader::irow& row, Table_gynecologicChild1Table* table);
    };
    // Creator: Member_lender
    // CreatedDateTime: 2016-07-25 오후 12:15:52
    // Modifier: Member_lender
    // ModifiedDateTime: 2016-07-25 오후 12:15:52
    // ContentsModifier: Admin_truck
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:38
    class Table_gynecologicChild1Table : public CremaTable<Table_gynecologicChild1Row>
    {
    public: 
        Table_gynecologicChild1Table();
        Table_gynecologicChild1Table(CremaReader::itable& table);
        Table_gynecologicChild1Table(std::vector<class Table_gynecologicChild1Row*> rows);
    public: 
        virtual ~Table_gynecologicChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_gynecologicChild1Row* Find(time_t humphs) const;
    };
    class Table_gynecologicRow : public CremaRow
    {
    public: 
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        int Greer;
        /// <summary>
        /// Mimi strengthener sedge condole wordage Charlottetown Garreth snapshot Friedman Lawry theoretics Bi ombudsmen firearm cagier pratfall illume shakably
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        double Celestine;
        /// <summary>
        /// Aler Laurice backslider Langmuir cladding Waverly enfold gemologist lengthener already Grimaldi grate abjurer
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        double hooter;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        std::string postulate;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        char jackhammer;
        /// <summary>
        /// Nathalie queues Bulawayo eulogizer rectory famine ideological Bolivian Edgar Scriabin
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        double lactic;
        /// <summary>
        /// temporizings Gallard fibber wrongfulness skycap gleed appraised impassioned HS Norwegian knurl Ranice laconically
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        Type8 swordsmen;
        const class Table_gynecologicTable* Table;
        const Table_gynecologicChild1Table* Child1;
    private: 
        static Table_gynecologicChild1Table Child1Empty;
    public: 
        Table_gynecologicRow(CremaReader::irow& row, Table_gynecologicTable* table);
    friend static void Table_gynecologicSetChild1(Table_gynecologicRow* target, const std::vector<Table_gynecologicChild1Row*>& childs);
    };
    // Modifier: Admin_Marley
    // ModifiedDateTime: 2016-07-25 오전 11:37:20
    // ContentsModifier: Admin_truck
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:38
    class Table_gynecologicTable : public CremaTable<Table_gynecologicRow>
    {
    public: 
        const Table_gynecologicChild1Table* Child1;
    public: 
        Table_gynecologicTable();
        Table_gynecologicTable(CremaReader::itable& table);
    public: 
        virtual ~Table_gynecologicTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_gynecologicRow* Find(int Greer) const;
    };
    class Table169Row : public CremaRow
    {
    public: 
        // Creator: Member_dyspepsia
        // CreatedDateTime: 2016-07-25 오후 2:04:37
        // Modifier: Member_dyspepsia
        // ModifiedDateTime: 2016-07-25 오후 2:04:37
        bool toque;
        /// <summary>
        /// ancillary hokier admitted enumeration gerontologist
        /// </summary>
        // Creator: Member_dyspepsia
        // CreatedDateTime: 2016-07-25 오후 2:04:37
        // Modifier: Member_dyspepsia
        // ModifiedDateTime: 2016-07-25 오후 2:04:37
        float speller;
        const class Table169Table* Table;
    public: 
        Table169Row(CremaReader::irow& row, Table169Table* table);
    };
    // Creator: Member_dyspepsia
    // CreatedDateTime: 2016-07-25 오후 2:04:37
    // Modifier: Member_dyspepsia
    // ModifiedDateTime: 2016-07-25 오후 2:04:37
    // ContentsModifier: Member_sportiness
    // ContentsModifiedDateTime: 2016-07-25 오후 6:45:23
    class Table169Table : public CremaTable<Table169Row>
    {
    public: 
        Table169Table();
        Table169Table(CremaReader::itable& table);
    public: 
        virtual ~Table169Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table169Row* Find(bool toque) const;
    };
    class Table6Child_frostbiteRow : public CremaRow
    {
    public: 
        /// <summary>
        /// rotgut reactant obstetrical emetic flung Tadeas brute curiae Velma Christian
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:24
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 2:32:27
        char Olag;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 2:32:27
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 2:32:27
        Type_nephew taverner;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 2:32:27
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 2:32:27
        char cowl;
        /// <summary>
        /// musicology Mozambican spitfire austere tippy worrywart spicule methodism
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 2:32:27
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 2:32:27
        Type23 magnetite;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오후 2:32:27
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오후 2:32:27
        char acceptableness;
        const class Table6Child_frostbiteTable* Table;
        const class Table6Row* Parent;
    public: 
        Table6Child_frostbiteRow(CremaReader::irow& row, Table6Child_frostbiteTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:24
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오후 2:32:27
    class Table6Child_frostbiteTable : public CremaTable<Table6Child_frostbiteRow>
    {
    public: 
        Table6Child_frostbiteTable();
        Table6Child_frostbiteTable(CremaReader::itable& table);
        Table6Child_frostbiteTable(std::vector<class Table6Child_frostbiteRow*> rows);
    public: 
        virtual ~Table6Child_frostbiteTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table6Child_frostbiteRow* Find(char Olag) const;
    };
    class Table6Child_interceptorRow : public CremaRow
    {
    public: 
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        float Antoinette;
        /// <summary>
        /// clap taffy catwalk Andorra Charmane fret overpass damask Telex recurrent grievance greaser searcher poverty Haily ingrate tingle trenchermen
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        Type36 Neron;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        bool Esther;
        /// <summary>
        /// granulate
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        Type24 antipasto;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        double archduchess;
        /// <summary>
        /// horrify bafflement
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        std::string imperviousness;
        /// <summary>
        /// baluster sterilizes Ferguson yarmulke awoken Dorree Abbey fiber nobility ogive explosion Abe regressive antipollution strictness
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오후 12:34:12
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오후 12:34:12
        std::string crystallographic;
        const class Table6Child_interceptorTable* Table;
        const Table6Row* Parent;
    public: 
        Table6Child_interceptorRow(CremaReader::irow& row, Table6Child_interceptorTable* table);
    };
    // Creator: Member_creel
    // CreatedDateTime: 2016-07-25 오후 12:34:12
    // Modifier: Member_creel
    // ModifiedDateTime: 2016-07-25 오후 12:34:12
    class Table6Child_interceptorTable : public CremaTable<Table6Child_interceptorRow>
    {
    public: 
        Table6Child_interceptorTable();
        Table6Child_interceptorTable(CremaReader::itable& table);
        Table6Child_interceptorTable(std::vector<class Table6Child_interceptorRow*> rows);
    public: 
        virtual ~Table6Child_interceptorTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table6Child_interceptorRow* Find(float Antoinette, Type24 antipasto) const;
    };
    class Table6Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:07
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:07
        Type3 reprehensible;
        const class Table6Table* Table;
        const Table6Child_frostbiteTable* Child_frostbite;
        const Table6Child_interceptorTable* Child_interceptor;
    private: 
        static Table6Child_frostbiteTable Child_frostbiteEmpty;
        static Table6Child_interceptorTable Child_interceptorEmpty;
    public: 
        Table6Row(CremaReader::irow& row, Table6Table* table);
    friend static void Table6SetChild_frostbite(Table6Row* target, const std::vector<Table6Child_frostbiteRow*>& childs);
        static void Table6SetChild_interceptor(Table6Row* target, const std::vector<Table6Child_interceptorRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:07
    class Table6Table : public CremaTable<Table6Row>
    {
    public: 
        const Table6Child_frostbiteTable* Child_frostbite;
        const Table6Child_interceptorTable* Child_interceptor;
    public: 
        Table6Table();
        Table6Table(CremaReader::itable& table);
    public: 
        virtual ~Table6Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table6Row* Find(Type3 reprehensible) const;
    };
    class Table172Row : public CremaRow
    {
    public: 
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 2:05:51
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 2:05:51
        unsigned long long Chile;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 2:05:51
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 2:05:51
        std::string triumphant;
        const class Table172Table* Table;
    public: 
        Table172Row(CremaReader::irow& row, Table172Table* table);
    };
    // Creator: Admin_signalization
    // CreatedDateTime: 2016-07-25 오후 2:05:51
    // Modifier: Admin_signalization
    // ModifiedDateTime: 2016-07-25 오후 2:05:51
    // ContentsModifier: Admin_reggae
    // ContentsModifiedDateTime: 2016-07-25 오후 3:35:08
    class Table172Table : public CremaTable<Table172Row>
    {
    public: 
        Table172Table();
        Table172Table(CremaReader::itable& table);
    public: 
        virtual ~Table172Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table172Row* Find(unsigned long long Chile) const;
    };
    class Table_computingRow : public CremaRow
    {
    public: 
        /// <summary>
        /// rubberize swayer impugner arranging Cambridge brainwashing sanitizer
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:28:14
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:28:14
        int nosh;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:28:14
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:28:14
        Type_Arlan Dee;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:28:14
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:28:14
        bool majesty;
        const class Table_computingTable* Table;
    public: 
        Table_computingRow(CremaReader::irow& row, Table_computingTable* table);
    };
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오전 11:28:14
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 8:17:55
    class Table_computingTable : public CremaTable<Table_computingRow>
    {
    public: 
        Table_computingTable();
        Table_computingTable(CremaReader::itable& table);
    public: 
        virtual ~Table_computingTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_computingRow* Find(int nosh) const;
    };
    class Table124Row : public CremaRow
    {
    public: 
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 11:56:21
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 1:26:43
        unsigned char suspensive;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 1:26:43
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 1:26:43
        time_t kidding;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 1:26:43
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 1:26:43
        double elicit;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오후 1:26:43
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오후 1:26:43
        time_t dug;
        const class Table124Table* Table;
    public: 
        Table124Row(CremaReader::irow& row, Table124Table* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오전 11:56:21
    // Modifier: Member_lender
    // ModifiedDateTime: 2016-07-25 오후 1:26:43
    // ContentsModifier: Admin_deliriousness
    // ContentsModifiedDateTime: 2016-07-25 오후 8:38:54
    class Table124Table : public CremaTable<Table124Row>
    {
    public: 
        Table124Table();
        Table124Table(CremaReader::itable& table);
    public: 
        virtual ~Table124Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table124Row* Find(unsigned char suspensive) const;
    };
    class Table106Row : public CremaRow
    {
    public: 
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오전 11:35:42
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오전 11:35:42
        long long neighborliness;
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오전 11:35:42
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오전 11:35:42
        std::string axiomatize;
        const class Table106Table* Table;
    public: 
        Table106Row(CremaReader::irow& row, Table106Table* table);
    };
    // Creator: Admin_cofferdam
    // CreatedDateTime: 2016-07-25 오전 11:35:42
    // Modifier: Admin_cofferdam
    // ModifiedDateTime: 2016-07-25 오전 11:35:42
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 8:57:02
    class Table106Table : public CremaTable<Table106Row>
    {
    public: 
        Table106Table();
        Table106Table(CremaReader::itable& table);
    public: 
        virtual ~Table106Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table106Row* Find(long long neighborliness) const;
    };
    class Table23Row : public CremaRow
    {
    public: 
        /// <summary>
        /// scaremonger cowpuncher skip rhenium Foster
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:21:46
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오전 11:48:02
        int Giff;
        /// <summary>
        /// miscreant monotonicity insurer roadhouse contrariness semiprecious interchangeableness Congregationalist mercantile
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:21:46
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오전 11:48:02
        std::string Cardenas;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:21:46
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:10:59
        time_t quizzing;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:10:59
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:10:59
        double carryover;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:10:59
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:10:59
        bool mangy;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:10:59
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:10:59
        Type_HeraclitusDeletable scaffolding;
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오전 11:48:02
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오전 11:48:02
        unsigned char Janeczka;
        const class Table23Table* Table;
    public: 
        Table23Row(CremaReader::irow& row, Table23Table* table);
    };
    // Creator: Member_schoolchild
    // CreatedDateTime: 2016-07-25 오전 9:21:46
    // Modifier: Admin_toe
    // ModifiedDateTime: 2016-07-25 오전 11:48:02
    // ContentsModifier: Member_body
    // ContentsModifiedDateTime: 2016-07-25 오후 6:13:23
    class Table23Table : public CremaTable<Table23Row>
    {
    public: 
        Table23Table();
        Table23Table(CremaReader::itable& table);
    public: 
        virtual ~Table23Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table23Row* Find(int Giff, time_t quizzing) const;
    };
    class Table60Row : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 10:17:46
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 10:17:46
        Type_HeraclitusDeletable ratted;
        /// <summary>
        /// Colbert Carty strongman gaiter transitiveness magical gash
        /// </summary>
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 10:17:46
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오전 11:57:21
        double recycle;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 10:17:46
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 10:17:46
        Type15 swill;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 10:17:46
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 10:17:46
        unsigned short roadwork;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 10:17:46
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 10:17:46
        unsigned short Platonism;
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오전 11:57:21
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오전 11:57:21
        short seaworthy;
        /// <summary>
        /// perinea oarlock Rommel microanalysis radioactivity Hymie formatting
        /// </summary>
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오전 11:57:21
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오전 11:57:21
        short underexposure;
        // Creator: Admin_cofferdam
        // CreatedDateTime: 2016-07-25 오전 11:57:21
        // Modifier: Admin_cofferdam
        // ModifiedDateTime: 2016-07-25 오전 11:57:21
        Type15 amniotic;
        const class Table60Table* Table;
    public: 
        Table60Row(CremaReader::irow& row, Table60Table* table);
    };
    // Creator: Admin_titted
    // CreatedDateTime: 2016-07-25 오전 10:17:46
    // Modifier: Admin_cofferdam
    // ModifiedDateTime: 2016-07-25 오전 11:57:21
    // ContentsModifier: Admin_Russian
    // ContentsModifiedDateTime: 2016-07-25 오전 11:24:24
    class Table60Table : public CremaTable<Table60Row>
    {
    public: 
        Table60Table();
        Table60Table(CremaReader::itable& table);
    public: 
        virtual ~Table60Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table60Row* Find(Type_HeraclitusDeletable ratted, double recycle) const;
    };
    class Table_KitChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        const class Table_KitChild1Table* Table;
        const class Table_KitRow* Parent;
    public: 
        Table_KitChild1Row(CremaReader::irow& row, Table_KitChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    // ContentsModifier: Admin_rancidity
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:02
    class Table_KitChild1Table : public CremaTable<Table_KitChild1Row>
    {
    public: 
        Table_KitChild1Table();
        Table_KitChild1Table(CremaReader::itable& table);
        Table_KitChild1Table(std::vector<class Table_KitChild1Row*> rows);
    public: 
        virtual ~Table_KitChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_KitChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_KitChild_newsprintRow : public CremaRow
    {
    public: 
        /// <summary>
        /// allocative lobotomize Orwell horsedom Usenet campesinos Eolanda provincial Giralda dwarfish interaction psychopathology posterior obtuse balladeer
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        int outgrip;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        unsigned char condominium;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t guiltlessness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool splash;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool entrapping;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t Hamnet;
        const class Table_KitChild_newsprintTable* Table;
        const Table_KitRow* Parent;
    public: 
        Table_KitChild_newsprintRow(CremaReader::irow& row, Table_KitChild_newsprintTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오전 9:21:09
    // ContentsModifier: Admin_rancidity
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:02
    class Table_KitChild_newsprintTable : public CremaTable<Table_KitChild_newsprintRow>
    {
    public: 
        Table_KitChild_newsprintTable();
        Table_KitChild_newsprintTable(CremaReader::itable& table);
        Table_KitChild_newsprintTable(std::vector<class Table_KitChild_newsprintRow*> rows);
    public: 
        virtual ~Table_KitChild_newsprintTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_KitChild_newsprintRow* Find(int outgrip) const;
    };
    class Table_KitChild_nevusRow : public CremaRow
    {
    public: 
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        unsigned char repetition;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        std::string phonetician;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        std::string Nanni;
        /// <summary>
        /// Bernardino Armour Aventine drainboard Hedy steadiness Ionian circumnavigation pauperism palatine negligible souse urinary
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        bool monographs;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 9:26:33
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        long long humus;
        const class Table_KitChild_nevusTable* Table;
        const Table_KitRow* Parent;
    public: 
        Table_KitChild_nevusRow(CremaReader::irow& row, Table_KitChild_nevusTable* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오전 9:25:31
    // Modifier: Member_Cristy
    // ModifiedDateTime: 2016-07-25 오전 9:26:33
    // ContentsModifier: Admin_rancidity
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:02
    class Table_KitChild_nevusTable : public CremaTable<Table_KitChild_nevusRow>
    {
    public: 
        Table_KitChild_nevusTable();
        Table_KitChild_nevusTable(CremaReader::itable& table);
        Table_KitChild_nevusTable(std::vector<class Table_KitChild_nevusRow*> rows);
    public: 
        virtual ~Table_KitChild_nevusTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_KitChild_nevusRow* Find(unsigned char repetition) const;
    };
    class Table_KitChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// massive tapping symbiotic hammock prohibitionist flippable subsidizer steamboat diabolism ambit
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        long long vaginae;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        double obvious;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        unsigned int sachet;
        /// <summary>
        /// Martian fatigue conceivable clammily caftan chalet flashy fantail gemology quadrennium Gerda bewilder Bamby feasibility tanbark
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        Type11 underpayment;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        char axle;
        const class Table_KitChild3Table* Table;
        const Table_KitRow* Parent;
    public: 
        Table_KitChild3Row(CremaReader::irow& row, Table_KitChild3Table* table);
    };
    // Creator: Member_Clary
    // CreatedDateTime: 2016-07-25 오전 10:48:30
    // Modifier: Member_Clary
    // ModifiedDateTime: 2016-07-25 오전 10:48:30
    // ContentsModifier: Admin_rancidity
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:02
    class Table_KitChild3Table : public CremaTable<Table_KitChild3Row>
    {
    public: 
        Table_KitChild3Table();
        Table_KitChild3Table(CremaReader::itable& table);
        Table_KitChild3Table(std::vector<class Table_KitChild3Row*> rows);
    public: 
        virtual ~Table_KitChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_KitChild3Row* Find(long long vaginae) const;
    };
    class Table_KitChild2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// gadder Bruno foolishness signore puddle Alhambra Siva Josey rowdy coconut buskin conciliar Jacquette defoliant dowse urge charbroil
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        float Enos;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        double pervasive;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        bool lubricator;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        std::string hallmark;
        const class Table_KitChild2Table* Table;
        const Table_KitRow* Parent;
    public: 
        Table_KitChild2Row(CremaReader::irow& row, Table_KitChild2Table* table);
    };
    // Creator: Member_pacifist
    // CreatedDateTime: 2016-07-25 오후 2:35:01
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오후 2:35:02
    // ContentsModifier: Admin_rancidity
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:02
    class Table_KitChild2Table : public CremaTable<Table_KitChild2Row>
    {
    public: 
        Table_KitChild2Table();
        Table_KitChild2Table(CremaReader::itable& table);
        Table_KitChild2Table(std::vector<class Table_KitChild2Row*> rows);
    public: 
        virtual ~Table_KitChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_KitChild2Row* Find(float Enos, const std::string& hallmark) const;
    };
    class Table_KitRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        const class Table_KitTable* Table;
        const Table_KitChild1Table* Child1;
        const Table_KitChild_newsprintTable* Child_newsprint;
        const Table_KitChild_nevusTable* Child_nevus;
        const Table_KitChild3Table* Child3;
        const Table_KitChild2Table* Child2;
    private: 
        static Table_KitChild1Table Child1Empty;
        static Table_KitChild_newsprintTable Child_newsprintEmpty;
        static Table_KitChild_nevusTable Child_nevusEmpty;
        static Table_KitChild3Table Child3Empty;
        static Table_KitChild2Table Child2Empty;
    public: 
        Table_KitRow(CremaReader::irow& row, Table_KitTable* table);
    friend static void Table_KitSetChild1(Table_KitRow* target, const std::vector<Table_KitChild1Row*>& childs);
        static void Table_KitSetChild_newsprint(Table_KitRow* target, const std::vector<Table_KitChild_newsprintRow*>& childs);
        static void Table_KitSetChild_nevus(Table_KitRow* target, const std::vector<Table_KitChild_nevusRow*>& childs);
        static void Table_KitSetChild3(Table_KitRow* target, const std::vector<Table_KitChild3Row*>& childs);
        static void Table_KitSetChild2(Table_KitRow* target, const std::vector<Table_KitChild2Row*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:03
    // ContentsModifier: Admin_rancidity
    // ContentsModifiedDateTime: 2016-07-25 오후 10:19:02
    class Table_KitTable : public CremaTable<Table_KitRow>
    {
    public: 
        const Table_KitChild1Table* Child1;
        const Table_KitChild_newsprintTable* Child_newsprint;
        const Table_KitChild_nevusTable* Child_nevus;
        const Table_KitChild3Table* Child3;
        const Table_KitChild2Table* Child2;
    public: 
        Table_KitTable();
        Table_KitTable(CremaReader::itable& table);
    public: 
        virtual ~Table_KitTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_KitRow* Find(double eviction) const;
    };
    class Table189Row : public CremaRow
    {
    public: 
        /// <summary>
        /// smocking luscious role Stevy dustiness milkshake concupiscent punctiliousness conqueror vestryman breadcrumb pitiably Budapest
        /// </summary>
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        Type_salesmen spiritualist;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        Type_guttering Atari;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        long long WI;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        double undiscriminating;
        /// <summary>
        /// plughole Atria aeolian japanner Forest slurred whizzbang hydrometer Dud crotch friend passport Amity destructiveness Jones anywhere
        /// </summary>
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        long long archaist;
        /// <summary>
        /// gnat dueness Ur emergence brigantine
        /// </summary>
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        time_t cubic;
        /// <summary>
        /// reactionary underrate battleship erection pleasant Mercator opposer tomcat analgesia donor cavalryman stripped impregnation
        /// </summary>
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        time_t Roxanna;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 4:48:56
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 4:48:56
        bool emeritus;
        const class Table189Table* Table;
    public: 
        Table189Row(CremaReader::irow& row, Table189Table* table);
    };
    // Creator: Admin_cenotaphs
    // CreatedDateTime: 2016-07-25 오후 4:48:56
    // Modifier: Admin_cenotaphs
    // ModifiedDateTime: 2016-07-25 오후 4:48:56
    class Table189Table : public CremaTable<Table189Row>
    {
    public: 
        Table189Table();
        Table189Table(CremaReader::itable& table);
    public: 
        virtual ~Table189Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table189Row* Find(Type_salesmen spiritualist) const;
    };
    class Table105Child_fatalisticallyRow : public CremaRow
    {
    public: 
        /// <summary>
        /// legged Shadow logistic Mesozoic Lisette falsie Friederike Prissie mannerism Typhon stepper vestrymen federated Helaina Eloy Nani hangdog Elberta wingback
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 11:54:43
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 11:54:43
        char relater;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 11:54:43
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 11:54:43
        float cabinetry;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 11:54:43
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 11:54:43
        unsigned short prioritize;
        /// <summary>
        /// intertask triplet
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 11:54:43
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 11:54:43
        int pugilist;
        const class Table105Child_fatalisticallyTable* Table;
        const class Table105Row* Parent;
    public: 
        Table105Child_fatalisticallyRow(CremaReader::irow& row, Table105Child_fatalisticallyTable* table);
    };
    // Creator: Admin_distinctiveness
    // CreatedDateTime: 2016-07-25 오전 11:54:43
    // Modifier: Admin_distinctiveness
    // ModifiedDateTime: 2016-07-25 오전 11:54:43
    // ContentsModifier: Member_deception
    // ContentsModifiedDateTime: 2016-07-25 오후 10:43:40
    class Table105Child_fatalisticallyTable : public CremaTable<Table105Child_fatalisticallyRow>
    {
    public: 
        Table105Child_fatalisticallyTable();
        Table105Child_fatalisticallyTable(CremaReader::itable& table);
        Table105Child_fatalisticallyTable(std::vector<class Table105Child_fatalisticallyRow*> rows);
    public: 
        virtual ~Table105Child_fatalisticallyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table105Child_fatalisticallyRow* Find(char relater) const;
    };
    class Table105Row : public CremaRow
    {
    public: 
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 11:34:22
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 11:34:22
        float Killebrew;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 11:34:22
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 11:34:22
        unsigned short guillotine;
        /// <summary>
        /// expel Franklyn luncher momenta buckram hedgehopping rurality bandoleer eyeshadow subj Stieglitz Zappa cogging mannerism
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 11:34:22
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 11:34:22
        char partake;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 11:34:22
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 11:34:22
        unsigned int Rafael;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 11:34:22
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 11:34:22
        unsigned short lated;
        const class Table105Table* Table;
        const Table105Child_fatalisticallyTable* Child_fatalistically;
    private: 
        static Table105Child_fatalisticallyTable Child_fatalisticallyEmpty;
    public: 
        Table105Row(CremaReader::irow& row, Table105Table* table);
    friend static void Table105SetChild_fatalistically(Table105Row* target, const std::vector<Table105Child_fatalisticallyRow*>& childs);
    };
    // Creator: Member_Tanhya
    // CreatedDateTime: 2016-07-25 오전 11:34:22
    // Modifier: Member_Tanhya
    // ModifiedDateTime: 2016-07-25 오전 11:34:22
    // ContentsModifier: Member_deception
    // ContentsModifiedDateTime: 2016-07-25 오후 10:43:40
    class Table105Table : public CremaTable<Table105Row>
    {
    public: 
        const Table105Child_fatalisticallyTable* Child_fatalistically;
    public: 
        Table105Table();
        Table105Table(CremaReader::itable& table);
    public: 
        virtual ~Table105Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table105Row* Find(float Killebrew) const;
    };
    class Table15Row : public CremaRow
    {
    public: 
        /// <summary>
        /// yawl
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 3:47:42
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int rattling;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int deleterious;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        long long Dalmatian;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 3:47:42
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 3:47:42
        double sprang;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 3:47:42
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 3:47:42
        float scruffy;
        const class Table15Table* Table;
    public: 
        Table15Row(CremaReader::irow& row, Table15Table* table);
    };
    // Creator: Member_budgie
    // CreatedDateTime: 2016-07-25 오전 9:14:09
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오후 3:47:42
    // ContentsModifier: Admin_Lisetta
    // ContentsModifiedDateTime: 2016-07-25 오후 4:51:45
    class Table15Table : public CremaTable<Table15Row>
    {
    public: 
        Table15Table();
        Table15Table(CremaReader::itable& table);
    public: 
        virtual ~Table15Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table15Row* Find(unsigned int snapback) const;
    };
    class Table16Child1Row : public CremaRow
    {
    public: 
        // Creator: Admin_motive
        // CreatedDateTime: 2016-07-25 오전 9:38:27
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오전 9:38:27
        unsigned long long showbiz;
        // Creator: Admin_motive
        // CreatedDateTime: 2016-07-25 오전 9:38:27
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오전 9:38:27
        bool beadle;
        const class Table16Child1Table* Table;
        const class Table16Row* Parent;
    public: 
        Table16Child1Row(CremaReader::irow& row, Table16Child1Table* table);
    };
    // Creator: Admin_motive
    // CreatedDateTime: 2016-07-25 오전 9:38:27
    // Modifier: Admin_motive
    // ModifiedDateTime: 2016-07-25 오전 9:38:27
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오후 4:59:13
    class Table16Child1Table : public CremaTable<Table16Child1Row>
    {
    public: 
        Table16Child1Table();
        Table16Child1Table(CremaReader::itable& table);
        Table16Child1Table(std::vector<class Table16Child1Row*> rows);
    public: 
        virtual ~Table16Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table16Child1Row* Find(unsigned long long showbiz) const;
    };
    class Table16Child2Row : public CremaRow
    {
    public: 
        // Creator: Member_immunology
        // CreatedDateTime: 2016-07-25 오전 11:51:53
        // Modifier: Member_immunology
        // ModifiedDateTime: 2016-07-25 오전 11:51:53
        int contrapositive;
        // Creator: Member_immunology
        // CreatedDateTime: 2016-07-25 오전 11:51:53
        // Modifier: Member_immunology
        // ModifiedDateTime: 2016-07-25 오전 11:51:53
        Type_hyperboloidal chelation;
        // Creator: Member_immunology
        // CreatedDateTime: 2016-07-25 오전 11:51:53
        // Modifier: Member_immunology
        // ModifiedDateTime: 2016-07-25 오전 11:51:53
        long long Candlewick;
        // Creator: Member_immunology
        // CreatedDateTime: 2016-07-25 오전 11:51:53
        // Modifier: Member_immunology
        // ModifiedDateTime: 2016-07-25 오전 11:51:53
        Type36 hex;
        /// <summary>
        /// Marsh Jule burned doorkeeper
        /// </summary>
        // Creator: Member_immunology
        // CreatedDateTime: 2016-07-25 오전 11:51:53
        // Modifier: Member_immunology
        // ModifiedDateTime: 2016-07-25 오전 11:51:53
        bool sanctimony;
        // Creator: Member_immunology
        // CreatedDateTime: 2016-07-25 오전 11:51:53
        // Modifier: Member_immunology
        // ModifiedDateTime: 2016-07-25 오전 11:51:53
        Type50 verminous;
        const class Table16Child2Table* Table;
        const Table16Row* Parent;
    public: 
        Table16Child2Row(CremaReader::irow& row, Table16Child2Table* table);
    };
    // Creator: Member_immunology
    // CreatedDateTime: 2016-07-25 오전 11:51:52
    // Modifier: Member_immunology
    // ModifiedDateTime: 2016-07-25 오전 11:51:53
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오후 4:59:13
    class Table16Child2Table : public CremaTable<Table16Child2Row>
    {
    public: 
        Table16Child2Table();
        Table16Child2Table(CremaReader::itable& table);
        Table16Child2Table(std::vector<class Table16Child2Row*> rows);
    public: 
        virtual ~Table16Child2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table16Child2Row* Find(int contrapositive) const;
    };
    class Table16Row : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:15:02
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:15:02
        double Waugh;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:15:02
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:15:02
        unsigned int livery;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:15:02
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:15:02
        double Bruxelles;
        const class Table16Table* Table;
        const Table16Child1Table* Child1;
        const Table16Child2Table* Child2;
    private: 
        static Table16Child1Table Child1Empty;
        static Table16Child2Table Child2Empty;
    public: 
        Table16Row(CremaReader::irow& row, Table16Table* table);
    friend static void Table16SetChild1(Table16Row* target, const std::vector<Table16Child1Row*>& childs);
        static void Table16SetChild2(Table16Row* target, const std::vector<Table16Child2Row*>& childs);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오전 9:15:02
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오전 9:15:02
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오후 4:59:13
    class Table16Table : public CremaTable<Table16Row>
    {
    public: 
        const Table16Child1Table* Child1;
        const Table16Child2Table* Child2;
    public: 
        Table16Table();
        Table16Table(CremaReader::itable& table);
    public: 
        virtual ~Table16Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table16Row* Find(double Waugh) const;
    };
    class Table32Row : public CremaRow
    {
    public: 
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:31:55
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오후 2:24:20
        unsigned int Darren;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:31:55
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:31:55
        Type_occlusionDeletable treasonous;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오후 2:24:20
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오후 2:24:20
        Type_Madison overseen;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오후 2:24:20
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오후 2:24:20
        unsigned int eclogue;
        const class Table32Table* Table;
    public: 
        Table32Row(CremaReader::irow& row, Table32Table* table);
    };
    // Creator: Member_noncredit
    // CreatedDateTime: 2016-07-25 오전 9:31:55
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오후 2:24:20
    // ContentsModifier: member
    // ContentsModifiedDateTime: 2016-07-25 오후 2:23:58
    class Table32Table : public CremaTable<Table32Row>
    {
    public: 
        Table32Table();
        Table32Table(CremaReader::itable& table);
    public: 
        virtual ~Table32Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table32Row* Find(unsigned int Darren) const;
    };
    class Table4Child1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned short woodlouse;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Letitia;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int Livonia;
        /// <summary>
        /// Lowery turpentine
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Praia;
        /// <summary>
        /// housekeep nontarnishable
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string Christmas;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int earner;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int forwent;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned int dependability;
        const class Table4Child1Table* Table;
        const class Table4Row* Parent;
    public: 
        Table4Child1Row(CremaReader::irow& row, Table4Child1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    class Table4Child1Table : public CremaTable<Table4Child1Row>
    {
    public: 
        Table4Child1Table();
        Table4Child1Table(CremaReader::itable& table);
        Table4Child1Table(std::vector<class Table4Child1Row*> rows);
    public: 
        virtual ~Table4Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table4Child1Row* Find(unsigned short woodlouse) const;
    };
    class Table4Child2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        char Lynn;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short clause;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        short scrupulosity;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short abbrev;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned char microdot;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        Type_Multan Estes;
        const class Table4Child2Table* Table;
        const Table4Row* Parent;
    public: 
        Table4Child2Row(CremaReader::irow& row, Table4Child2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:13
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:13
    class Table4Child2Table : public CremaTable<Table4Child2Row>
    {
    public: 
        Table4Child2Table();
        Table4Child2Table(CremaReader::itable& table);
        Table4Child2Table(std::vector<class Table4Child2Row*> rows);
    public: 
        virtual ~Table4Child2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table4Child2Row* Find(char Lynn, unsigned short abbrev) const;
    };
    class Table4Child_tetrameterRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned char illegality;
        /// <summary>
        /// cavity Nauru workableness overeagerness King inlander Wroclaw Rachel hark digitalization Geoffry algebra approacher deceitful pigswill autosuggestibility embouchure
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int metricize;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        std::string bong;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int confound;
        /// <summary>
        /// muffle Sprint lobby footstool Harriet joust diligentness savior Vandyke burliness Gunther tripoli grunter incorruptibly Maker Araldo ramrodding Falwell muteness
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        bool coprophagous;
        /// <summary>
        /// bevy unwaivering ichthyology cradling
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int rosin;
        const class Table4Child_tetrameterTable* Table;
        const Table4Row* Parent;
    public: 
        Table4Child_tetrameterRow(CremaReader::irow& row, Table4Child_tetrameterTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:27
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:27
    class Table4Child_tetrameterTable : public CremaTable<Table4Child_tetrameterRow>
    {
    public: 
        Table4Child_tetrameterTable();
        Table4Child_tetrameterTable(CremaReader::itable& table);
        Table4Child_tetrameterTable(std::vector<class Table4Child_tetrameterRow*> rows);
    public: 
        virtual ~Table4Child_tetrameterTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table4Child_tetrameterRow* Find(unsigned char illegality, unsigned int metricize, unsigned int confound, unsigned int rosin) const;
    };
    class Table4Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Multan multiplicative;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:27:47
        Type_Meiji math;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:27:47
        Type_Meiji rickshaw;
        /// <summary>
        /// Orlando obliviousness conventicle Samuelson formalin kitten mouth exploded archeology
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Arlan dimmed;
        /// <summary>
        /// cleanable wishful unforced MB Pelee meatloaves represented
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:27:47
        double Prussia;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:27:47
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:27:47
        Type_Arlan copied;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:27:47
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:27:47
        unsigned long long pinwheel;
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오후 4:48:55
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오후 4:48:55
        bool vulture;
        /// <summary>
        /// exploit meritocratic Robinett thudding magazine eidetic convalescent bedim Chiba enforcer praxes overwrote whispering overfeed baulk sojourn tastily intracellular applicator
        /// </summary>
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오후 4:48:55
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오후 4:48:55
        float unaccommodating;
        /// <summary>
        /// cozenage Witherspoon Aristotelian dare disrupt secondhand Rover
        /// </summary>
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오후 4:48:55
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오후 4:48:55
        short subprocess;
        /// <summary>
        /// yogurt cautionary Mata Dalt Fionnula fiend psychoanalyze confession cahoot Maxtor Nathalie impotence biograph Sarena Corabelle
        /// </summary>
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오후 4:48:55
        // Modifier: Member_sportiness
        // ModifiedDateTime: 2016-07-25 오후 4:48:55
        unsigned int spadeful;
        const class Table4Table* Table;
        const Table4Child1Table* Child1;
        const Table4Child2Table* Child2;
        const Table4Child_tetrameterTable* Child_tetrameter;
    private: 
        static Table4Child1Table Child1Empty;
        static Table4Child2Table Child2Empty;
        static Table4Child_tetrameterTable Child_tetrameterEmpty;
    public: 
        Table4Row(CremaReader::irow& row, Table4Table* table);
    friend static void Table4SetChild1(Table4Row* target, const std::vector<Table4Child1Row*>& childs);
        static void Table4SetChild2(Table4Row* target, const std::vector<Table4Child2Row*>& childs);
        static void Table4SetChild_tetrameter(Table4Row* target, const std::vector<Table4Child_tetrameterRow*>& childs);
    };
    // Modifier: Member_sportiness
    // ModifiedDateTime: 2016-07-25 오후 4:48:55
    class Table4Table : public CremaTable<Table4Row>
    {
    public: 
        const Table4Child1Table* Child1;
        const Table4Child2Table* Child2;
        const Table4Child_tetrameterTable* Child_tetrameter;
    public: 
        Table4Table();
        Table4Table(CremaReader::itable& table);
    public: 
        virtual ~Table4Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table4Row* Find(Type_Multan multiplicative) const;
    };
    class Table48Row : public CremaRow
    {
    public: 
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        unsigned char Wendeline;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        int whiten;
        /// <summary>
        /// momma backing Deleon nationalizer glycerol wastepaper encephalopathy hairsbreadth dissatisfy praising stanchion Candlewick
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type25 Romans;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type13 Appalachian;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        unsigned short Denmark;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        bool Merrie;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        short premeditated;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type_rennet Berzelius;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type_Attn Angelia;
        const class Table48Table* Table;
    public: 
        Table48Row(CremaReader::irow& row, Table48Table* table);
    };
    // Creator: Member_antique
    // CreatedDateTime: 2016-07-25 오전 9:49:54
    // Modifier: Member_antique
    // ModifiedDateTime: 2016-07-25 오전 9:49:54
    // ContentsModifier: Admin_pock
    // ContentsModifiedDateTime: 2016-07-25 오후 8:06:53
    class Table48Table : public CremaTable<Table48Row>
    {
    public: 
        Table48Table();
        Table48Table(CremaReader::itable& table);
    public: 
        virtual ~Table48Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table48Row* Find(unsigned char Wendeline) const;
    };
    class Table_apocryphalnessRow : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        short Portsmouth;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        Type_rennet bout;
        /// <summary>
        /// stubborn duress Sextans Cyprian Thieu Kenyon homophobic
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        unsigned int Maimonides;
        /// <summary>
        /// backplate bruin campground futuristic Lavinia Adirondack gigahertz Meggi handicraftsman marquise sacrificer Lutheranism Kalgoorlie China Bibi
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 10:53:47
        long long paved;
        /// <summary>
        /// gin AM internationalization monomaniac Santeria languorous Milton Rosaline Sauternes Ynes taunter xylophonist
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 10:53:47
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 10:53:47
        int exaggeration;
        const class Table_apocryphalnessTable* Table;
    public: 
        Table_apocryphalnessRow(CremaReader::irow& row, Table_apocryphalnessTable* table);
    };
    // Modifier: Admin_truck
    // ModifiedDateTime: 2016-07-25 오전 10:53:47
    // ContentsModifier: Member_succulent
    // ContentsModifiedDateTime: 2016-07-25 오후 8:58:45
    class Table_apocryphalnessTable : public CremaTable<Table_apocryphalnessRow>
    {
    public: 
        Table_apocryphalnessTable();
        Table_apocryphalnessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_apocryphalnessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_apocryphalnessRow* Find(short Portsmouth) const;
    };
    class Table_intactnessRow : public CremaRow
    {
    public: 
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 10:00:17
        long long collocate;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 10:00:17
        short invigoration;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 10:00:17
        unsigned int wetback;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오전 10:00:17
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오전 10:00:17
        std::string bespectacled;
        const class Table_intactnessTable* Table;
    public: 
        Table_intactnessRow(CremaReader::irow& row, Table_intactnessTable* table);
    };
    // Modifier: Member_Tanhya
    // ModifiedDateTime: 2016-07-25 오전 10:00:17
    // ContentsModifier: Admin_perch
    // ContentsModifiedDateTime: 2016-07-25 오후 10:31:50
    class Table_intactnessTable : public CremaTable<Table_intactnessRow>
    {
    public: 
        Table_intactnessTable();
        Table_intactnessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_intactnessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_intactnessRow* Find(long long collocate) const;
    };
    class Table_CaribbeanChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:35:41
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:35:41
        unsigned short fretting;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:35:41
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:35:41
        time_t metallic;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:35:41
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:35:41
        std::string Valaree;
        const class Table_CaribbeanChild1Table* Table;
        const class Table_CaribbeanRow* Parent;
    public: 
        Table_CaribbeanChild1Row(CremaReader::irow& row, Table_CaribbeanChild1Table* table);
    };
    // Creator: Admin_whispering
    // CreatedDateTime: 2016-07-25 오전 11:35:40
    // Modifier: Admin_whispering
    // ModifiedDateTime: 2016-07-25 오전 11:35:41
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 10:42:24
    class Table_CaribbeanChild1Table : public CremaTable<Table_CaribbeanChild1Row>
    {
    public: 
        Table_CaribbeanChild1Table();
        Table_CaribbeanChild1Table(CremaReader::itable& table);
        Table_CaribbeanChild1Table(std::vector<class Table_CaribbeanChild1Row*> rows);
    public: 
        virtual ~Table_CaribbeanChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CaribbeanChild1Row* Find(unsigned short fretting) const;
    };
    class Table_CaribbeanRow : public CremaRow
    {
    public: 
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        float travelogue;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        unsigned short divider;
        /// <summary>
        /// Israel Kathie Tatiana Fabio tiny Nilsen coachwork outhitting domesticated tablecloth Thebault Ericka mesdames falsifiability accrue gossamer
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        unsigned int schmuck;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        int epistemic;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        time_t Gaulish;
        /// <summary>
        /// rally Atlante Abba Ullman plopping adore busgirl Hayden armorial
        /// </summary>
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 10:14:49
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        std::string apportionment;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 10:14:49
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        Type_Arlan toxin;
        const class Table_CaribbeanTable* Table;
        const Table_CaribbeanChild1Table* Child1;
    private: 
        static Table_CaribbeanChild1Table Child1Empty;
    public: 
        Table_CaribbeanRow(CremaReader::irow& row, Table_CaribbeanTable* table);
    friend static void Table_CaribbeanSetChild1(Table_CaribbeanRow* target, const std::vector<Table_CaribbeanChild1Row*>& childs);
    };
    // Modifier: Member_Indianapolis
    // ModifiedDateTime: 2016-07-25 오전 10:14:49
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 10:42:24
    class Table_CaribbeanTable : public CremaTable<Table_CaribbeanRow>
    {
    public: 
        const Table_CaribbeanChild1Table* Child1;
    public: 
        Table_CaribbeanTable();
        Table_CaribbeanTable(CremaReader::itable& table);
    public: 
        virtual ~Table_CaribbeanTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CaribbeanRow* Find(float travelogue) const;
    };
    class Table_crupperRow : public CremaRow
    {
    public: 
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        unsigned char Wendeline;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        int whiten;
        /// <summary>
        /// momma backing Deleon nationalizer glycerol wastepaper encephalopathy hairsbreadth dissatisfy praising stanchion Candlewick
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type25 Romans;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        unsigned short Denmark;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        bool Merrie;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        short premeditated;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type_rennet Berzelius;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 9:49:54
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:49:54
        Type_Attn Angelia;
        const class Table_crupperTable* Table;
    public: 
        Table_crupperRow(CremaReader::irow& row, Table_crupperTable* table);
    };
    // Modifier: Member_antique
    // ModifiedDateTime: 2016-07-25 오전 9:49:54
    // ContentsModifier: Member_Ashby
    // ContentsModifiedDateTime: 2016-07-25 오후 10:47:14
    class Table_crupperTable : public CremaTable<Table_crupperRow>
    {
    public: 
        Table_crupperTable();
        Table_crupperTable(CremaReader::itable& table);
    public: 
        virtual ~Table_crupperTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_crupperRow* Find(unsigned char Wendeline) const;
    };
    class Table101Row : public CremaRow
    {
    public: 
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        float seemliness;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        short sandpit;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned char carbonization;
        /// <summary>
        /// Lindi panel piousness marshallings certainty homier milquetoast Banneker Vermeer runaround mot Bataan corralled organizes ephemeris Giustina
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        std::string whacker;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned int happing;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 1:10:14
        long long considerable;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 1:10:14
        double mis;
        /// <summary>
        /// southeaster pulser Melvin Alessandra peaty promulgate trowel Vila protocol enzymatic tweedy snottiness shiftless pealed assemblyman cackle
        /// </summary>
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오후 1:10:14
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 1:10:14
        std::string impairer;
        const class Table101Table* Table;
    public: 
        Table101Row(CremaReader::irow& row, Table101Table* table);
    };
    // Creator: Member_Cristy
    // CreatedDateTime: 2016-07-25 오전 11:30:08
    // Modifier: Admin_energized
    // ModifiedDateTime: 2016-07-25 오후 1:10:14
    // ContentsModifier: Member_holographs
    // ContentsModifiedDateTime: 2016-07-25 오후 9:35:08
    class Table101Table : public CremaTable<Table101Row>
    {
    public: 
        Table101Table();
        Table101Table(CremaReader::itable& table);
    public: 
        virtual ~Table101Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table101Row* Find(float seemliness) const;
    };
    class Table14Row : public CremaRow
    {
    public: 
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:14:02
        // Modifier: Member_Willamina
        // ModifiedDateTime: 2016-07-25 오후 1:27:39
        float argumentation;
        // Creator: Member_Willamina
        // CreatedDateTime: 2016-07-25 오후 1:27:39
        // Modifier: Member_Willamina
        // ModifiedDateTime: 2016-07-25 오후 1:27:39
        int overwrite;
        // Creator: Member_Willamina
        // CreatedDateTime: 2016-07-25 오후 1:27:39
        // Modifier: Member_Willamina
        // ModifiedDateTime: 2016-07-25 오후 1:27:39
        std::string line;
        const class Table14Table* Table;
    public: 
        Table14Row(CremaReader::irow& row, Table14Table* table);
    };
    // Creator: Member_withdrawnness
    // CreatedDateTime: 2016-07-25 오전 9:14:02
    // Modifier: Member_Willamina
    // ModifiedDateTime: 2016-07-25 오후 1:27:39
    // ContentsModifier: Admin_Nutrasweet
    // ContentsModifiedDateTime: 2016-07-25 오후 5:10:35
    class Table14Table : public CremaTable<Table14Row>
    {
    public: 
        Table14Table();
        Table14Table(CremaReader::itable& table);
    public: 
        virtual ~Table14Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table14Row* Find(float argumentation) const;
    };
    class Table2Child_defisRow : public CremaRow
    {
    public: 
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:24:23
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:24:23
        Type_Arlan ppm;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:24:23
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:24:23
        int Jaquenetta;
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:24:23
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:24:23
        std::string multilingual;
        const class Table2Child_defisTable* Table;
        const class Table2Row* Parent;
    public: 
        Table2Child_defisRow(CremaReader::irow& row, Table2Child_defisTable* table);
    };
    // Creator: Admin_miscegenation
    // CreatedDateTime: 2016-07-25 오전 9:24:23
    // Modifier: Admin_miscegenation
    // ModifiedDateTime: 2016-07-25 오전 9:24:23
    class Table2Child_defisTable : public CremaTable<Table2Child_defisRow>
    {
    public: 
        Table2Child_defisTable();
        Table2Child_defisTable(CremaReader::itable& table);
        Table2Child_defisTable(std::vector<class Table2Child_defisRow*> rows);
    public: 
        virtual ~Table2Child_defisTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table2Child_defisRow* Find(Type_Arlan ppm) const;
    };
    class Table2Child2Row : public CremaRow
    {
    public: 
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:38:22
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:38:22
        int transact;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:38:22
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:38:22
        unsigned short stormtroopers;
        /// <summary>
        /// Dada tinny daredevilry weightlifter caressing trickiness lemon Millard Morrow milliwatt plodded dispersiveness Teressa bromide wattage astronautic serving cayenne
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:38:22
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:38:22
        time_t superdense;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:38:22
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:38:22
        Type44 Noll;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:38:22
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:38:22
        Type_situational consolidate;
        /// <summary>
        /// enthalpy reportorial downtown Angel Herold watchable translatability spumoni resentment pl Wolfgang preserve diagnosis noncomprehending
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 12:38:22
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 12:38:22
        char bans;
        const class Table2Child2Table* Table;
        const Table2Row* Parent;
    public: 
        Table2Child2Row(CremaReader::irow& row, Table2Child2Table* table);
    };
    // Creator: Member_pacifist
    // CreatedDateTime: 2016-07-25 오후 12:38:22
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오후 12:38:22
    class Table2Child2Table : public CremaTable<Table2Child2Row>
    {
    public: 
        Table2Child2Table();
        Table2Child2Table(CremaReader::itable& table);
        Table2Child2Table(std::vector<class Table2Child2Row*> rows);
    public: 
        virtual ~Table2Child2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table2Child2Row* Find(int transact, Type_situational consolidate) const;
    };
    class Table2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// esteem baby bunny city polyisobutylene federative globularness hospital Mollee unmoving louver
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:04
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 9:13:46
        long long mayo;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 9:13:46
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 9:13:46
        int blaster;
        const class Table2Table* Table;
        const Table2Child_defisTable* Child_defis;
        const Table2Child2Table* Child2;
    private: 
        static Table2Child_defisTable Child_defisEmpty;
        static Table2Child2Table Child2Empty;
    public: 
        Table2Row(CremaReader::irow& row, Table2Table* table);
    friend static void Table2SetChild_defis(Table2Row* target, const std::vector<Table2Child_defisRow*>& childs);
        static void Table2SetChild2(Table2Row* target, const std::vector<Table2Child2Row*>& childs);
    };
    // Modifier: Member_scuzzy
    // ModifiedDateTime: 2016-07-25 오전 9:13:46
    // ContentsModifier: Member_sportiness
    // ContentsModifiedDateTime: 2016-07-25 오전 9:10:15
    class Table2Table : public CremaTable<Table2Row>
    {
    public: 
        const Table2Child_defisTable* Child_defis;
        const Table2Child2Table* Child2;
    public: 
        Table2Table();
        Table2Table(CremaReader::itable& table);
    public: 
        virtual ~Table2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table2Row* Find(long long mayo) const;
    };
    class Table29Child1Row : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        unsigned long long cesspool;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        char vocalization;
        /// <summary>
        /// Clarendon nonallergic asserter canteen scapulae extraterritoriality shirt Wilden microbiologist escrow overshoot Calvinism reopen bankcard Ellesmere outermost Hyperion semipermeable
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        bool overbook;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        time_t affidavit;
        /// <summary>
        /// refinance Harley tuple quondam Spica monosyllabic unobliging
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:59:50
        bool circuit;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        int snowily;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        int goatherd;
        /// <summary>
        /// milk Hydra repetitious hitless warty discotheque filament ersatz sacristan incept Bayonne Margalo Phaedra circumlocutory prognosticator
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        Type_livingness Moravia;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:59:50
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:59:50
        bool Lakehurst;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:59:50
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:59:50
        float ricer;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:59:50
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:59:50
        unsigned long long sweatiness;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:59:50
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:59:50
        unsigned char Lugosi;
        const class Table29Child1Table* Table;
        const class Table29Row* Parent;
    public: 
        Table29Child1Row(CremaReader::irow& row, Table29Child1Table* table);
    };
    // Creator: Member_budgie
    // CreatedDateTime: 2016-07-25 오전 10:15:43
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 10:59:50
    // ContentsModifier: Member_Cristy
    // ContentsModifiedDateTime: 2016-07-25 오전 11:29:03
    class Table29Child1Table : public CremaTable<Table29Child1Row>
    {
    public: 
        Table29Child1Table();
        Table29Child1Table(CremaReader::itable& table);
        Table29Child1Table(std::vector<class Table29Child1Row*> rows);
    public: 
        virtual ~Table29Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table29Child1Row* Find(unsigned long long cesspool, int snowily, int goatherd) const;
    };
    class Table29Row : public CremaRow
    {
    public: 
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        char Elicia;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        time_t execrably;
        /// <summary>
        /// trophic mugginess amanuensis
        /// </summary>
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type_rennet Knudsen;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type15 bulky;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float fake;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float scintillation;
        const class Table29Table* Table;
        const Table29Child1Table* Child1;
    private: 
        static Table29Child1Table Child1Empty;
    public: 
        Table29Row(CremaReader::irow& row, Table29Table* table);
    friend static void Table29SetChild1(Table29Row* target, const std::vector<Table29Child1Row*>& childs);
    };
    // Creator: Admin_therefore
    // CreatedDateTime: 2016-07-25 오전 9:28:53
    // Modifier: Admin_therefore
    // ModifiedDateTime: 2016-07-25 오전 9:28:53
    // ContentsModifier: Member_Cristy
    // ContentsModifiedDateTime: 2016-07-25 오전 11:29:03
    class Table29Table : public CremaTable<Table29Row>
    {
    public: 
        const Table29Child1Table* Child1;
    public: 
        Table29Table();
        Table29Table(CremaReader::itable& table);
    public: 
        virtual ~Table29Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table29Row* Find(char Elicia) const;
    };
    class Table36Row : public CremaRow
    {
    public: 
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:38:47
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:38:47
        double mongoose;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:38:47
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:38:47
        Type_Madison paranoia;
        /// <summary>
        /// arrest bandstand recyclable Kirk electricalness messianic slime faithed pantyhose
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:38:47
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:17:03
        Type8 rehabilitate;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:17:03
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:17:03
        float composition;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 11:17:03
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 11:17:03
        short equality;
        const class Table36Table* Table;
    public: 
        Table36Row(CremaReader::irow& row, Table36Table* table);
    };
    // Creator: Admin_Marley
    // CreatedDateTime: 2016-07-25 오전 9:38:47
    // Modifier: Admin_Marshal
    // ModifiedDateTime: 2016-07-25 오전 11:17:03
    class Table36Table : public CremaTable<Table36Row>
    {
    public: 
        Table36Table();
        Table36Table(CremaReader::itable& table);
    public: 
        virtual ~Table36Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table36Row* Find(double mongoose, Type_Madison paranoia) const;
    };
    class Table79Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 10:56:51
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 10:56:51
        time_t constitution;
        const class Table79Table* Table;
    public: 
        Table79Row(CremaReader::irow& row, Table79Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 10:56:51
    // Modifier: Member_constipate
    // ModifiedDateTime: 2016-07-25 오전 10:56:51
    // ContentsModifier: Member_Simenon
    // ContentsModifiedDateTime: 2016-07-25 오후 10:18:13
    class Table79Table : public CremaTable<Table79Row>
    {
    public: 
        Table79Table();
        Table79Table(CremaReader::itable& table);
    public: 
        virtual ~Table79Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table79Row* Find(time_t constitution) const;
    };
    class Table_BriticismChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned short woodlouse;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Letitia;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int Livonia;
        /// <summary>
        /// Lowery turpentine
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Praia;
        /// <summary>
        /// housekeep nontarnishable
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string Christmas;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int earner;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int forwent;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned int dependability;
        const class Table_BriticismChild1Table* Table;
        const class Table_BriticismRow* Parent;
    public: 
        Table_BriticismChild1Row(CremaReader::irow& row, Table_BriticismChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    class Table_BriticismChild1Table : public CremaTable<Table_BriticismChild1Row>
    {
    public: 
        Table_BriticismChild1Table();
        Table_BriticismChild1Table(CremaReader::itable& table);
        Table_BriticismChild1Table(std::vector<class Table_BriticismChild1Row*> rows);
    public: 
        virtual ~Table_BriticismChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_BriticismChild1Row* Find(unsigned short woodlouse) const;
    };
    class Table_BriticismChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        char Lynn;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short clause;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        short scrupulosity;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short abbrev;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned char microdot;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        Type_Multan Estes;
        const class Table_BriticismChild2Table* Table;
        const Table_BriticismRow* Parent;
    public: 
        Table_BriticismChild2Row(CremaReader::irow& row, Table_BriticismChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:13
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:13
    class Table_BriticismChild2Table : public CremaTable<Table_BriticismChild2Row>
    {
    public: 
        Table_BriticismChild2Table();
        Table_BriticismChild2Table(CremaReader::itable& table);
        Table_BriticismChild2Table(std::vector<class Table_BriticismChild2Row*> rows);
    public: 
        virtual ~Table_BriticismChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_BriticismChild2Row* Find(char Lynn, unsigned short abbrev) const;
    };
    class Table_BriticismChild_tapiocaRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned char illegality;
        /// <summary>
        /// cavity Nauru workableness overeagerness King inlander Wroclaw Rachel hark digitalization Geoffry algebra approacher deceitful pigswill autosuggestibility embouchure
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int metricize;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        std::string bong;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int confound;
        /// <summary>
        /// muffle Sprint lobby footstool Harriet joust diligentness savior Vandyke burliness Gunther tripoli grunter incorruptibly Maker Araldo ramrodding Falwell muteness
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        bool coprophagous;
        /// <summary>
        /// bevy unwaivering ichthyology cradling
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int rosin;
        const class Table_BriticismChild_tapiocaTable* Table;
        const Table_BriticismRow* Parent;
    public: 
        Table_BriticismChild_tapiocaRow(CremaReader::irow& row, Table_BriticismChild_tapiocaTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:27
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:27
    class Table_BriticismChild_tapiocaTable : public CremaTable<Table_BriticismChild_tapiocaRow>
    {
    public: 
        Table_BriticismChild_tapiocaTable();
        Table_BriticismChild_tapiocaTable(CremaReader::itable& table);
        Table_BriticismChild_tapiocaTable(std::vector<class Table_BriticismChild_tapiocaRow*> rows);
    public: 
        virtual ~Table_BriticismChild_tapiocaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_BriticismChild_tapiocaRow* Find(unsigned char illegality, unsigned int metricize, unsigned int confound, unsigned int rosin) const;
    };
    class Table_BriticismRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Multan multiplicative;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Meiji math;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Meiji rickshaw;
        /// <summary>
        /// Orlando obliviousness conventicle Samuelson formalin kitten mouth exploded archeology
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Arlan dimmed;
        /// <summary>
        /// cleanable wishful unforced MB Pelee meatloaves represented
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        double bucker;
        const class Table_BriticismTable* Table;
        const Table_BriticismChild1Table* Child1;
        const Table_BriticismChild2Table* Child2;
        const Table_BriticismChild_tapiocaTable* Child_tapioca;
    private: 
        static Table_BriticismChild1Table Child1Empty;
        static Table_BriticismChild2Table Child2Empty;
        static Table_BriticismChild_tapiocaTable Child_tapiocaEmpty;
    public: 
        Table_BriticismRow(CremaReader::irow& row, Table_BriticismTable* table);
    friend static void Table_BriticismSetChild1(Table_BriticismRow* target, const std::vector<Table_BriticismChild1Row*>& childs);
        static void Table_BriticismSetChild2(Table_BriticismRow* target, const std::vector<Table_BriticismChild2Row*>& childs);
        static void Table_BriticismSetChild_tapioca(Table_BriticismRow* target, const std::vector<Table_BriticismChild_tapiocaRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:05
    class Table_BriticismTable : public CremaTable<Table_BriticismRow>
    {
    public: 
        const Table_BriticismChild1Table* Child1;
        const Table_BriticismChild2Table* Child2;
        const Table_BriticismChild_tapiocaTable* Child_tapioca;
    public: 
        Table_BriticismTable();
        Table_BriticismTable(CremaReader::itable& table);
    public: 
        virtual ~Table_BriticismTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_BriticismRow* Find(Type_Multan multiplicative) const;
    };
    class Table107Row : public CremaRow
    {
    public: 
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        int Greer;
        /// <summary>
        /// Mimi strengthener sedge condole wordage Charlottetown Garreth snapshot Friedman Lawry theoretics Bi ombudsmen firearm cagier pratfall illume shakably
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        double Celestine;
        /// <summary>
        /// Aler Laurice backslider Langmuir cladding Waverly enfold gemologist lengthener already Grimaldi grate abjurer
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        double hooter;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        char jackhammer;
        /// <summary>
        /// Nathalie queues Bulawayo eulogizer rectory famine ideological Bolivian Edgar Scriabin
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        double lactic;
        /// <summary>
        /// temporizings Gallard fibber wrongfulness skycap gleed appraised impassioned HS Norwegian knurl Ranice laconically
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:37:20
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:37:20
        Type8 swordsmen;
        /// <summary>
        /// boredom equine Sadat undergoes Iceland occasional swearer
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 12:36:29
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 12:36:29
        unsigned int hellfire;
        /// <summary>
        /// indulgent humidify cloture unharness miscount strand
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 12:36:29
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 12:36:29
        unsigned long long Paleolithic;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오후 12:36:29
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오후 12:36:29
        bool crowdedness;
        const class Table107Table* Table;
    public: 
        Table107Row(CremaReader::irow& row, Table107Table* table);
    };
    // Creator: Admin_Marley
    // CreatedDateTime: 2016-07-25 오전 11:37:20
    // Modifier: Admin_gifted
    // ModifiedDateTime: 2016-07-25 오후 12:36:29
    // ContentsModifier: Member_Stevena
    // ContentsModifiedDateTime: 2016-07-25 오후 10:42:41
    class Table107Table : public CremaTable<Table107Row>
    {
    public: 
        Table107Table();
        Table107Table(CremaReader::itable& table);
    public: 
        virtual ~Table107Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table107Row* Find(int Greer) const;
    };
    class Table_AntonyRow : public CremaRow
    {
    public: 
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:14:02
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:14:02
        float culpableness;
        const class Table_AntonyTable* Table;
    public: 
        Table_AntonyRow(CremaReader::irow& row, Table_AntonyTable* table);
    };
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오전 9:14:02
    class Table_AntonyTable : public CremaTable<Table_AntonyRow>
    {
    public: 
        Table_AntonyTable();
        Table_AntonyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_AntonyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_AntonyRow* Find(float culpableness) const;
    };
    class Table140Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Florencia angiosperm virulence gneiss micrography affiliation
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:17:28
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:17:28
        float renouncement;
        /// <summary>
        /// spacey Bacchus effectiveness roadster paperhanger Ashia subhead isthmian shimmed shill shrubbed quarterer official aerobically IUD affability angler manse mattock
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:17:28
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:17:28
        time_t Gennie;
        /// <summary>
        /// clangorous manganese misogamy stretch brotherly requital splendorous Illinois sanction pianistic potentiometer Bear Ardyce crack gangrenous squirmy loftily deadness centralizes
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:17:28
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:17:28
        short different;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:17:28
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:17:28
        int unfashionable;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:17:28
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:17:28
        long long gesticulation;
        /// <summary>
        /// Schloss extolling vertex Korney
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:17:28
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:17:28
        unsigned short eyeless;
        const class Table140Table* Table;
    public: 
        Table140Row(CremaReader::irow& row, Table140Table* table);
    };
    // Creator: Admin_Marley
    // CreatedDateTime: 2016-07-25 오후 12:17:28
    // Modifier: Admin_Marley
    // ModifiedDateTime: 2016-07-25 오후 12:17:28
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 12:43:50
    class Table140Table : public CremaTable<Table140Row>
    {
    public: 
        Table140Table();
        Table140Table(CremaReader::itable& table);
    public: 
        virtual ~Table140Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table140Row* Find(float renouncement, int unfashionable) const;
    };
    class Table27Row : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        float unnavigable;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned long long Jarad;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        long long separates;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        time_t assiduity;
        /// <summary>
        /// debilitate vegetation abundant convene philologist outtake unlimber tabula filmy upgrade Gerhard Ronni knowable Mariya
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type8 yardmaster;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned char Sir;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type_Attn thermostat;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        std::string Gregoor;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned short planetarium;
        const class Table27Table* Table;
    public: 
        Table27Row(CremaReader::irow& row, Table27Table* table);
    };
    // Creator: Admin_serviceableness
    // CreatedDateTime: 2016-07-25 오전 9:24:20
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오전 9:24:20
    // ContentsModifier: Admin_wholesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 8:23:12
    class Table27Table : public CremaTable<Table27Row>
    {
    public: 
        Table27Table();
        Table27Table(CremaReader::itable& table);
    public: 
        virtual ~Table27Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table27Row* Find(float unnavigable, time_t assiduity) const;
    };
    class Table_JuddChild_roguishnessRow : public CremaRow
    {
    public: 
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:40:31
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:40:31
        int exudation;
        const class Table_JuddChild_roguishnessTable* Table;
        const class Table_JuddRow* Parent;
    public: 
        Table_JuddChild_roguishnessRow(CremaReader::irow& row, Table_JuddChild_roguishnessTable* table);
    };
    // Creator: Member_Dorine
    // CreatedDateTime: 2016-07-25 오전 10:40:31
    // Modifier: Member_Dorine
    // ModifiedDateTime: 2016-07-25 오전 10:40:31
    // ContentsModifier: Admin_energized
    // ContentsModifiedDateTime: 2016-07-25 오후 9:13:26
    class Table_JuddChild_roguishnessTable : public CremaTable<Table_JuddChild_roguishnessRow>
    {
    public: 
        Table_JuddChild_roguishnessTable();
        Table_JuddChild_roguishnessTable(CremaReader::itable& table);
        Table_JuddChild_roguishnessTable(std::vector<class Table_JuddChild_roguishnessRow*> rows);
    public: 
        virtual ~Table_JuddChild_roguishnessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_JuddChild_roguishnessRow* Find(int exudation) const;
    };
    class Table_JuddRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        const class Table_JuddTable* Table;
        const Table_JuddChild_roguishnessTable* Child_roguishness;
    private: 
        static Table_JuddChild_roguishnessTable Child_roguishnessEmpty;
    public: 
        Table_JuddRow(CremaReader::irow& row, Table_JuddTable* table);
    friend static void Table_JuddSetChild_roguishness(Table_JuddRow* target, const std::vector<Table_JuddChild_roguishnessRow*>& childs);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:15:17
    // ContentsModifier: Admin_energized
    // ContentsModifiedDateTime: 2016-07-25 오후 9:13:26
    class Table_JuddTable : public CremaTable<Table_JuddRow>
    {
    public: 
        const Table_JuddChild_roguishnessTable* Child_roguishness;
    public: 
        Table_JuddTable();
        Table_JuddTable(CremaReader::itable& table);
    public: 
        virtual ~Table_JuddTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_JuddRow* Find(double corpsman, bool jetting) const;
    };
    class Table18Row : public CremaRow
    {
    public: 
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:15:53
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        unsigned long long Flem;
        /// <summary>
        /// October ticker aphelion bigging receptive
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:15:53
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 10:05:40
        short songster;
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:15:53
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        unsigned long long Tenn;
        /// <summary>
        /// aggression feelingness scatter sequin armless monarchist masochistic blithesome corundum Croat Kirby nonmember merganser archive vermouths Bahama emulative Bernard
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:15:53
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:37:22
        Type_Arlan telepathy;
        /// <summary>
        /// thousand truant offramp Nimrod Germantown defamation earsplitting
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:15:53
        // Modifier: Admin_Marshal
        // ModifiedDateTime: 2016-07-25 오전 9:15:53
        short withhold;
        /// <summary>
        /// cogency Gauguin Bria Perl denseness synchronization apoplexy Sylvan Shanna Jaquith bronchi skillfulnesses practiced Brest Hugh attractivenesses
        /// </summary>
        // Creator: Admin_Marshal
        // CreatedDateTime: 2016-07-25 오전 9:15:53
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:35:51
        Type_livingness unoffensive;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 9:37:22
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:37:22
        Type_Attn Piaf;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 10:05:40
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 10:05:40
        unsigned int basinful;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:35:51
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 11:35:51
        int cappuccino;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 11:35:51
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        unsigned int commemoration;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 1:26:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        short blusterous;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 1:26:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        float shrieker;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 1:26:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        Type_RhodesDeletable jacuzzi;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오후 1:26:55
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오후 1:26:55
        bool premarket;
        const class Table18Table* Table;
    public: 
        Table18Row(CremaReader::irow& row, Table18Table* table);
    };
    // Creator: Admin_Marshal
    // CreatedDateTime: 2016-07-25 오전 9:15:53
    // Modifier: Member_Dorine
    // ModifiedDateTime: 2016-07-25 오후 1:26:55
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 12:34:08
    class Table18Table : public CremaTable<Table18Row>
    {
    public: 
        Table18Table();
        Table18Table(CremaReader::itable& table);
    public: 
        virtual ~Table18Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table18Row* Find(unsigned long long Flem) const;
    };
    class Table78Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Rabi
        /// </summary>
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:56:32
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 10:56:32
        double Alyosha;
        /// <summary>
        /// Nev Guillermo nincompoop downtrend nondelivery
        /// </summary>
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:56:32
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 10:56:32
        unsigned char vesper;
        /// <summary>
        /// catecholamine cummerbund corrugate Mariejeanne pragmatical wingmen
        /// </summary>
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:56:32
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:34:34
        short eradicator;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:34:34
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:34:34
        time_t Tait;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:34:34
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:34:34
        std::string Lishe;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:34:34
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:34:34
        Type51 Cobby;
        const class Table78Table* Table;
    public: 
        Table78Row(CremaReader::irow& row, Table78Table* table);
    };
    // Creator: Member_Cecilia
    // CreatedDateTime: 2016-07-25 오전 10:56:32
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오후 12:34:34
    // ContentsModifier: Member_suffixation
    // ContentsModifiedDateTime: 2016-07-25 오후 8:33:29
    class Table78Table : public CremaTable<Table78Row>
    {
    public: 
        Table78Table();
        Table78Table(CremaReader::itable& table);
    public: 
        virtual ~Table78Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table78Row* Find(double Alyosha, short eradicator) const;
    };
    class Table_departChild2Row : public CremaRow
    {
    public: 
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 12:36:23
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 12:36:23
        Type_consortia irreconcilability;
        const class Table_departChild2Table* Table;
        const class Table_departRow* Parent;
    public: 
        Table_departChild2Row(CremaReader::irow& row, Table_departChild2Table* table);
    };
    // Creator: Admin_Hooke
    // CreatedDateTime: 2016-07-25 오후 12:36:22
    // Modifier: Admin_Hooke
    // ModifiedDateTime: 2016-07-25 오후 12:36:23
    class Table_departChild2Table : public CremaTable<Table_departChild2Row>
    {
    public: 
        Table_departChild2Table();
        Table_departChild2Table(CremaReader::itable& table);
        Table_departChild2Table(std::vector<class Table_departChild2Row*> rows);
    public: 
        virtual ~Table_departChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_departChild2Row* Find(Type_consortia irreconcilability) const;
    };
    class Table_departRow : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        unsigned short adviser;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        Type_pledge Peterson;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 1:32:54
        std::string Henka;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        Type24 cumuli;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        int analyzed;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        long long scowler;
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 1:32:54
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 1:32:54
        short articulateness;
        /// <summary>
        /// wainscot conform footsore forestry p Pd rejigger chantry Netty
        /// </summary>
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 1:32:54
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 1:32:54
        short USMC;
        const class Table_departTable* Table;
        const Table_departChild2Table* Child2;
    private: 
        static Table_departChild2Table Child2Empty;
    public: 
        Table_departRow(CremaReader::irow& row, Table_departTable* table);
    friend static void Table_departSetChild2(Table_departRow* target, const std::vector<Table_departChild2Row*>& childs);
    };
    // Modifier: Member_Tanhya
    // ModifiedDateTime: 2016-07-25 오후 1:32:54
    // ContentsModifier: Admin_Marshal
    // ContentsModifiedDateTime: 2016-07-25 오후 12:12:48
    class Table_departTable : public CremaTable<Table_departRow>
    {
    public: 
        const Table_departChild2Table* Child2;
    public: 
        Table_departTable();
        Table_departTable(CremaReader::itable& table);
    public: 
        virtual ~Table_departTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_departRow* Find(unsigned short adviser) const;
    };
    class Table_SusanneChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        const class Table_SusanneChild1Table* Table;
        const class Table_SusanneRow* Parent;
    public: 
        Table_SusanneChild1Row(CremaReader::irow& row, Table_SusanneChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    // ContentsModifier: Member_dyspepsia
    // ContentsModifiedDateTime: 2016-07-25 오후 9:09:12
    class Table_SusanneChild1Table : public CremaTable<Table_SusanneChild1Row>
    {
    public: 
        Table_SusanneChild1Table();
        Table_SusanneChild1Table(CremaReader::itable& table);
        Table_SusanneChild1Table(std::vector<class Table_SusanneChild1Row*> rows);
    public: 
        virtual ~Table_SusanneChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_SusanneChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_SusanneChild_verballedRow : public CremaRow
    {
    public: 
        /// <summary>
        /// allocative lobotomize Orwell horsedom Usenet campesinos Eolanda provincial Giralda dwarfish interaction psychopathology posterior obtuse balladeer
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        int outgrip;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        unsigned char condominium;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t guiltlessness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool splash;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool entrapping;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t Hamnet;
        const class Table_SusanneChild_verballedTable* Table;
        const Table_SusanneRow* Parent;
    public: 
        Table_SusanneChild_verballedRow(CremaReader::irow& row, Table_SusanneChild_verballedTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오전 9:21:09
    // ContentsModifier: Member_dyspepsia
    // ContentsModifiedDateTime: 2016-07-25 오후 9:09:12
    class Table_SusanneChild_verballedTable : public CremaTable<Table_SusanneChild_verballedRow>
    {
    public: 
        Table_SusanneChild_verballedTable();
        Table_SusanneChild_verballedTable(CremaReader::itable& table);
        Table_SusanneChild_verballedTable(std::vector<class Table_SusanneChild_verballedRow*> rows);
    public: 
        virtual ~Table_SusanneChild_verballedTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_SusanneChild_verballedRow* Find(int outgrip) const;
    };
    class Table_SusanneRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Sequoya fluency regimentation conceptualize satiation toehold tao severing cowslip MSW Featherman
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 12:23:11
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오후 5:29:12
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        /// <summary>
        /// tedious niacin glumness antidemocratic traceless definition Vincenty constraint obstructer grimacer otherness paralytically Nanak Morton incipiency subclauses tenderizer
        /// </summary>
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 12:23:11
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 12:23:11
        double overstep;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 12:23:11
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 12:23:11
        char compulsion;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오후 5:29:12
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오후 5:29:12
        double Aspell;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오후 5:29:12
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오후 5:29:12
        float immorality;
        // Creator: Member_liking
        // CreatedDateTime: 2016-07-25 오후 5:29:12
        // Modifier: Member_liking
        // ModifiedDateTime: 2016-07-25 오후 5:29:12
        unsigned long long centrifugate;
        const class Table_SusanneTable* Table;
        const Table_SusanneChild1Table* Child1;
        const Table_SusanneChild_verballedTable* Child_verballed;
    private: 
        static Table_SusanneChild1Table Child1Empty;
        static Table_SusanneChild_verballedTable Child_verballedEmpty;
    public: 
        Table_SusanneRow(CremaReader::irow& row, Table_SusanneTable* table);
    friend static void Table_SusanneSetChild1(Table_SusanneRow* target, const std::vector<Table_SusanneChild1Row*>& childs);
        static void Table_SusanneSetChild_verballed(Table_SusanneRow* target, const std::vector<Table_SusanneChild_verballedRow*>& childs);
    };
    // Modifier: Member_liking
    // ModifiedDateTime: 2016-07-25 오후 5:29:12
    // ContentsModifier: Member_dyspepsia
    // ContentsModifiedDateTime: 2016-07-25 오후 9:09:12
    class Table_SusanneTable : public CremaTable<Table_SusanneRow>
    {
    public: 
        const Table_SusanneChild1Table* Child1;
        const Table_SusanneChild_verballedTable* Child_verballed;
    public: 
        Table_SusanneTable();
        Table_SusanneTable(CremaReader::itable& table);
    public: 
        virtual ~Table_SusanneTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_SusanneRow* Find(double eviction) const;
    };
    class Table126Row : public CremaRow
    {
    public: 
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 11:57:40
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 11:57:40
        bool technicalness;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 6:09:39
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 6:09:39
        std::string Wilshire;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 6:09:39
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 6:09:39
        long long suction;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 6:09:39
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 6:09:39
        double Sabrina;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오후 6:09:39
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오후 6:09:39
        Type22 nightie;
        const class Table126Table* Table;
    public: 
        Table126Row(CremaReader::irow& row, Table126Table* table);
    };
    // Creator: Admin_wholesomeness
    // CreatedDateTime: 2016-07-25 오전 11:57:40
    // Modifier: Member_nonjudicial
    // ModifiedDateTime: 2016-07-25 오후 6:09:39
    // ContentsModifier: Admin_Russian
    // ContentsModifiedDateTime: 2016-07-25 오후 5:08:48
    class Table126Table : public CremaTable<Table126Row>
    {
    public: 
        Table126Table();
        Table126Table(CremaReader::itable& table);
    public: 
        virtual ~Table126Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table126Row* Find(bool technicalness) const;
    };
    class Table146Row : public CremaRow
    {
    public: 
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:38:30
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:38:30
        short bloater;
        /// <summary>
        /// overoptimistic narcoses dish dysfunctional
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:38:30
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:38:30
        Type13 inhalant;
        /// <summary>
        /// threat undercoating Schick Averill Mariupol lassoer teashop bucketful scanty wicket interviewee stridden satanist Hottentot
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:38:30
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:38:30
        int Mike;
        const class Table146Table* Table;
    public: 
        Table146Row(CremaReader::irow& row, Table146Table* table);
    };
    // Creator: Member_neurosis
    // CreatedDateTime: 2016-07-25 오후 12:38:30
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:38:30
    // ContentsModifier: Admin_Aura
    // ContentsModifiedDateTime: 2016-07-25 오후 2:34:09
    class Table146Table : public CremaTable<Table146Row>
    {
    public: 
        Table146Table();
        Table146Table(CremaReader::itable& table);
    public: 
        virtual ~Table146Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table146Row* Find(short bloater) const;
    };
    class Table80Row : public CremaRow
    {
    public: 
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        unsigned int narcoleptic;
        /// <summary>
        /// tinny bungler breakpoint ammo highfalutin sweatshop dropsical countermand shoestring hornedness
        /// </summary>
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type_canted wakefulness;
        /// <summary>
        /// hybridize fireguard bassoon biorhythm coattail Parker eland angler Arianism
        /// </summary>
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        time_t mealiness;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        Type_farinaceous Miguela;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        Type_canted bedstead;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        char hitherto;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        std::string Ibsen;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        time_t Shavuot;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:58:28
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:58:28
        time_t hedgerow;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type_seasonably video;
        /// <summary>
        /// plumbago ponytail tornado Fairfield Maryanna
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        unsigned short Jemmy;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        unsigned short Kublai;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type21 newsworthiness;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        int Bowery;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:59:30
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:59:30
        Type21 devour;
        const class Table80Table* Table;
    public: 
        Table80Row(CremaReader::irow& row, Table80Table* table);
    };
    // Creator: Admin_perch
    // CreatedDateTime: 2016-07-25 오전 10:58:28
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오전 10:59:30
    class Table80Table : public CremaTable<Table80Row>
    {
    public: 
        Table80Table();
        Table80Table(CremaReader::itable& table);
    public: 
        virtual ~Table80Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table80Row* Find(unsigned int narcoleptic, Type21 devour) const;
    };
    class Table_sclerosesRow : public CremaRow
    {
    public: 
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        Type70 choral;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        std::string malting;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        unsigned char intuitive;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        unsigned short bandsmen;
        const class Table_sclerosesTable* Table;
    public: 
        Table_sclerosesRow(CremaReader::irow& row, Table_sclerosesTable* table);
    };
    // Modifier: Member_Edgardo
    // ModifiedDateTime: 2016-07-25 오후 1:33:24
    class Table_sclerosesTable : public CremaTable<Table_sclerosesRow>
    {
    public: 
        Table_sclerosesTable();
        Table_sclerosesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_sclerosesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_sclerosesRow* Find(Type70 choral, unsigned char intuitive) const;
    };
    class Table177Row : public CremaRow
    {
    public: 
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오후 2:40:37
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오후 2:40:37
        unsigned short Shillong;
        /// <summary>
        /// Mankowski Parkersburg overindulgence footloose Gogol tole pornography internment nonsurgical handcar Wayland
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오후 2:40:37
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오후 2:40:37
        unsigned long long $explicit;
        /// <summary>
        /// cotangent Agrippina frictional negator murmurous McDermott Weyden Olivie chemist rough squatness drawn bismuths ergophobia unusualness Elsy cheddar barbed Hunfredo
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오후 2:40:37
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오후 2:40:37
        int angularity;
        const class Table177Table* Table;
    public: 
        Table177Row(CremaReader::irow& row, Table177Table* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오후 2:40:37
    // Modifier: Member_kirsch
    // ModifiedDateTime: 2016-07-25 오후 2:40:37
    // ContentsModifier: Member_jitterbugger
    // ContentsModifiedDateTime: 2016-07-25 오후 10:30:14
    class Table177Table : public CremaTable<Table177Row>
    {
    public: 
        Table177Table();
        Table177Table(CremaReader::itable& table);
    public: 
        virtual ~Table177Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table177Row* Find(unsigned short Shillong) const;
    };
    class Table75Row : public CremaRow
    {
    public: 
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:45:33
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:45:33
        char noncontroversial;
        /// <summary>
        /// scentless Grosvenor
        /// </summary>
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:45:33
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:45:33
        Type25 conservativeness;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:45:33
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:45:33
        long long WNW;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:45:33
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:45:33
        std::string rating;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:45:33
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:45:33
        unsigned long long elitism;
        const class Table75Table* Table;
    public: 
        Table75Row(CremaReader::irow& row, Table75Table* table);
    };
    // Creator: Admin_reggae
    // CreatedDateTime: 2016-07-25 오전 10:45:33
    // Modifier: Admin_reggae
    // ModifiedDateTime: 2016-07-25 오전 10:45:33
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 8:33:49
    class Table75Table : public CremaTable<Table75Row>
    {
    public: 
        Table75Table();
        Table75Table(CremaReader::itable& table);
    public: 
        virtual ~Table75Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table75Row* Find(char noncontroversial) const;
    };
    class Table84Child_skullcapDeletableRow : public CremaRow
    {
    public: 
        /// <summary>
        /// unseal sous xenon Sheetrock yd Truth Boheme acuity snideness Catherin
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 11:17:05
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 11:17:05
        Type35 chock;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 11:17:05
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 11:17:05
        int Jemmy;
        /// <summary>
        /// latch Marmaduke sandstorm torridity homely daybed Clemenceau hyperthyroid shop Campinas states Carl infringer
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 11:17:05
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 11:17:05
        char irrevocable;
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 11:17:05
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 11:17:05
        double encumbrancer;
        /// <summary>
        /// antiabortionist Augustinian apothegm initial Ami Macon Yard Los gangplank
        /// </summary>
        // Creator: Member_lender
        // CreatedDateTime: 2016-07-25 오전 11:17:05
        // Modifier: Member_lender
        // ModifiedDateTime: 2016-07-25 오전 11:17:05
        Type_Jenelle Court;
        const class Table84Child_skullcapDeletableTable* Table;
        const class Table84Row* Parent;
    public: 
        Table84Child_skullcapDeletableRow(CremaReader::irow& row, Table84Child_skullcapDeletableTable* table);
    };
    // Creator: Member_lender
    // CreatedDateTime: 2016-07-25 오전 11:17:05
    // Modifier: Member_lender
    // ModifiedDateTime: 2016-07-25 오전 11:17:05
    // ContentsModifier: Member_throbbing
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:41
    class Table84Child_skullcapDeletableTable : public CremaTable<Table84Child_skullcapDeletableRow>
    {
    public: 
        Table84Child_skullcapDeletableTable();
        Table84Child_skullcapDeletableTable(CremaReader::itable& table);
        Table84Child_skullcapDeletableTable(std::vector<class Table84Child_skullcapDeletableRow*> rows);
    public: 
        virtual ~Table84Child_skullcapDeletableTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table84Child_skullcapDeletableRow* Find(Type35 chock, int Jemmy, char irrevocable) const;
    };
    class Table84Row : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:02:30
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:02:30
        char Eduino;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오후 6:19:49
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오후 6:19:49
        unsigned int furrow;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오후 6:19:49
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오후 6:19:49
        char Foch;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오후 6:19:49
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오후 6:19:49
        Type12 chrysalis;
        const class Table84Table* Table;
        const Table84Child_skullcapDeletableTable* Child_skullcapDeletable;
    private: 
        static Table84Child_skullcapDeletableTable Child_skullcapDeletableEmpty;
    public: 
        Table84Row(CremaReader::irow& row, Table84Table* table);
    friend static void Table84SetChild_skullcapDeletable(Table84Row* target, const std::vector<Table84Child_skullcapDeletableRow*>& childs);
    };
    // Creator: Admin_titted
    // CreatedDateTime: 2016-07-25 오전 11:02:30
    // Modifier: Admin_titted
    // ModifiedDateTime: 2016-07-25 오후 6:19:49
    // ContentsModifier: Member_throbbing
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:41
    class Table84Table : public CremaTable<Table84Row>
    {
    public: 
        const Table84Child_skullcapDeletableTable* Child_skullcapDeletable;
    public: 
        Table84Table();
        Table84Table(CremaReader::itable& table);
    public: 
        virtual ~Table84Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table84Row* Find(char Eduino) const;
    };
    class Table_flangeChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        unsigned char hauberk;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        std::string tortoiseshell;
        /// <summary>
        /// grok literacy ingratiating defoliant humongous resole glummer Charlot Jennings limy shiftiness spunky Wallas Demetri denier
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        unsigned char costarring;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        bool cod;
        /// <summary>
        /// Angevin
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        std::string SEATO;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        float shucker;
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 10:25:30
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 10:25:30
        time_t gasworks;
        const class Table_flangeChild1Table* Table;
        const class Table_flangeRow* Parent;
    public: 
        Table_flangeChild1Row(CremaReader::irow& row, Table_flangeChild1Table* table);
    };
    // Creator: Admin_Lisetta
    // CreatedDateTime: 2016-07-25 오전 10:25:30
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 10:25:30
    // ContentsModifier: Admin_histidine
    // ContentsModifiedDateTime: 2016-07-25 오후 9:23:54
    class Table_flangeChild1Table : public CremaTable<Table_flangeChild1Row>
    {
    public: 
        Table_flangeChild1Table();
        Table_flangeChild1Table(CremaReader::itable& table);
        Table_flangeChild1Table(std::vector<class Table_flangeChild1Row*> rows);
    public: 
        virtual ~Table_flangeChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_flangeChild1Row* Find(unsigned char hauberk) const;
    };
    class Table_flangeRow : public CremaRow
    {
    public: 
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double meatpacking;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        unsigned char guardedness;
        /// <summary>
        /// Bronny confute mawkish endure depravity adroitness hoopla thereat accused transmutation Emery sen pathfinder
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        double Dugald;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        int polymaths;
        /// <summary>
        /// rounded Sean marathoner pressman acupuncturist Tandy famish Randene senior Romola Ulster Dugald Autumn Cash telegraph
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 9:32:32
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 9:32:32
        Type_Madison thighbone;
        const class Table_flangeTable* Table;
        const Table_flangeChild1Table* Child1;
    private: 
        static Table_flangeChild1Table Child1Empty;
    public: 
        Table_flangeRow(CremaReader::irow& row, Table_flangeTable* table);
    friend static void Table_flangeSetChild1(Table_flangeRow* target, const std::vector<Table_flangeChild1Row*>& childs);
    };
    // Modifier: Admin_Hooke
    // ModifiedDateTime: 2016-07-25 오전 9:32:32
    // ContentsModifier: Admin_histidine
    // ContentsModifiedDateTime: 2016-07-25 오후 9:23:54
    class Table_flangeTable : public CremaTable<Table_flangeRow>
    {
    public: 
        const Table_flangeChild1Table* Child1;
    public: 
        Table_flangeTable();
        Table_flangeTable(CremaReader::itable& table);
    public: 
        virtual ~Table_flangeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_flangeRow* Find(double meatpacking) const;
    };
    class Table_FonzChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        /// <summary>
        /// Reedville howsoever wastewater
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:12:54
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        bool Larsen;
        /// <summary>
        /// heredity Anthe syllabus Hyannis Dunn lilliputian misdemeanant Gautama gregariousness spooky
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:12:54
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        unsigned int enforceable;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:12:54
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:12:54
        double aid;
        const class Table_FonzChild1Table* Table;
        const class Table_FonzRow* Parent;
    public: 
        Table_FonzChild1Row(CremaReader::irow& row, Table_FonzChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: Member_potage
    // ModifiedDateTime: 2016-07-25 오전 10:12:54
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 2:47:58
    class Table_FonzChild1Table : public CremaTable<Table_FonzChild1Row>
    {
    public: 
        Table_FonzChild1Table();
        Table_FonzChild1Table(CremaReader::itable& table);
        Table_FonzChild1Table(std::vector<class Table_FonzChild1Row*> rows);
    public: 
        virtual ~Table_FonzChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_FonzChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_FonzChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 9:37:47
        int outgrip;
        /// <summary>
        /// Tripp calvary amusement antinomian essay innards comforting Creighton sentential whammy reefer lender draftee Syracuse Juneau FIFO Arley
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        bool eruption;
        /// <summary>
        /// reckoning transferee efficient Mersey thunderstorm Karlee
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오전 9:45:59
        Type_Attn busty;
        /// <summary>
        /// Constantia polarimetry easer sketchy Dior Dolby Plymouth Marice wobbliness veneer elfish dottiness circlet variational impassioned visage tequila cpd
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오전 9:45:59
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        unsigned long long Glory;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:12:33
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        Type16 Dayna;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:12:33
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        Type11 beckon;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:12:33
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        int Russian;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:12:33
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        bool electrocution;
        /// <summary>
        /// stand Reade gladsome blanch Taddeusz
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:12:33
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        time_t allegorist;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오후 1:12:33
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오후 1:12:33
        Type71 mizzen;
        const class Table_FonzChild2Table* Table;
        const Table_FonzRow* Parent;
    public: 
        Table_FonzChild2Row(CremaReader::irow& row, Table_FonzChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Admin_mousse
    // ModifiedDateTime: 2016-07-25 오후 1:12:33
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 2:47:57
    class Table_FonzChild2Table : public CremaTable<Table_FonzChild2Row>
    {
    public: 
        Table_FonzChild2Table();
        Table_FonzChild2Table(CremaReader::itable& table);
        Table_FonzChild2Table(std::vector<class Table_FonzChild2Row*> rows);
    public: 
        virtual ~Table_FonzChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_FonzChild2Row* Find(int outgrip) const;
    };
    class Table_FonzChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// briny earning Danica Calgary extraction caseharden infirmity Kiele bouncily Devlen outstay
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long dampen;
        /// <summary>
        /// correction tremulous ingot
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned long long hearing;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        unsigned char bedsheets;
        /// <summary>
        /// beefiness indicative symmetrical overcomer sheen railroading scented bars nonperformance Perseid osteopathy Jule fierce phlox Regor metricize Kirghiz Argus orgasm
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        int Terri;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        bool Zagreb;
        /// <summary>
        /// Kelci freebie islander candidness glyceride interrogate Mariann Hertzsprung Wisconsin Harriot deja cryostat Photostat armlet adapted cavity
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        float reading;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 9:40:45
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 9:40:45
        double leopardess;
        const class Table_FonzChild3Table* Table;
        const Table_FonzRow* Parent;
    public: 
        Table_FonzChild3Row(CremaReader::irow& row, Table_FonzChild3Table* table);
    };
    // Creator: Member_creel
    // CreatedDateTime: 2016-07-25 오전 9:40:44
    // Modifier: Member_creel
    // ModifiedDateTime: 2016-07-25 오전 9:40:45
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 2:47:52
    class Table_FonzChild3Table : public CremaTable<Table_FonzChild3Row>
    {
    public: 
        Table_FonzChild3Table();
        Table_FonzChild3Table(CremaReader::itable& table);
        Table_FonzChild3Table(std::vector<class Table_FonzChild3Row*> rows);
    public: 
        virtual ~Table_FonzChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_FonzChild3Row* Find(unsigned long long dampen, bool Zagreb) const;
    };
    class Table_FonzChild4Row : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오후 2:22:25
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오후 2:22:25
        float Slocum;
        const class Table_FonzChild4Table* Table;
        const Table_FonzRow* Parent;
    public: 
        Table_FonzChild4Row(CremaReader::irow& row, Table_FonzChild4Table* table);
    };
    // Creator: Admin_titted
    // CreatedDateTime: 2016-07-25 오후 2:22:24
    // Modifier: Admin_titted
    // ModifiedDateTime: 2016-07-25 오후 2:22:25
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 2:47:57
    class Table_FonzChild4Table : public CremaTable<Table_FonzChild4Row>
    {
    public: 
        Table_FonzChild4Table();
        Table_FonzChild4Table(CremaReader::itable& table);
        Table_FonzChild4Table(std::vector<class Table_FonzChild4Row*> rows);
    public: 
        virtual ~Table_FonzChild4Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_FonzChild4Row* Find(float Slocum) const;
    };
    class Table_FonzRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 10:08:25
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:53:58
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:53:58
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:53:58
        char dammit;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:53:58
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:53:58
        Type_supportedDeletable mystic;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 10:08:25
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 10:08:25
        bool tyrannizer;
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 10:08:25
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 10:08:25
        unsigned long long camp;
        /// <summary>
        /// Oliy excreta decorum nodular Katrinka Eris position execration ovalness andiron rifle congruency derrick skylight painless starring Artemas Powers Dael
        /// </summary>
        // Creator: Member_Richard
        // CreatedDateTime: 2016-07-25 오전 10:08:25
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 10:08:25
        unsigned long long Clint;
        const class Table_FonzTable* Table;
        const Table_FonzChild1Table* Child1;
        const Table_FonzChild2Table* Child2;
        const Table_FonzChild3Table* Child3;
        const Table_FonzChild4Table* Child4;
    private: 
        static Table_FonzChild1Table Child1Empty;
        static Table_FonzChild2Table Child2Empty;
        static Table_FonzChild3Table Child3Empty;
        static Table_FonzChild4Table Child4Empty;
    public: 
        Table_FonzRow(CremaReader::irow& row, Table_FonzTable* table);
    friend static void Table_FonzSetChild1(Table_FonzRow* target, const std::vector<Table_FonzChild1Row*>& childs);
        static void Table_FonzSetChild2(Table_FonzRow* target, const std::vector<Table_FonzChild2Row*>& childs);
        static void Table_FonzSetChild3(Table_FonzRow* target, const std::vector<Table_FonzChild3Row*>& childs);
        static void Table_FonzSetChild4(Table_FonzRow* target, const std::vector<Table_FonzChild4Row*>& childs);
    };
    // Modifier: Member_Richard
    // ModifiedDateTime: 2016-07-25 오전 10:08:25
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 2:47:57
    class Table_FonzTable : public CremaTable<Table_FonzRow>
    {
    public: 
        const Table_FonzChild1Table* Child1;
        const Table_FonzChild2Table* Child2;
        const Table_FonzChild3Table* Child3;
        const Table_FonzChild4Table* Child4;
    public: 
        Table_FonzTable();
        Table_FonzTable(CremaReader::itable& table);
    public: 
        virtual ~Table_FonzTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_FonzRow* Find(double eviction) const;
    };
    class Table_MelittaChild_MoseRow : public CremaRow
    {
    public: 
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        short FTC;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        float scrubbed;
        /// <summary>
        /// Hung Robb collimated Weldwood Doralin Caxton Sophocles attainder spareness pro washy dauntlessness interpretative database
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        double Cotton;
        /// <summary>
        /// stopper gauze etherized Reidar castration brood
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        double bipedal;
        /// <summary>
        /// Moravia catheter casuist FOFL functionalist artificiality raggedness overdub corollary
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        long long GPO;
        /// <summary>
        /// ill idiolect
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        std::string Shurlock;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        short Pammy;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        time_t overstressed;
        const class Table_MelittaChild_MoseTable* Table;
        const class Table_MelittaRow* Parent;
    public: 
        Table_MelittaChild_MoseRow(CremaReader::irow& row, Table_MelittaChild_MoseTable* table);
    };
    // Creator: Admin_getup
    // CreatedDateTime: 2016-07-25 오전 9:46:43
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 9:46:43
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 4:49:09
    class Table_MelittaChild_MoseTable : public CremaTable<Table_MelittaChild_MoseRow>
    {
    public: 
        Table_MelittaChild_MoseTable();
        Table_MelittaChild_MoseTable(CremaReader::itable& table);
        Table_MelittaChild_MoseTable(std::vector<class Table_MelittaChild_MoseRow*> rows);
    public: 
        virtual ~Table_MelittaChild_MoseTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_MelittaChild_MoseRow* Find(short FTC, short Pammy) const;
    };
    class Table_MelittaRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int rattling;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int deleterious;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        long long Dalmatian;
        const class Table_MelittaTable* Table;
        const Table_MelittaChild_MoseTable* Child_Mose;
    private: 
        static Table_MelittaChild_MoseTable Child_MoseEmpty;
    public: 
        Table_MelittaRow(CremaReader::irow& row, Table_MelittaTable* table);
    friend static void Table_MelittaSetChild_Mose(Table_MelittaRow* target, const std::vector<Table_MelittaChild_MoseRow*>& childs);
    };
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 9:17:22
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 4:49:09
    class Table_MelittaTable : public CremaTable<Table_MelittaRow>
    {
    public: 
        const Table_MelittaChild_MoseTable* Child_Mose;
    public: 
        Table_MelittaTable();
        Table_MelittaTable(CremaReader::itable& table);
    public: 
        virtual ~Table_MelittaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_MelittaRow* Find(unsigned int snapback) const;
    };
    class Table_quartileRow : public CremaRow
    {
    public: 
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        float travelogue;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        unsigned short divider;
        /// <summary>
        /// Israel Kathie Tatiana Fabio tiny Nilsen coachwork outhitting domesticated tablecloth Thebault Ericka mesdames falsifiability accrue gossamer
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        unsigned int schmuck;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        int epistemic;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:52:55
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:52:55
        time_t Gaulish;
        /// <summary>
        /// rally Atlante Abba Ullman plopping adore busgirl Hayden armorial
        /// </summary>
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 10:14:49
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        std::string apportionment;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 10:14:49
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오전 10:14:49
        Type_Arlan toxin;
        const class Table_quartileTable* Table;
    public: 
        Table_quartileRow(CremaReader::irow& row, Table_quartileTable* table);
    };
    // Modifier: Member_Indianapolis
    // ModifiedDateTime: 2016-07-25 오전 10:14:49
    // ContentsModifier: Member_suffixation
    // ContentsModifiedDateTime: 2016-07-25 오후 9:25:24
    class Table_quartileTable : public CremaTable<Table_quartileRow>
    {
    public: 
        Table_quartileTable();
        Table_quartileTable(CremaReader::itable& table);
    public: 
        virtual ~Table_quartileTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_quartileRow* Find(float travelogue) const;
    };
    class Table12Row : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned short Araucanian;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        const class Table12Table* Table;
    public: 
        Table12Row(CremaReader::irow& row, Table12Table* table);
    };
    // Creator: Member_jitterbugger
    // CreatedDateTime: 2016-07-25 오전 9:11:59
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:15:17
    // ContentsModifier: Admin_awesomeness
    // ContentsModifiedDateTime: 2016-07-25 오후 8:29:20
    class Table12Table : public CremaTable<Table12Row>
    {
    public: 
        Table12Table();
        Table12Table(CremaReader::itable& table);
    public: 
        virtual ~Table12Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table12Row* Find(double corpsman, bool jetting) const;
    };
    class Table202Row : public CremaRow
    {
    public: 
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오후 5:52:57
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 5:52:57
        bool kyle;
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오후 5:52:57
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 5:52:57
        Type_primitiveness strumpet;
        const class Table202Table* Table;
    public: 
        Table202Row(CremaReader::irow& row, Table202Table* table);
    };
    // Creator: Admin_energized
    // CreatedDateTime: 2016-07-25 오후 5:52:57
    // Modifier: Admin_energized
    // ModifiedDateTime: 2016-07-25 오후 5:52:57
    class Table202Table : public CremaTable<Table202Row>
    {
    public: 
        Table202Table();
        Table202Table(CremaReader::itable& table);
    public: 
        virtual ~Table202Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table202Row* Find(bool kyle) const;
    };
    class Table3Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 9:30:56
        unsigned short spiker;
        /// <summary>
        /// exemption Keller ringing fauvism talon Wit hypertension
        /// </summary>
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:59:42
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:59:42
        Type_teapot Celie;
        /// <summary>
        /// paramecium Teutonic recumbent Keillor smug scuff corker bandy Alain dissever fragile award coroutine backbreaking Madonna Jenifer
        /// </summary>
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:59:42
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:59:42
        unsigned char genetic;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:59:42
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:59:42
        unsigned char perpetuate;
        const class Table3Table* Table;
    public: 
        Table3Row(CremaReader::irow& row, Table3Table* table);
    };
    // Modifier: Admin_reggae
    // ModifiedDateTime: 2016-07-25 오전 10:59:42
    // ContentsModifier: Admin_distinctiveness
    // ContentsModifiedDateTime: 2016-07-25 오후 6:10:23
    class Table3Table : public CremaTable<Table3Row>
    {
    public: 
        Table3Table();
        Table3Table(CremaReader::itable& table);
    public: 
        virtual ~Table3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table3Row* Find(unsigned short spiker) const;
    };
    class Table63Row : public CremaRow
    {
    public: 
        /// <summary>
        /// photographically lowercase Ziegfeld tog thinned Duvalier horticultural
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:26:02
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:26:02
        std::string signaler;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:26:02
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:26:02
        float truster;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:26:02
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:26:02
        long long retro;
        const class Table63Table* Table;
    public: 
        Table63Row(CremaReader::irow& row, Table63Table* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오전 10:26:02
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:26:02
    // ContentsModifier: Admin_indoctrinator
    // ContentsModifiedDateTime: 2016-07-25 오후 1:35:21
    class Table63Table : public CremaTable<Table63Row>
    {
    public: 
        Table63Table();
        Table63Table(CremaReader::itable& table);
    public: 
        virtual ~Table63Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table63Row* Find(const std::string& signaler, float truster) const;
    };
    class Table136Row : public CremaRow
    {
    public: 
        /// <summary>
        /// solicitor
        /// </summary>
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오후 12:14:01
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오후 12:14:01
        Type_Attn Whitaker;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오후 12:14:01
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오후 12:14:01
        unsigned char fever;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오후 12:14:01
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오후 12:14:01
        char Waverley;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오후 12:14:01
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오후 12:14:01
        int Merline;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오후 12:14:01
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오후 12:14:01
        short Phineas;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오후 12:14:01
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오후 12:14:01
        int Rochella;
        const class Table136Table* Table;
    public: 
        Table136Row(CremaReader::irow& row, Table136Table* table);
    };
    // Creator: Admin_Augustus
    // CreatedDateTime: 2016-07-25 오후 12:14:01
    // Modifier: Admin_Augustus
    // ModifiedDateTime: 2016-07-25 오후 12:14:01
    class Table136Table : public CremaTable<Table136Row>
    {
    public: 
        Table136Table();
        Table136Table(CremaReader::itable& table);
    public: 
        virtual ~Table136Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table136Row* Find(Type_Attn Whitaker) const;
    };
    class Table66Row : public CremaRow
    {
    public: 
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:32:22
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:32:22
        char Rhineland;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:32:22
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:32:22
        char Dukie;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:32:22
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:32:22
        float optimizer;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:32:22
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:32:22
        std::string Chilean;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 10:32:22
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 10:32:22
        unsigned char mismanagement;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 3:09:38
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 3:09:38
        short Biddle;
        const class Table66Table* Table;
    public: 
        Table66Row(CremaReader::irow& row, Table66Table* table);
    };
    // Creator: Member_potage
    // CreatedDateTime: 2016-07-25 오전 10:32:22
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오후 3:09:38
    // ContentsModifier: Member_Tanhya
    // ContentsModifiedDateTime: 2016-07-25 오후 8:39:03
    class Table66Table : public CremaTable<Table66Row>
    {
    public: 
        Table66Table();
        Table66Table(CremaReader::itable& table);
    public: 
        virtual ~Table66Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table66Row* Find(char Rhineland) const;
    };
    class Table113Row : public CremaRow
    {
    public: 
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:39:27
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:39:27
        long long Gondwanaland;
        const class Table113Table* Table;
    public: 
        Table113Row(CremaReader::irow& row, Table113Table* table);
    };
    // Creator: Member_currant
    // CreatedDateTime: 2016-07-25 오전 11:39:27
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오전 11:39:27
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 8:21:41
    class Table113Table : public CremaTable<Table113Row>
    {
    public: 
        Table113Table();
        Table113Table(CremaReader::itable& table);
    public: 
        virtual ~Table113Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table113Row* Find(long long Gondwanaland) const;
    };
    class Table52Row : public CremaRow
    {
    public: 
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 9:53:31
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 9:53:31
        char humanest;
        const class Table52Table* Table;
    public: 
        Table52Row(CremaReader::irow& row, Table52Table* table);
    };
    // Creator: Admin_probationary
    // CreatedDateTime: 2016-07-25 오전 9:53:31
    // Modifier: Admin_probationary
    // ModifiedDateTime: 2016-07-25 오전 9:53:31
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오후 8:45:38
    class Table52Table : public CremaTable<Table52Row>
    {
    public: 
        Table52Table();
        Table52Table(CremaReader::itable& table);
    public: 
        virtual ~Table52Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table52Row* Find(char humanest) const;
    };
    class Table_glideRow : public CremaRow
    {
    public: 
        /// <summary>
        /// leveled soon bravo entered fatefulness mandolin appealer malicious particulate Cleon cit needlewomen proprioception folkway Bandung tool trimness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type8 misstep;
        /// <summary>
        /// betroth weekly anhydrous toilsome teletext crackup ledger fructose Elizabeth chivying regardless vestibule letdown Garvin
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        std::string Alistair;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type15 birth;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Abdel;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        unsigned long long cousinly;
        /// <summary>
        /// mayer tween Gaulish Marisa Delawarean sacrificer Hieronymus
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Paley;
        const class Table_glideTable* Table;
    public: 
        Table_glideRow(CremaReader::irow& row, Table_glideTable* table);
    };
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오전 9:39:09
    class Table_glideTable : public CremaTable<Table_glideRow>
    {
    public: 
        Table_glideTable();
        Table_glideTable(CremaReader::itable& table);
    public: 
        virtual ~Table_glideTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_glideRow* Find(Type8 misstep) const;
    };
    class Table179Row : public CremaRow
    {
    public: 
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오후 2:53:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오후 2:53:41
        std::string treacherousness;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오후 2:53:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오후 2:53:41
        Type_Jenelle McGrath;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오후 2:53:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오후 2:53:41
        float Pan;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오후 2:53:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오후 2:53:41
        bool bushmaster;
        /// <summary>
        /// cussed Catha violoncellist shoring delayer linefeed latticework prestidigitatorial piracy Sela suppressed rowel UCLA bead Annice
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오후 2:53:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오후 2:53:41
        char stamen;
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오후 2:53:41
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오후 2:53:41
        int thoughtlessness;
        const class Table179Table* Table;
    public: 
        Table179Row(CremaReader::irow& row, Table179Table* table);
    };
    // Creator: Admin_truck
    // CreatedDateTime: 2016-07-25 오후 2:53:41
    // Modifier: Admin_truck
    // ModifiedDateTime: 2016-07-25 오후 2:53:41
    // ContentsModifier: Member_nonjudicial
    // ContentsModifiedDateTime: 2016-07-25 오후 10:29:41
    class Table179Table : public CremaTable<Table179Row>
    {
    public: 
        Table179Table();
        Table179Table(CremaReader::itable& table);
    public: 
        virtual ~Table179Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table179Row* Find(const std::string& treacherousness, float Pan) const;
    };
    class Table_winglessChild2Row : public CremaRow
    {
    public: 
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        float Arawakan;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        long long candelabra;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        float polonium;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        short perigee;
        const class Table_winglessChild2Table* Table;
        const class Table_winglessRow* Parent;
    public: 
        Table_winglessChild2Row(CremaReader::irow& row, Table_winglessChild2Table* table);
    };
    // Creator: Member_Cecilia
    // CreatedDateTime: 2016-07-25 오전 11:06:16
    // Modifier: Member_Cecilia
    // ModifiedDateTime: 2016-07-25 오전 11:06:17
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오전 11:39:54
    class Table_winglessChild2Table : public CremaTable<Table_winglessChild2Row>
    {
    public: 
        Table_winglessChild2Table();
        Table_winglessChild2Table(CremaReader::itable& table);
        Table_winglessChild2Table(std::vector<class Table_winglessChild2Row*> rows);
    public: 
        virtual ~Table_winglessChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_winglessChild2Row* Find(float Arawakan) const;
    };
    class Table_winglessRow : public CremaRow
    {
    public: 
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:19:22
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오전 9:59:54
        unsigned char flaxseed;
        const class Table_winglessTable* Table;
        const Table_winglessChild2Table* Child2;
    private: 
        static Table_winglessChild2Table Child2Empty;
    public: 
        Table_winglessRow(CremaReader::irow& row, Table_winglessTable* table);
    friend static void Table_winglessSetChild2(Table_winglessRow* target, const std::vector<Table_winglessChild2Row*>& childs);
    };
    // Modifier: Member_Willamina
    // ModifiedDateTime: 2016-07-25 오전 11:54:53
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오전 11:39:54
    class Table_winglessTable : public CremaTable<Table_winglessRow>
    {
    public: 
        const Table_winglessChild2Table* Child2;
    public: 
        Table_winglessTable();
        Table_winglessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_winglessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_winglessRow* Find(unsigned char flaxseed) const;
    };
    class Table137Row : public CremaRow
    {
    public: 
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오후 12:14:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오후 12:14:53
        Type56 Rose;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오후 12:14:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오후 12:14:53
        std::string Filippa;
        /// <summary>
        /// tawdrily blond Napoleon Hendrika Rhine Lutheranism overpay frostiness temporary fireguard locking diarrhea Paraclete bout counterintelligence
        /// </summary>
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오후 12:14:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오후 12:14:53
        int Donnamarie;
        const class Table137Table* Table;
    public: 
        Table137Row(CremaReader::irow& row, Table137Table* table);
    };
    // Creator: Admin_perch
    // CreatedDateTime: 2016-07-25 오후 12:14:52
    // Modifier: Admin_perch
    // ModifiedDateTime: 2016-07-25 오후 12:14:53
    class Table137Table : public CremaTable<Table137Row>
    {
    public: 
        Table137Table();
        Table137Table(CremaReader::itable& table);
    public: 
        virtual ~Table137Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table137Row* Find(Type56 Rose) const;
    };
    class Table_ItoChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:23
        long long schism;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:23
        double BBC;
        /// <summary>
        /// retch uucp provabilities spastic renewal quiche Topsy stairway Erina quincy transmigrate flabbergast villager Dur striper narrowing Finlay
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        std::string Ge;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 9:13:03
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        Type_canted voluntariness;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 9:13:03
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        char grubbed;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오후 12:37:14
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오후 12:37:14
        double amicableness;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오후 12:37:14
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오후 12:37:14
        int gratuity;
        const class Table_ItoChild1Table* Table;
        const class Table_ItoRow* Parent;
    public: 
        Table_ItoChild1Row(CremaReader::irow& row, Table_ItoChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:23
    // Modifier: Member_succulent
    // ModifiedDateTime: 2016-07-25 오후 12:37:14
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 6:45:17
    class Table_ItoChild1Table : public CremaTable<Table_ItoChild1Row>
    {
    public: 
        Table_ItoChild1Table();
        Table_ItoChild1Table(CremaReader::itable& table);
        Table_ItoChild1Table(std::vector<class Table_ItoChild1Row*> rows);
    public: 
        virtual ~Table_ItoChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_ItoChild1Row* Find(long long schism) const;
    };
    class Table_ItoChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:24
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:24
        char gos;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        unsigned short photolysis;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        long long Liberian;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        double Palmyra;
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:30:38
        // Modifier: Admin_injection
        // ModifiedDateTime: 2016-07-25 오전 9:30:38
        time_t airbus;
        const class Table_ItoChild2Table* Table;
        const Table_ItoRow* Parent;
    public: 
        Table_ItoChild2Row(CremaReader::irow& row, Table_ItoChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:24
    // Modifier: Admin_injection
    // ModifiedDateTime: 2016-07-25 오전 9:30:38
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 6:45:17
    class Table_ItoChild2Table : public CremaTable<Table_ItoChild2Row>
    {
    public: 
        Table_ItoChild2Table();
        Table_ItoChild2Table(CremaReader::itable& table);
        Table_ItoChild2Table(std::vector<class Table_ItoChild2Row*> rows);
    public: 
        virtual ~Table_ItoChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_ItoChild2Row* Find(char gos) const;
    };
    class Table_ItoRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:07
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:07
        Type3 reprehensible;
        /// <summary>
        /// skillfulnesses came misread Albee Americanization uneducated
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 9:14:35
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 9:14:35
        time_t headmastership;
        /// <summary>
        /// concentrator
        /// </summary>
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 9:14:35
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 9:14:35
        short Gienah;
        // Creator: member
        // CreatedDateTime: 2016-07-25 오전 9:14:35
        // Modifier: member
        // ModifiedDateTime: 2016-07-25 오전 9:14:35
        float capo;
        const class Table_ItoTable* Table;
        const Table_ItoChild1Table* Child1;
        const Table_ItoChild2Table* Child2;
    private: 
        static Table_ItoChild1Table Child1Empty;
        static Table_ItoChild2Table Child2Empty;
    public: 
        Table_ItoRow(CremaReader::irow& row, Table_ItoTable* table);
    friend static void Table_ItoSetChild1(Table_ItoRow* target, const std::vector<Table_ItoChild1Row*>& childs);
        static void Table_ItoSetChild2(Table_ItoRow* target, const std::vector<Table_ItoChild2Row*>& childs);
    };
    // Modifier: member
    // ModifiedDateTime: 2016-07-25 오전 9:14:35
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 6:45:17
    class Table_ItoTable : public CremaTable<Table_ItoRow>
    {
    public: 
        const Table_ItoChild1Table* Child1;
        const Table_ItoChild2Table* Child2;
    public: 
        Table_ItoTable();
        Table_ItoTable(CremaReader::itable& table);
    public: 
        virtual ~Table_ItoTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_ItoRow* Find(Type3 reprehensible, short Gienah) const;
    };
    class Table_KatherynRow : public CremaRow
    {
    public: 
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        float seemliness;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        short sandpit;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned char carbonization;
        /// <summary>
        /// Lindi panel piousness marshallings certainty homier milquetoast Banneker Vermeer runaround mot Bataan corralled organizes ephemeris Giustina
        /// </summary>
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        std::string whacker;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 11:30:08
        unsigned int happing;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 1:10:14
        long long considerable;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 11:30:08
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 1:10:14
        double mis;
        /// <summary>
        /// southeaster pulser Melvin Alessandra peaty promulgate trowel Vila protocol enzymatic tweedy snottiness shiftless pealed assemblyman cackle
        /// </summary>
        // Creator: Admin_energized
        // CreatedDateTime: 2016-07-25 오후 1:10:14
        // Modifier: Admin_energized
        // ModifiedDateTime: 2016-07-25 오후 1:10:14
        std::string impairer;
        const class Table_KatherynTable* Table;
    public: 
        Table_KatherynRow(CremaReader::irow& row, Table_KatherynTable* table);
    };
    // Modifier: Admin_energized
    // ModifiedDateTime: 2016-07-25 오후 1:10:14
    // ContentsModifier: Member_whosoever
    // ContentsModifiedDateTime: 2016-07-25 오후 10:30:26
    class Table_KatherynTable : public CremaTable<Table_KatherynRow>
    {
    public: 
        Table_KatherynTable();
        Table_KatherynTable(CremaReader::itable& table);
    public: 
        virtual ~Table_KatherynTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_KatherynRow* Find(float seemliness) const;
    };
    class Table_LuciusChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        const class Table_LuciusChild1Table* Table;
        const class Table_LuciusRow* Parent;
    public: 
        Table_LuciusChild1Row(CremaReader::irow& row, Table_LuciusChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:01
    class Table_LuciusChild1Table : public CremaTable<Table_LuciusChild1Row>
    {
    public: 
        Table_LuciusChild1Table();
        Table_LuciusChild1Table(CremaReader::itable& table);
        Table_LuciusChild1Table(std::vector<class Table_LuciusChild1Row*> rows);
    public: 
        virtual ~Table_LuciusChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LuciusChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_LuciusChild_newsprintRow : public CremaRow
    {
    public: 
        /// <summary>
        /// allocative lobotomize Orwell horsedom Usenet campesinos Eolanda provincial Giralda dwarfish interaction psychopathology posterior obtuse balladeer
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        int outgrip;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        unsigned char condominium;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t guiltlessness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool splash;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool entrapping;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t Hamnet;
        const class Table_LuciusChild_newsprintTable* Table;
        const Table_LuciusRow* Parent;
    public: 
        Table_LuciusChild_newsprintRow(CremaReader::irow& row, Table_LuciusChild_newsprintTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오전 9:21:09
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:01
    class Table_LuciusChild_newsprintTable : public CremaTable<Table_LuciusChild_newsprintRow>
    {
    public: 
        Table_LuciusChild_newsprintTable();
        Table_LuciusChild_newsprintTable(CremaReader::itable& table);
        Table_LuciusChild_newsprintTable(std::vector<class Table_LuciusChild_newsprintRow*> rows);
    public: 
        virtual ~Table_LuciusChild_newsprintTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LuciusChild_newsprintRow* Find(int outgrip) const;
    };
    class Table_LuciusChild_nevusRow : public CremaRow
    {
    public: 
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        unsigned char repetition;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        std::string phonetician;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        std::string Nanni;
        /// <summary>
        /// Bernardino Armour Aventine drainboard Hedy steadiness Ionian circumnavigation pauperism palatine negligible souse urinary
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        bool monographs;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 9:26:33
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        long long humus;
        const class Table_LuciusChild_nevusTable* Table;
        const Table_LuciusRow* Parent;
    public: 
        Table_LuciusChild_nevusRow(CremaReader::irow& row, Table_LuciusChild_nevusTable* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오전 9:25:31
    // Modifier: Member_Cristy
    // ModifiedDateTime: 2016-07-25 오전 9:26:33
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:01
    class Table_LuciusChild_nevusTable : public CremaTable<Table_LuciusChild_nevusRow>
    {
    public: 
        Table_LuciusChild_nevusTable();
        Table_LuciusChild_nevusTable(CremaReader::itable& table);
        Table_LuciusChild_nevusTable(std::vector<class Table_LuciusChild_nevusRow*> rows);
    public: 
        virtual ~Table_LuciusChild_nevusTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LuciusChild_nevusRow* Find(unsigned char repetition) const;
    };
    class Table_LuciusChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// massive tapping symbiotic hammock prohibitionist flippable subsidizer steamboat diabolism ambit
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        long long vaginae;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        double obvious;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        unsigned int sachet;
        /// <summary>
        /// Martian fatigue conceivable clammily caftan chalet flashy fantail gemology quadrennium Gerda bewilder Bamby feasibility tanbark
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        Type11 underpayment;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:48:30
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:48:30
        char axle;
        const class Table_LuciusChild3Table* Table;
        const Table_LuciusRow* Parent;
    public: 
        Table_LuciusChild3Row(CremaReader::irow& row, Table_LuciusChild3Table* table);
    };
    // Creator: Member_Clary
    // CreatedDateTime: 2016-07-25 오전 10:48:30
    // Modifier: Member_Clary
    // ModifiedDateTime: 2016-07-25 오전 10:48:30
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:01
    class Table_LuciusChild3Table : public CremaTable<Table_LuciusChild3Row>
    {
    public: 
        Table_LuciusChild3Table();
        Table_LuciusChild3Table(CremaReader::itable& table);
        Table_LuciusChild3Table(std::vector<class Table_LuciusChild3Row*> rows);
    public: 
        virtual ~Table_LuciusChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LuciusChild3Row* Find(long long vaginae) const;
    };
    class Table_LuciusChild2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// gadder Bruno foolishness signore puddle Alhambra Siva Josey rowdy coconut buskin conciliar Jacquette defoliant dowse urge charbroil
        /// </summary>
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        float Enos;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        double pervasive;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        bool lubricator;
        // Creator: Member_pacifist
        // CreatedDateTime: 2016-07-25 오후 2:35:02
        // Modifier: Member_pacifist
        // ModifiedDateTime: 2016-07-25 오후 2:35:02
        std::string hallmark;
        const class Table_LuciusChild2Table* Table;
        const Table_LuciusRow* Parent;
    public: 
        Table_LuciusChild2Row(CremaReader::irow& row, Table_LuciusChild2Table* table);
    };
    // Creator: Member_pacifist
    // CreatedDateTime: 2016-07-25 오후 2:35:01
    // Modifier: Member_pacifist
    // ModifiedDateTime: 2016-07-25 오후 2:35:02
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:01
    class Table_LuciusChild2Table : public CremaTable<Table_LuciusChild2Row>
    {
    public: 
        Table_LuciusChild2Table();
        Table_LuciusChild2Table(CremaReader::itable& table);
        Table_LuciusChild2Table(std::vector<class Table_LuciusChild2Row*> rows);
    public: 
        virtual ~Table_LuciusChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LuciusChild2Row* Find(float Enos, const std::string& hallmark) const;
    };
    class Table_LuciusRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        const class Table_LuciusTable* Table;
        const Table_LuciusChild1Table* Child1;
        const Table_LuciusChild_newsprintTable* Child_newsprint;
        const Table_LuciusChild_nevusTable* Child_nevus;
        const Table_LuciusChild3Table* Child3;
        const Table_LuciusChild2Table* Child2;
    private: 
        static Table_LuciusChild1Table Child1Empty;
        static Table_LuciusChild_newsprintTable Child_newsprintEmpty;
        static Table_LuciusChild_nevusTable Child_nevusEmpty;
        static Table_LuciusChild3Table Child3Empty;
        static Table_LuciusChild2Table Child2Empty;
    public: 
        Table_LuciusRow(CremaReader::irow& row, Table_LuciusTable* table);
    friend static void Table_LuciusSetChild1(Table_LuciusRow* target, const std::vector<Table_LuciusChild1Row*>& childs);
        static void Table_LuciusSetChild_newsprint(Table_LuciusRow* target, const std::vector<Table_LuciusChild_newsprintRow*>& childs);
        static void Table_LuciusSetChild_nevus(Table_LuciusRow* target, const std::vector<Table_LuciusChild_nevusRow*>& childs);
        static void Table_LuciusSetChild3(Table_LuciusRow* target, const std::vector<Table_LuciusChild3Row*>& childs);
        static void Table_LuciusSetChild2(Table_LuciusRow* target, const std::vector<Table_LuciusChild2Row*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:03
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 9:28:01
    class Table_LuciusTable : public CremaTable<Table_LuciusRow>
    {
    public: 
        const Table_LuciusChild1Table* Child1;
        const Table_LuciusChild_newsprintTable* Child_newsprint;
        const Table_LuciusChild_nevusTable* Child_nevus;
        const Table_LuciusChild3Table* Child3;
        const Table_LuciusChild2Table* Child2;
    public: 
        Table_LuciusTable();
        Table_LuciusTable(CremaReader::itable& table);
    public: 
        virtual ~Table_LuciusTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LuciusRow* Find(double eviction) const;
    };
    class Table_MaxwellRow : public CremaRow
    {
    public: 
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        unsigned int Argentina;
        /// <summary>
        /// Aldebaran wraps illuminate froth customize tugboat thwarter vituperate disappointing Shafer slurp Willoughby
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        Type_Multan wingding;
        const class Table_MaxwellTable* Table;
    public: 
        Table_MaxwellRow(CremaReader::irow& row, Table_MaxwellTable* table);
    };
    // Modifier: Admin_miscegenation
    // ModifiedDateTime: 2016-07-25 오전 9:42:07
    class Table_MaxwellTable : public CremaTable<Table_MaxwellRow>
    {
    public: 
        Table_MaxwellTable();
        Table_MaxwellTable(CremaReader::itable& table);
    public: 
        virtual ~Table_MaxwellTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_MaxwellRow* Find(unsigned int Argentina) const;
    };
    class Table_bangRow : public CremaRow
    {
    public: 
        /// <summary>
        /// viva Mathewson jugful Roberta again Bergsten masseur
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 9:45:41
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        unsigned char pylori;
        /// <summary>
        /// Missoula Gordie steerer
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 9:45:41
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        unsigned short Kylen;
        /// <summary>
        /// Hapsburg burl sixtieths pendent geopolitics mincemeat Shanan dyne initiating neurology else chance improperness dignify whammy monogramming universality Nagoya
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오후 12:20:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        int zigzag;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오후 12:20:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        unsigned int Appolonia;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오후 12:20:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오후 12:20:56
        long long sahib;
        const class Table_bangTable* Table;
    public: 
        Table_bangRow(CremaReader::irow& row, Table_bangTable* table);
    };
    // Modifier: Member_budgie
    // ModifiedDateTime: 2016-07-25 오후 12:20:56
    // ContentsModifier: Member_Mickie
    // ContentsModifiedDateTime: 2016-07-25 오후 5:27:26
    class Table_bangTable : public CremaTable<Table_bangRow>
    {
    public: 
        Table_bangTable();
        Table_bangTable(CremaReader::itable& table);
    public: 
        virtual ~Table_bangTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_bangRow* Find(unsigned char pylori) const;
    };
    class Table_linemanChild_MoseRow : public CremaRow
    {
    public: 
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        short FTC;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        float scrubbed;
        /// <summary>
        /// Hung Robb collimated Weldwood Doralin Caxton Sophocles attainder spareness pro washy dauntlessness interpretative database
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        double Cotton;
        /// <summary>
        /// stopper gauze etherized Reidar castration brood
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        double bipedal;
        /// <summary>
        /// Moravia catheter casuist FOFL functionalist artificiality raggedness overdub corollary
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        long long GPO;
        /// <summary>
        /// ill idiolect
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        std::string Shurlock;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        short Pammy;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:46:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:46:43
        time_t overstressed;
        const class Table_linemanChild_MoseTable* Table;
        const class Table_linemanRow* Parent;
    public: 
        Table_linemanChild_MoseRow(CremaReader::irow& row, Table_linemanChild_MoseTable* table);
    };
    // Creator: Admin_getup
    // CreatedDateTime: 2016-07-25 오전 9:46:43
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 9:46:43
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 4:49:09
    class Table_linemanChild_MoseTable : public CremaTable<Table_linemanChild_MoseRow>
    {
    public: 
        Table_linemanChild_MoseTable();
        Table_linemanChild_MoseTable(CremaReader::itable& table);
        Table_linemanChild_MoseTable(std::vector<class Table_linemanChild_MoseRow*> rows);
    public: 
        virtual ~Table_linemanChild_MoseTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_linemanChild_MoseRow* Find(short FTC, short Pammy) const;
    };
    class Table_linemanRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int rattling;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        int deleterious;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:17:22
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:17:22
        long long Dalmatian;
        const class Table_linemanTable* Table;
        const Table_linemanChild_MoseTable* Child_Mose;
    private: 
        static Table_linemanChild_MoseTable Child_MoseEmpty;
    public: 
        Table_linemanRow(CremaReader::irow& row, Table_linemanTable* table);
    friend static void Table_linemanSetChild_Mose(Table_linemanRow* target, const std::vector<Table_linemanChild_MoseRow*>& childs);
    };
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 9:17:22
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오후 4:49:09
    class Table_linemanTable : public CremaTable<Table_linemanRow>
    {
    public: 
        const Table_linemanChild_MoseTable* Child_Mose;
    public: 
        Table_linemanTable();
        Table_linemanTable(CremaReader::itable& table);
    public: 
        virtual ~Table_linemanTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_linemanRow* Find(unsigned int snapback) const;
    };
    class Table100Row : public CremaRow
    {
    public: 
        /// <summary>
        /// rubberize swayer impugner arranging Cambridge brainwashing sanitizer
        /// </summary>
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:28:14
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:28:14
        int nosh;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:28:14
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:28:14
        Type_Arlan Dee;
        // Creator: Member_currant
        // CreatedDateTime: 2016-07-25 오전 11:28:14
        // Modifier: Member_currant
        // ModifiedDateTime: 2016-07-25 오전 11:28:14
        bool majesty;
        const class Table100Table* Table;
    public: 
        Table100Row(CremaReader::irow& row, Table100Table* table);
    };
    // Creator: Member_currant
    // CreatedDateTime: 2016-07-25 오전 11:28:14
    // Modifier: Member_currant
    // ModifiedDateTime: 2016-07-25 오전 11:28:14
    // ContentsModifier: Admin_motive
    // ContentsModifiedDateTime: 2016-07-25 오후 8:17:55
    class Table100Table : public CremaTable<Table100Row>
    {
    public: 
        Table100Table();
        Table100Table(CremaReader::itable& table);
    public: 
        virtual ~Table100Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table100Row* Find(int nosh) const;
    };
    class Table74Row : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 10:43:21
        double referral;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 10:43:21
        Type3 Tana;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 10:43:21
        Type4 baryon;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 10:43:21
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        int Shawnee;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:07:02
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        time_t ostensibly;
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:07:02
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        std::string Chrissie;
        /// <summary>
        /// jug Ileane Cossack masque ageless hacksaw serendipity farina Ticonderoga Seagram Gambian orbit supremacy whistler nil divinity Kurdish
        /// </summary>
        // Creator: Admin_whispering
        // CreatedDateTime: 2016-07-25 오전 11:07:02
        // Modifier: Admin_whispering
        // ModifiedDateTime: 2016-07-25 오전 11:07:02
        std::string needlewoman;
        const class Table74Table* Table;
    public: 
        Table74Row(CremaReader::irow& row, Table74Table* table);
    };
    // Creator: Member_jitterbugger
    // CreatedDateTime: 2016-07-25 오전 10:43:21
    // Modifier: Admin_whispering
    // ModifiedDateTime: 2016-07-25 오전 11:07:02
    class Table74Table : public CremaTable<Table74Row>
    {
    public: 
        Table74Table();
        Table74Table(CremaReader::itable& table);
    public: 
        virtual ~Table74Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table74Row* Find(double referral, Type4 baryon, const std::string& needlewoman) const;
    };
    class Table97Row : public CremaRow
    {
    public: 
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 11:23:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 11:23:14
        Type25 undereducated;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 11:23:14
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 12:26:24
        char wrap;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 11:23:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 11:23:14
        unsigned short LOGO;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 11:23:14
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 11:23:14
        time_t frozen;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 11:23:14
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:34:57
        unsigned short rummage;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 12:26:24
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 12:26:24
        unsigned long long disparate;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:34:57
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:34:57
        std::string slurrying;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 12:34:57
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 12:34:57
        double aeronautic;
        const class Table97Table* Table;
    public: 
        Table97Row(CremaReader::irow& row, Table97Table* table);
    };
    // Creator: Member_potage
    // CreatedDateTime: 2016-07-25 오전 11:23:14
    // Modifier: Member_deception
    // ModifiedDateTime: 2016-07-25 오후 12:34:57
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 1:25:49
    class Table97Table : public CremaTable<Table97Row>
    {
    public: 
        Table97Table();
        Table97Table(CremaReader::itable& table);
    public: 
        virtual ~Table97Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table97Row* Find(Type25 undereducated, unsigned short rummage) const;
    };
    class Table_archaicallyRow : public CremaRow
    {
    public: 
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        Type40 Bostitch;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        int Bonnee;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        Type_HeraclitusDeletable Mose;
        /// <summary>
        /// standee dispersant nurture syllogistic albumin dunned costiveness gladdy strove Les prick scurvy cogitate fibrous Antaeus
        /// </summary>
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        double valuable;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        time_t Diahann;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        std::string pizzeria;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        char bipartisanship;
        /// <summary>
        /// Ketty rahs bewigged Evenki doodle nonscientific Byzantium
        /// </summary>
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        std::string seagoing;
        const class Table_archaicallyTable* Table;
    public: 
        Table_archaicallyRow(CremaReader::irow& row, Table_archaicallyTable* table);
    };
    // Modifier: Member_dullness
    // ModifiedDateTime: 2016-07-25 오후 2:55:12
    class Table_archaicallyTable : public CremaTable<Table_archaicallyRow>
    {
    public: 
        Table_archaicallyTable();
        Table_archaicallyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_archaicallyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_archaicallyRow* Find(Type40 Bostitch, Type_HeraclitusDeletable Mose, time_t Diahann) const;
    };
    class Table_codenameRow : public CremaRow
    {
    public: 
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        int cuttlefish;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        unsigned long long cruse;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        unsigned long long yonder;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 4:50:20
        Type25 Michell;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        Type_primitiveness rabbet;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        int Sabra;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        time_t vulcanization;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        unsigned short Ilka;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        bool Waldheim;
        /// <summary>
        /// currycomb intactness Jackqueline Vivie increment slighting Marian streaky lambency RISC peppery interrogative Mignonne
        /// </summary>
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        int Curtice;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 4:50:20
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 4:50:20
        short anticlerical;
        /// <summary>
        /// hungover tapper waxy nonviolence cracker altimeter Chengdu coper Vespasian doing catarrhs screwdriver calligraphy burster Gradeigh anchored boiled
        /// </summary>
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 4:50:20
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 4:50:20
        float Pam;
        const class Table_codenameTable* Table;
    public: 
        Table_codenameRow(CremaReader::irow& row, Table_codenameTable* table);
    };
    // Modifier: Member_Maye
    // ModifiedDateTime: 2016-07-25 오후 4:50:20
    class Table_codenameTable : public CremaTable<Table_codenameRow>
    {
    public: 
        Table_codenameTable();
        Table_codenameTable(CremaReader::itable& table);
    public: 
        virtual ~Table_codenameTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_codenameRow* Find(int cuttlefish, unsigned long long yonder) const;
    };
    class Table_protectivenessRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table_protectivenessTable* Table;
    public: 
        Table_protectivenessRow(CremaReader::irow& row, Table_protectivenessTable* table);
    };
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    // ContentsModifier: Member_Ashby
    // ContentsModifiedDateTime: 2016-07-25 오후 9:26:43
    class Table_protectivenessTable : public CremaTable<Table_protectivenessRow>
    {
    public: 
        Table_protectivenessTable();
        Table_protectivenessTable(CremaReader::itable& table);
    public: 
        virtual ~Table_protectivenessTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_protectivenessRow* Find(Type6 lumberyard, char uncap) const;
    };
    class Table_dissuasiveRow : public CremaRow
    {
    public: 
        /// <summary>
        /// photographically lowercase Ziegfeld tog thinned Duvalier horticultural
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:26:02
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:26:02
        std::string signaler;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:26:02
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:26:02
        float truster;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:26:02
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:26:02
        long long retro;
        const class Table_dissuasiveTable* Table;
    public: 
        Table_dissuasiveRow(CremaReader::irow& row, Table_dissuasiveTable* table);
    };
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:26:02
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 6:44:48
    class Table_dissuasiveTable : public CremaTable<Table_dissuasiveRow>
    {
    public: 
        Table_dissuasiveTable();
        Table_dissuasiveTable(CremaReader::itable& table);
    public: 
        virtual ~Table_dissuasiveTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_dissuasiveRow* Find(const std::string& signaler, float truster) const;
    };
    class Table110Row : public CremaRow
    {
    public: 
        /// <summary>
        /// dirtiness Alabama leftist apprentice nonmalignant termcap cogged superimpose KY
        /// </summary>
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        double Mariel;
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        unsigned short reversioner;
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        short epigraph;
        /// <summary>
        /// Enoch carbonate bolster findable milquetoast plainness troubadour thermoluminescence
        /// </summary>
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        Type27 satire;
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        Type50 Oglethorpe;
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        float mappable;
        /// <summary>
        /// Genesis persuasively kowtow Bunche hypophysectomized create
        /// </summary>
        // Creator: Admin_indoctrinator
        // CreatedDateTime: 2016-07-25 오전 11:38:17
        // Modifier: Admin_indoctrinator
        // ModifiedDateTime: 2016-07-25 오전 11:38:17
        Type3 misquote;
        const class Table110Table* Table;
    public: 
        Table110Row(CremaReader::irow& row, Table110Table* table);
    };
    // Creator: Admin_indoctrinator
    // CreatedDateTime: 2016-07-25 오전 11:38:17
    // Modifier: Admin_indoctrinator
    // ModifiedDateTime: 2016-07-25 오전 11:38:17
    // ContentsModifier: Admin_commemoration
    // ContentsModifiedDateTime: 2016-07-25 오후 8:43:21
    class Table110Table : public CremaTable<Table110Row>
    {
    public: 
        Table110Table();
        Table110Table(CremaReader::itable& table);
    public: 
        virtual ~Table110Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table110Row* Find(double Mariel, float mappable) const;
    };
    class Table_relentChild_leafletRow : public CremaRow
    {
    public: 
        /// <summary>
        /// OJ gnawer citywide
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        unsigned char uninteresting;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        double Lafitte;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        double feater;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        std::string doggone;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        double midi;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 10:17:32
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        Type27 filament;
        /// <summary>
        /// popularizing wage linguistics undergraduate ionization adventitious tyrosine philanthropic infantryman monotheism feathering preset rubric retentiveness gunned found
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 10:17:32
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        Type_consortia Zorana;
        /// <summary>
        /// Berniece vermicelli lank inkling yuan Sella duxes Penny arsine electronics
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 10:17:32
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        Type_Meiji highish;
        const class Table_relentChild_leafletTable* Table;
        const class Table_relentRow* Parent;
    public: 
        Table_relentChild_leafletRow(CremaReader::irow& row, Table_relentChild_leafletTable* table);
    };
    // Creator: Admin_serviceableness
    // CreatedDateTime: 2016-07-25 오전 10:11:15
    // Modifier: Member_creel
    // ModifiedDateTime: 2016-07-25 오전 10:17:32
    class Table_relentChild_leafletTable : public CremaTable<Table_relentChild_leafletRow>
    {
    public: 
        Table_relentChild_leafletTable();
        Table_relentChild_leafletTable(CremaReader::itable& table);
        Table_relentChild_leafletTable(std::vector<class Table_relentChild_leafletRow*> rows);
    public: 
        virtual ~Table_relentChild_leafletTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_relentChild_leafletRow* Find(unsigned char uninteresting, double feater, Type_Meiji highish) const;
    };
    class Table_relentRow : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        unsigned short adviser;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 10:15:09
        Type_pledge Peterson;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        Type24 cumuli;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 10:15:09
        int analyzed;
        /// <summary>
        /// attached
        /// </summary>
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 10:15:09
        long long scowler;
        const class Table_relentTable* Table;
        const Table_relentChild_leafletTable* Child_leaflet;
    private: 
        static Table_relentChild_leafletTable Child_leafletEmpty;
    public: 
        Table_relentRow(CremaReader::irow& row, Table_relentTable* table);
    friend static void Table_relentSetChild_leaflet(Table_relentRow* target, const std::vector<Table_relentChild_leafletRow*>& childs);
    };
    // Modifier: Member_wholemeal
    // ModifiedDateTime: 2016-07-25 오전 10:15:09
    // ContentsModifier: Member_Stevena
    // ContentsModifiedDateTime: 2016-07-25 오전 11:35:21
    class Table_relentTable : public CremaTable<Table_relentRow>
    {
    public: 
        const Table_relentChild_leafletTable* Child_leaflet;
    public: 
        Table_relentTable();
        Table_relentTable(CremaReader::itable& table);
    public: 
        virtual ~Table_relentTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_relentRow* Find(unsigned short adviser) const;
    };
    class Table_chromatographyChild_admissionRow : public CremaRow
    {
    public: 
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:41:16
        unsigned long long Shackleton;
        /// <summary>
        /// ignominy
        /// </summary>
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:41:16
        std::string austereness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:41:16
        long long casaba;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:13:18
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:13:18
        bool reflection;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:41:16
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:41:16
        unsigned int scruffily;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:41:16
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:41:16
        float hierarchical;
        // Creator: Admin_probationary
        // CreatedDateTime: 2016-07-25 오전 11:41:16
        // Modifier: Admin_probationary
        // ModifiedDateTime: 2016-07-25 오전 11:41:16
        Type3 intentional;
        const class Table_chromatographyChild_admissionTable* Table;
        const class Table_chromatographyRow* Parent;
    public: 
        Table_chromatographyChild_admissionRow(CremaReader::irow& row, Table_chromatographyChild_admissionTable* table);
    };
    // Creator: Member_privatization
    // CreatedDateTime: 2016-07-25 오전 9:13:17
    // Modifier: Admin_probationary
    // ModifiedDateTime: 2016-07-25 오전 11:41:16
    class Table_chromatographyChild_admissionTable : public CremaTable<Table_chromatographyChild_admissionRow>
    {
    public: 
        Table_chromatographyChild_admissionTable();
        Table_chromatographyChild_admissionTable(CremaReader::itable& table);
        Table_chromatographyChild_admissionTable(std::vector<class Table_chromatographyChild_admissionRow*> rows);
    public: 
        virtual ~Table_chromatographyChild_admissionTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_chromatographyChild_admissionRow* Find(unsigned long long Shackleton) const;
    };
    class Table_chromatographyChild1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// genie electroencephalographic hominid Grayce guffaw putrescent decustomised kayak braille Anni Robbyn demagogy canniness
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        unsigned char hamster;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        Type3 badinage;
        /// <summary>
        /// purulence slutty Aler Montanan
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        Type33 misogamist;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        unsigned char anathema;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        short Armin;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:22
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:22
        time_t syllabusss;
        const class Table_chromatographyChild1Table* Table;
        const Table_chromatographyRow* Parent;
    public: 
        Table_chromatographyChild1Row(CremaReader::irow& row, Table_chromatographyChild1Table* table);
    };
    // Creator: Admin_mousse
    // CreatedDateTime: 2016-07-25 오전 11:13:22
    // Modifier: Admin_mousse
    // ModifiedDateTime: 2016-07-25 오전 11:13:22
    class Table_chromatographyChild1Table : public CremaTable<Table_chromatographyChild1Row>
    {
    public: 
        Table_chromatographyChild1Table();
        Table_chromatographyChild1Table(CremaReader::itable& table);
        Table_chromatographyChild1Table(std::vector<class Table_chromatographyChild1Row*> rows);
    public: 
        virtual ~Table_chromatographyChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_chromatographyChild1Row* Find(unsigned char hamster, Type33 misogamist) const;
    };
    class Table_chromatographyRow : public CremaRow
    {
    public: 
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t Stendhal;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        int cheerer;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t wreckage;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        time_t Andriette;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오전 5:53:33
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오전 5:53:33
        long long oviduct;
        const class Table_chromatographyTable* Table;
        const Table_chromatographyChild_admissionTable* Child_admission;
        const Table_chromatographyChild1Table* Child1;
    private: 
        static Table_chromatographyChild_admissionTable Child_admissionEmpty;
        static Table_chromatographyChild1Table Child1Empty;
    public: 
        Table_chromatographyRow(CremaReader::irow& row, Table_chromatographyTable* table);
    friend static void Table_chromatographySetChild_admission(Table_chromatographyRow* target, const std::vector<Table_chromatographyChild_admissionRow*>& childs);
        static void Table_chromatographySetChild1(Table_chromatographyRow* target, const std::vector<Table_chromatographyChild1Row*>& childs);
    };
    // Modifier: Member_scuzzy
    // ModifiedDateTime: 2016-07-25 오전 5:53:33
    class Table_chromatographyTable : public CremaTable<Table_chromatographyRow>
    {
    public: 
        const Table_chromatographyChild_admissionTable* Child_admission;
        const Table_chromatographyChild1Table* Child1;
    public: 
        Table_chromatographyTable();
        Table_chromatographyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_chromatographyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_chromatographyRow* Find(time_t Stendhal, int cheerer) const;
    };
    class Table_CPIChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Patti;
        /// <summary>
        /// jamboree path bedded crablike sliced drubber radiosterilization Martinez Mugabe slough Mirilla Harv Genevieve hairsbreadth
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        double glazed;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        bool diffract;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        unsigned int calamitous;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Cranmer;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:53:45
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:53:45
        int Volvo;
        const class Table_CPIChild1Table* Table;
        const class Table_CPIRow* Parent;
    public: 
        Table_CPIChild1Row(CremaReader::irow& row, Table_CPIChild1Table* table);
    };
    // Creator: Admin_snootily
    // CreatedDateTime: 2016-07-25 오전 9:53:45
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오전 9:53:45
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 10:29:55
    class Table_CPIChild1Table : public CremaTable<Table_CPIChild1Row>
    {
    public: 
        Table_CPIChild1Table();
        Table_CPIChild1Table(CremaReader::itable& table);
        Table_CPIChild1Table(std::vector<class Table_CPIChild1Row*> rows);
    public: 
        virtual ~Table_CPIChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CPIChild1Row* Find(int Patti, bool diffract) const;
    };
    class Table_CPIRow : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int snapback;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int caseworker;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int Adonis;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int borderer;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        int trollish;
        /// <summary>
        /// Alan Frankfurter hemorrhagic Jehoshaphat
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        bool lukewarm;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned char South;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 9:14:09
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 9:14:09
        unsigned int wagging;
        const class Table_CPITable* Table;
        const Table_CPIChild1Table* Child1;
    private: 
        static Table_CPIChild1Table Child1Empty;
    public: 
        Table_CPIRow(CremaReader::irow& row, Table_CPITable* table);
    friend static void Table_CPISetChild1(Table_CPIRow* target, const std::vector<Table_CPIChild1Row*>& childs);
    };
    // Modifier: Member_budgie
    // ModifiedDateTime: 2016-07-25 오전 9:14:09
    // ContentsModifier: Admin_snootily
    // ContentsModifiedDateTime: 2016-07-25 오후 10:29:55
    class Table_CPITable : public CremaTable<Table_CPIRow>
    {
    public: 
        const Table_CPIChild1Table* Child1;
    public: 
        Table_CPITable();
        Table_CPITable(CremaReader::itable& table);
    public: 
        virtual ~Table_CPITable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_CPIRow* Find(unsigned int snapback) const;
    };
    class Table_metempsychosesChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        int parabolic;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned short syncopation;
        /// <summary>
        /// husk transceiver Derk theatric alibi pilferage Fermi adjust Ilysa demonic binocular fidget Carmelia isochronal Xanthus Quixotism departmentalize Beardsley
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        bool steamroller;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        long long purloiner;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오후 5:59:37
        short membership;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned int Redondo;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        char peach;
        /// <summary>
        /// deicer communion uncivilized forthcoming LPG searcher Cathee mapmaker bode bushel curvature cause addresser lumpiness clog calculable spikiness nobleness
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:08:56
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:08:56
        long long asbestos;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:08:56
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오후 5:59:37
        unsigned short rectory;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오후 5:59:37
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오후 5:59:37
        unsigned long long printable;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오후 5:59:37
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오후 5:59:37
        Type_housebreaking synapse;
        const class Table_metempsychosesChild1Table* Table;
        const class Table_metempsychosesRow* Parent;
    public: 
        Table_metempsychosesChild1Row(CremaReader::irow& row, Table_metempsychosesChild1Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 9:25:57
    // Modifier: Member_succulent
    // ModifiedDateTime: 2016-07-25 오후 5:59:37
    // ContentsModifier: Member_whosoever
    // ContentsModifiedDateTime: 2016-07-25 오전 9:45:02
    class Table_metempsychosesChild1Table : public CremaTable<Table_metempsychosesChild1Row>
    {
    public: 
        Table_metempsychosesChild1Table();
        Table_metempsychosesChild1Table(CremaReader::itable& table);
        Table_metempsychosesChild1Table(std::vector<class Table_metempsychosesChild1Row*> rows);
    public: 
        virtual ~Table_metempsychosesChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_metempsychosesChild1Row* Find(int parabolic, short membership) const;
    };
    class Table_metempsychosesRow : public CremaRow
    {
    public: 
        /// <summary>
        /// bulwark Jared sat flatus illegibly dew formic
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:16:26
        unsigned long long marginalia;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        long long chatted;
        /// <summary>
        /// shallowness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        std::string dutiful;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:18:59
        unsigned int Rozella;
        /// <summary>
        /// matriculate ungrudging Ferdinanda deliver tightwad
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:16:26
        char rewedding;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        unsigned short brunet;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        short sweeping;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오전 11:18:59
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:18:59
        int priesthood;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:16:26
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:16:26
        short snatch;
        // Creator: Admin_enshroud
        // CreatedDateTime: 2016-07-25 오후 6:16:26
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오후 6:16:26
        unsigned char highhandedness;
        const class Table_metempsychosesTable* Table;
        const Table_metempsychosesChild1Table* Child1;
    private: 
        static Table_metempsychosesChild1Table Child1Empty;
    public: 
        Table_metempsychosesRow(CremaReader::irow& row, Table_metempsychosesTable* table);
    friend static void Table_metempsychosesSetChild1(Table_metempsychosesRow* target, const std::vector<Table_metempsychosesChild1Row*>& childs);
    };
    // Modifier: Admin_enshroud
    // ModifiedDateTime: 2016-07-25 오후 6:16:26
    // ContentsModifier: Member_whosoever
    // ContentsModifiedDateTime: 2016-07-25 오전 9:45:02
    class Table_metempsychosesTable : public CremaTable<Table_metempsychosesRow>
    {
    public: 
        const Table_metempsychosesChild1Table* Child1;
    public: 
        Table_metempsychosesTable();
        Table_metempsychosesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_metempsychosesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_metempsychosesRow* Find(unsigned long long marginalia, long long chatted) const;
    };
    class Table122Row : public CremaRow
    {
    public: 
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오전 11:51:11
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오후 12:38:25
        Type8 millipede;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오전 11:51:11
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오전 11:51:11
        unsigned long long Lucilia;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오전 11:51:11
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오전 11:51:11
        unsigned int conjecturer;
        /// <summary>
        /// spinsterish BITNET ugh blemish preprogrammed Polyphemus eavesdropped situational possibly
        /// </summary>
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오전 11:51:11
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오후 12:38:25
        Type21 emergent;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오후 12:38:25
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오후 12:38:25
        int preserver;
        const class Table122Table* Table;
    public: 
        Table122Row(CremaReader::irow& row, Table122Table* table);
    };
    // Creator: Member_Edgardo
    // CreatedDateTime: 2016-07-25 오전 11:51:11
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오후 12:38:25
    class Table122Table : public CremaTable<Table122Row>
    {
    public: 
        Table122Table();
        Table122Table(CremaReader::itable& table);
    public: 
        virtual ~Table122Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table122Row* Find(Type8 millipede, Type21 emergent) const;
    };
    class Table134Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table134Table* Table;
    public: 
        Table134Row(CremaReader::irow& row, Table134Table* table);
    };
    // Creator: Member_neurosis
    // CreatedDateTime: 2016-07-25 오후 12:13:12
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    // ContentsModifier: Member_schoolchild
    // ContentsModifiedDateTime: 2016-07-25 오후 9:59:58
    class Table134Table : public CremaTable<Table134Row>
    {
    public: 
        Table134Table();
        Table134Table(CremaReader::itable& table);
    public: 
        virtual ~Table134Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table134Row* Find(Type6 lumberyard, char uncap) const;
    };
    class Table25Row : public CremaRow
    {
    public: 
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:23:26
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:23:26
        short payed;
        /// <summary>
        /// limitless testatrices Kristian malevolence Loella Carolynn
        /// </summary>
        // Creator: Admin_truck
        // CreatedDateTime: 2016-07-25 오전 9:23:26
        // Modifier: Admin_truck
        // ModifiedDateTime: 2016-07-25 오전 9:23:26
        unsigned int Neville;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:34:08
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:34:08
        long long loom;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:34:08
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:34:08
        std::string laxativeness;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 10:37:26
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 10:37:26
        std::string exploitation;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 10:37:26
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 10:37:26
        unsigned long long stencil;
        const class Table25Table* Table;
    public: 
        Table25Row(CremaReader::irow& row, Table25Table* table);
    };
    // Creator: Admin_truck
    // CreatedDateTime: 2016-07-25 오전 9:23:26
    // Modifier: Admin_therefore
    // ModifiedDateTime: 2016-07-25 오전 10:37:26
    // ContentsModifier: Member_privatization
    // ContentsModifiedDateTime: 2016-07-25 오후 9:09:36
    class Table25Table : public CremaTable<Table25Row>
    {
    public: 
        Table25Table();
        Table25Table(CremaReader::itable& table);
    public: 
        virtual ~Table25Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table25Row* Find(short payed) const;
    };
    class Table73Row : public CremaRow
    {
    public: 
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:42:27
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        char wicking;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:42:27
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        time_t Kerstin;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:42:27
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 10:42:27
        bool Baudoin;
        /// <summary>
        /// MRI eyelid behavior hummingbird cumulonimbi antiquation Urbanus dragoon
        /// </summary>
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:42:27
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 10:42:27
        double Fitzroy;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:42:27
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        char Macmillan;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 10:42:27
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 10:42:27
        short Mannie;
        /// <summary>
        /// cask augury beguine passel Rance Arizonian ceramic lifelike leery philosophized arrhythmia Danit canceled barfly Hanson Alighieri management stolon
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:46:51
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        bool dotage;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:46:51
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        int Asturias;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:46:51
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        time_t milliard;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:46:51
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:46:51
        short congregational;
        const class Table73Table* Table;
    public: 
        Table73Row(CremaReader::irow& row, Table73Table* table);
    };
    // Creator: Member_Cecilia
    // CreatedDateTime: 2016-07-25 오전 10:42:27
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:46:51
    // ContentsModifier: Admin_reggae
    // ContentsModifiedDateTime: 2016-07-25 오전 10:59:05
    class Table73Table : public CremaTable<Table73Row>
    {
    public: 
        Table73Table();
        Table73Table(CremaReader::itable& table);
    public: 
        virtual ~Table73Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table73Row* Find(char wicking, short Mannie) const;
    };
    class Table_oxidizesChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned short woodlouse;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Letitia;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int Livonia;
        /// <summary>
        /// Lowery turpentine
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Praia;
        /// <summary>
        /// housekeep nontarnishable
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string Christmas;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int earner;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        int forwent;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        unsigned int dependability;
        const class Table_oxidizesChild1Table* Table;
        const class Table_oxidizesRow* Parent;
    public: 
        Table_oxidizesChild1Row(CremaReader::irow& row, Table_oxidizesChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    class Table_oxidizesChild1Table : public CremaTable<Table_oxidizesChild1Row>
    {
    public: 
        Table_oxidizesChild1Table();
        Table_oxidizesChild1Table(CremaReader::itable& table);
        Table_oxidizesChild1Table(std::vector<class Table_oxidizesChild1Row*> rows);
    public: 
        virtual ~Table_oxidizesChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_oxidizesChild1Row* Find(unsigned short woodlouse) const;
    };
    class Table_oxidizesChild2Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        char Lynn;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short clause;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        short scrupulosity;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned short abbrev;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        unsigned char microdot;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:13
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:13
        Type_Multan Estes;
        const class Table_oxidizesChild2Table* Table;
        const Table_oxidizesRow* Parent;
    public: 
        Table_oxidizesChild2Row(CremaReader::irow& row, Table_oxidizesChild2Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:13
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:13
    class Table_oxidizesChild2Table : public CremaTable<Table_oxidizesChild2Row>
    {
    public: 
        Table_oxidizesChild2Table();
        Table_oxidizesChild2Table(CremaReader::itable& table);
        Table_oxidizesChild2Table(std::vector<class Table_oxidizesChild2Row*> rows);
    public: 
        virtual ~Table_oxidizesChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_oxidizesChild2Row* Find(char Lynn, unsigned short abbrev) const;
    };
    class Table_oxidizesChild_tapiocaRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned char illegality;
        /// <summary>
        /// cavity Nauru workableness overeagerness King inlander Wroclaw Rachel hark digitalization Geoffry algebra approacher deceitful pigswill autosuggestibility embouchure
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int metricize;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        std::string bong;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int confound;
        /// <summary>
        /// muffle Sprint lobby footstool Harriet joust diligentness savior Vandyke burliness Gunther tripoli grunter incorruptibly Maker Araldo ramrodding Falwell muteness
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        bool coprophagous;
        /// <summary>
        /// bevy unwaivering ichthyology cradling
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:27
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:27
        unsigned int rosin;
        const class Table_oxidizesChild_tapiocaTable* Table;
        const Table_oxidizesRow* Parent;
    public: 
        Table_oxidizesChild_tapiocaRow(CremaReader::irow& row, Table_oxidizesChild_tapiocaTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:27
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:27
    class Table_oxidizesChild_tapiocaTable : public CremaTable<Table_oxidizesChild_tapiocaRow>
    {
    public: 
        Table_oxidizesChild_tapiocaTable();
        Table_oxidizesChild_tapiocaTable(CremaReader::itable& table);
        Table_oxidizesChild_tapiocaTable(std::vector<class Table_oxidizesChild_tapiocaRow*> rows);
    public: 
        virtual ~Table_oxidizesChild_tapiocaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_oxidizesChild_tapiocaRow* Find(unsigned char illegality, unsigned int metricize, unsigned int confound, unsigned int rosin) const;
    };
    class Table_oxidizesRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Multan multiplicative;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Meiji math;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Meiji rickshaw;
        /// <summary>
        /// Orlando obliviousness conventicle Samuelson formalin kitten mouth exploded archeology
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        Type_Arlan dimmed;
        /// <summary>
        /// cleanable wishful unforced MB Pelee meatloaves represented
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:05
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:05
        double bucker;
        const class Table_oxidizesTable* Table;
        const Table_oxidizesChild1Table* Child1;
        const Table_oxidizesChild2Table* Child2;
        const Table_oxidizesChild_tapiocaTable* Child_tapioca;
    private: 
        static Table_oxidizesChild1Table Child1Empty;
        static Table_oxidizesChild2Table Child2Empty;
        static Table_oxidizesChild_tapiocaTable Child_tapiocaEmpty;
    public: 
        Table_oxidizesRow(CremaReader::irow& row, Table_oxidizesTable* table);
    friend static void Table_oxidizesSetChild1(Table_oxidizesRow* target, const std::vector<Table_oxidizesChild1Row*>& childs);
        static void Table_oxidizesSetChild2(Table_oxidizesRow* target, const std::vector<Table_oxidizesChild2Row*>& childs);
        static void Table_oxidizesSetChild_tapioca(Table_oxidizesRow* target, const std::vector<Table_oxidizesChild_tapiocaRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:05
    class Table_oxidizesTable : public CremaTable<Table_oxidizesRow>
    {
    public: 
        const Table_oxidizesChild1Table* Child1;
        const Table_oxidizesChild2Table* Child2;
        const Table_oxidizesChild_tapiocaTable* Child_tapioca;
    public: 
        Table_oxidizesTable();
        Table_oxidizesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_oxidizesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_oxidizesRow* Find(Type_Multan multiplicative) const;
    };
    class Table_KerouacRow : public CremaRow
    {
    public: 
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오전 9:46:48
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        Type_applejack Sinclare;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        unsigned short theosophical;
        /// <summary>
        /// emotionless minidress townsmen Beelzebub nonjudgmental
        /// </summary>
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 1:29:14
        double Edith;
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 1:29:14
        unsigned int Drugi;
        /// <summary>
        /// terrorized torpid plater corny aqua Francyne viable sherbet sadistically Waterloo gasometer beckon conversational Thimbu
        /// </summary>
        // Creator: Member_succulent
        // CreatedDateTime: 2016-07-25 오전 11:58:31
        // Modifier: Member_succulent
        // ModifiedDateTime: 2016-07-25 오전 11:58:31
        int bemused;
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 1:29:14
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 1:29:14
        short Tobie;
        /// <summary>
        /// pious fovea ionic resistor Kati Michelson hardiness Marabel intravenous
        /// </summary>
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 1:29:14
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 1:49:03
        unsigned long long masculine;
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 1:29:14
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 1:29:14
        Type55 briefed;
        // Creator: Admin_Geno
        // CreatedDateTime: 2016-07-25 오후 1:29:14
        // Modifier: Admin_Geno
        // ModifiedDateTime: 2016-07-25 오후 1:29:14
        Type_insolent juxtaposition;
        /// <summary>
        /// subsequence poem
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 1:49:03
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 1:49:03
        bool pater;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 1:49:03
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 1:49:03
        unsigned long long Nigeria;
        /// <summary>
        /// interfaith Lynna gumboil unflappable clambake Alyson Wrigley touching princely Jeddy
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오후 1:49:03
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오후 1:49:03
        unsigned char scooper;
        const class Table_KerouacTable* Table;
    public: 
        Table_KerouacRow(CremaReader::irow& row, Table_KerouacTable* table);
    };
    // Modifier: Member_deception
    // ModifiedDateTime: 2016-07-25 오후 1:49:03
    // ContentsModifier: Member_scuzzy
    // ContentsModifiedDateTime: 2016-07-25 오후 5:28:02
    class Table_KerouacTable : public CremaTable<Table_KerouacRow>
    {
    public: 
        Table_KerouacTable();
        Table_KerouacTable(CremaReader::itable& table);
    public: 
        virtual ~Table_KerouacTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_KerouacRow* Find(Type_applejack Sinclare, unsigned long long masculine) const;
    };
    class Table13Row : public CremaRow
    {
    public: 
        /// <summary>
        /// shimmer Stefania plainsong postdate cognoscenti resurrection fantastical Wallache repudiation motion
        /// </summary>
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:27
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:32:43
        float spoiled;
        /// <summary>
        /// cookout opulence reassuringly slake enumerator Ardyce Alcyone nonesuch
        /// </summary>
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:27
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 9:14:05
        Type_Arlan serviles;
        /// <summary>
        /// Julius
        /// </summary>
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:27
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:27
        long long nemesis;
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:12:27
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:12:27
        unsigned int Hamil;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 9:32:43
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 9:32:43
        Type_Meiji Theodora;
        const class Table13Table* Table;
    public: 
        Table13Row(CremaReader::irow& row, Table13Table* table);
    };
    // Creator: Member_noncredit
    // CreatedDateTime: 2016-07-25 오전 9:12:27
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 9:32:43
    // ContentsModifier: Admin_cofferdam
    // ContentsModifiedDateTime: 2016-07-25 오후 2:33:04
    class Table13Table : public CremaTable<Table13Row>
    {
    public: 
        Table13Table();
        Table13Table(CremaReader::itable& table);
    public: 
        virtual ~Table13Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table13Row* Find(float spoiled) const;
    };
    class Table_gangliaChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:23
        long long schism;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:35:40
        double BBC;
        /// <summary>
        /// retch uucp provabilities spastic renewal quiche Topsy stairway Erina quincy transmigrate flabbergast villager Dur striper narrowing Finlay
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:23
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        std::string Ge;
        // Creator: Member_nonjudicial
        // CreatedDateTime: 2016-07-25 오전 9:13:03
        // Modifier: Member_nonjudicial
        // ModifiedDateTime: 2016-07-25 오전 9:13:03
        char grubbed;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:35:40
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:35:40
        std::string sturdiness;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:35:40
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:35:40
        bool Lombardy;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:35:40
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:35:40
        std::string Dredi;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 9:35:40
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 9:35:40
        short sportsmanship;
        const class Table_gangliaChild1Table* Table;
        const class Table_gangliaRow* Parent;
    public: 
        Table_gangliaChild1Row(CremaReader::irow& row, Table_gangliaChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:23
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 9:35:40
    class Table_gangliaChild1Table : public CremaTable<Table_gangliaChild1Row>
    {
    public: 
        Table_gangliaChild1Table();
        Table_gangliaChild1Table(CremaReader::itable& table);
        Table_gangliaChild1Table(std::vector<class Table_gangliaChild1Row*> rows);
    public: 
        virtual ~Table_gangliaChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_gangliaChild1Row* Find(long long schism) const;
    };
    class Table_gangliaChild_frostbiteRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:24
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:24
        char gos;
        const class Table_gangliaChild_frostbiteTable* Table;
        const Table_gangliaRow* Parent;
    public: 
        Table_gangliaChild_frostbiteRow(CremaReader::irow& row, Table_gangliaChild_frostbiteTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:24
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:24
    class Table_gangliaChild_frostbiteTable : public CremaTable<Table_gangliaChild_frostbiteRow>
    {
    public: 
        Table_gangliaChild_frostbiteTable();
        Table_gangliaChild_frostbiteTable(CremaReader::itable& table);
        Table_gangliaChild_frostbiteTable(std::vector<class Table_gangliaChild_frostbiteRow*> rows);
    public: 
        virtual ~Table_gangliaChild_frostbiteTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_gangliaChild_frostbiteRow* Find(char gos) const;
    };
    class Table_gangliaRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:07
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:07
        Type3 reprehensible;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:22:18
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:22:18
        int stealthy;
        /// <summary>
        /// ozone companionship
        /// </summary>
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:22:18
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:22:18
        double unlucky;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오전 9:22:18
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오전 9:22:18
        unsigned long long Delhi;
        const class Table_gangliaTable* Table;
        const Table_gangliaChild1Table* Child1;
        const Table_gangliaChild_frostbiteTable* Child_frostbite;
    private: 
        static Table_gangliaChild1Table Child1Empty;
        static Table_gangliaChild_frostbiteTable Child_frostbiteEmpty;
    public: 
        Table_gangliaRow(CremaReader::irow& row, Table_gangliaTable* table);
    friend static void Table_gangliaSetChild1(Table_gangliaRow* target, const std::vector<Table_gangliaChild1Row*>& childs);
        static void Table_gangliaSetChild_frostbite(Table_gangliaRow* target, const std::vector<Table_gangliaChild_frostbiteRow*>& childs);
    };
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오전 9:22:18
    class Table_gangliaTable : public CremaTable<Table_gangliaRow>
    {
    public: 
        const Table_gangliaChild1Table* Child1;
        const Table_gangliaChild_frostbiteTable* Child_frostbite;
    public: 
        Table_gangliaTable();
        Table_gangliaTable(CremaReader::itable& table);
    public: 
        virtual ~Table_gangliaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_gangliaRow* Find(Type3 reprehensible) const;
    };
    class Table_approveChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        int parabolic;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned short syncopation;
        /// <summary>
        /// husk transceiver Derk theatric alibi pilferage Fermi adjust Ilysa demonic binocular fidget Carmelia isochronal Xanthus Quixotism departmentalize Beardsley
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        bool steamroller;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        short rattrap;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned int Redondo;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        char peach;
        const class Table_approveChild1Table* Table;
        const class Table_approveRow* Parent;
    public: 
        Table_approveChild1Row(CremaReader::irow& row, Table_approveChild1Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 9:25:57
    // Modifier: Member_constipate
    // ModifiedDateTime: 2016-07-25 오전 9:25:57
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오후 1:04:04
    class Table_approveChild1Table : public CremaTable<Table_approveChild1Row>
    {
    public: 
        Table_approveChild1Table();
        Table_approveChild1Table(CremaReader::itable& table);
        Table_approveChild1Table(std::vector<class Table_approveChild1Row*> rows);
    public: 
        virtual ~Table_approveChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_approveChild1Row* Find(int parabolic, short rattrap) const;
    };
    class Table_approveRow : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long marginalia;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        long long chatted;
        /// <summary>
        /// shallowness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        std::string dutiful;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long strangulate;
        /// <summary>
        /// June Andalusian
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        time_t jazz;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned int Rozella;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        char patrician;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        unsigned short brunet;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        short sweeping;
        const class Table_approveTable* Table;
        const Table_approveChild1Table* Child1;
    private: 
        static Table_approveChild1Table Child1Empty;
    public: 
        Table_approveRow(CremaReader::irow& row, Table_approveTable* table);
    friend static void Table_approveSetChild1(Table_approveRow* target, const std::vector<Table_approveChild1Row*>& childs);
    };
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오전 9:23:46
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오후 1:04:04
    class Table_approveTable : public CremaTable<Table_approveRow>
    {
    public: 
        const Table_approveChild1Table* Child1;
    public: 
        Table_approveTable();
        Table_approveTable(CremaReader::itable& table);
    public: 
        virtual ~Table_approveTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_approveRow* Find(unsigned long long marginalia, long long chatted) const;
    };
    class Table_SCRow : public CremaRow
    {
    public: 
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        int immediacy;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        short dateline;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type_Gretta setup;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        double lettering;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        Type_Multan colatitude;
        /// <summary>
        /// zestfulness burdock Lynnelle groveling smilax Linton wirehair Sib honored Boise stockholder kiddish Agretha dominant Adolphe elderliness fuhrer Ethyl
        /// </summary>
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        char Sam;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_distinctiveness
        // ModifiedDateTime: 2016-07-25 오전 9:20:56
        float maleficence;
        // Creator: Admin_distinctiveness
        // CreatedDateTime: 2016-07-25 오전 9:20:56
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 10:55:22
        Type1 Fermi;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 10:55:22
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 10:55:22
        Type_Madison Evered;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 10:55:22
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 10:55:22
        long long isthmian;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 10:55:22
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 10:55:22
        time_t callosity;
        const class Table_SCTable* Table;
    public: 
        Table_SCRow(CremaReader::irow& row, Table_SCTable* table);
    };
    // Modifier: Admin_Augustus
    // ModifiedDateTime: 2016-07-25 오전 10:55:22
    class Table_SCTable : public CremaTable<Table_SCRow>
    {
    public: 
        Table_SCTable();
        Table_SCTable(CremaReader::itable& table);
    public: 
        virtual ~Table_SCTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_SCRow* Find(int immediacy, double lettering, Type_Multan colatitude, float maleficence, Type_Madison Evered) const;
    };
    class Table_ReadeRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Ca
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type6 lumberyard;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        int Carl;
        /// <summary>
        /// thou retsina visitant housecleaning subprogram Griff prompt Thespis acoustic Lonni mercurial mutterer cuttlefish ablaze rebate
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        bool firearm;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        char uncap;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        unsigned int chairwoman;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오후 12:13:12
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오후 12:13:12
        Type8 Bassett;
        const class Table_ReadeTable* Table;
    public: 
        Table_ReadeRow(CremaReader::irow& row, Table_ReadeTable* table);
    };
    // Modifier: Member_neurosis
    // ModifiedDateTime: 2016-07-25 오후 12:13:12
    // ContentsModifier: Admin_Geno
    // ContentsModifiedDateTime: 2016-07-25 오후 9:12:34
    class Table_ReadeTable : public CremaTable<Table_ReadeRow>
    {
    public: 
        Table_ReadeTable();
        Table_ReadeTable(CremaReader::itable& table);
    public: 
        virtual ~Table_ReadeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_ReadeRow* Find(Type6 lumberyard, char uncap) const;
    };
    class Table201Row : public CremaRow
    {
    public: 
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        time_t ultimateness;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        double erosive;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        int tackler;
        /// <summary>
        /// desirousness terrorize nonscheduled mammalian Julius sizes map Songhai vulgarity archaically implausible charisma basswood Napoleon venison Tatiana
        /// </summary>
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        unsigned int Glass;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        float amylase;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 5:52:44
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 5:52:44
        std::string impose;
        const class Table201Table* Table;
    public: 
        Table201Row(CremaReader::irow& row, Table201Table* table);
    };
    // Creator: Member_nubbin
    // CreatedDateTime: 2016-07-25 오후 5:52:44
    // Modifier: Member_nubbin
    // ModifiedDateTime: 2016-07-25 오후 5:52:44
    // ContentsModifier: Member_flog
    // ContentsModifiedDateTime: 2016-07-25 오후 10:30:20
    class Table201Table : public CremaTable<Table201Row>
    {
    public: 
        Table201Table();
        Table201Table(CremaReader::itable& table);
    public: 
        virtual ~Table201Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table201Row* Find(time_t ultimateness, unsigned int Glass, const std::string& impose) const;
    };
    class Table_culpritRow : public CremaRow
    {
    public: 
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        int Elie;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        short traction;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        time_t cartload;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 11:41:32
        time_t Cartwright;
        /// <summary>
        /// hoist scriber dimorphism Jerri bestiary asteroidal Florence backboard snafu jugate speleological trig sew
        /// </summary>
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 11:41:32
        // Modifier: Admin_chumming
        // ModifiedDateTime: 2016-07-25 오후 1:38:12
        unsigned short lemme;
        /// <summary>
        /// brier Opal Jeri Fremont Shirlee Ecuadoran reverent BBS microscopy Southeast Apache mismatch hightail loathsome circumcision numerable hardtack Vonda
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오후 12:30:06
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오후 12:30:06
        int Timex;
        // Creator: Admin_chumming
        // CreatedDateTime: 2016-07-25 오후 1:38:12
        // Modifier: Admin_chumming
        // ModifiedDateTime: 2016-07-25 오후 1:38:12
        bool Zacharia;
        const class Table_culpritTable* Table;
    public: 
        Table_culpritRow(CremaReader::irow& row, Table_culpritTable* table);
    };
    // Modifier: Admin_chumming
    // ModifiedDateTime: 2016-07-25 오후 1:38:12
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 4:56:57
    class Table_culpritTable : public CremaTable<Table_culpritRow>
    {
    public: 
        Table_culpritTable();
        Table_culpritTable(CremaReader::itable& table);
    public: 
        virtual ~Table_culpritTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_culpritRow* Find(int Elie) const;
    };
    class Table_tsunamiRow : public CremaRow
    {
    public: 
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:14:02
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:14:02
        float culpableness;
        const class Table_tsunamiTable* Table;
    public: 
        Table_tsunamiRow(CremaReader::irow& row, Table_tsunamiTable* table);
    };
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오전 9:14:02
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 10:47:02
    class Table_tsunamiTable : public CremaTable<Table_tsunamiRow>
    {
    public: 
        Table_tsunamiTable();
        Table_tsunamiTable(CremaReader::itable& table);
    public: 
        virtual ~Table_tsunamiTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_tsunamiRow* Find(float culpableness) const;
    };
    class Table135Row : public CremaRow
    {
    public: 
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오후 12:13:30
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오후 12:13:30
        bool sloughs;
        /// <summary>
        /// rimless Kayne tastes curfs peacemaking Lorry Rakel serviette consulter nimbi retrorocket velocipede sumer
        /// </summary>
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오후 12:13:30
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오후 12:13:30
        unsigned char crackerjack;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오후 12:13:30
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오후 12:13:30
        double rehearsal;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오후 12:13:30
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오후 12:13:30
        unsigned char Coloradan;
        // Creator: Member_Indianapolis
        // CreatedDateTime: 2016-07-25 오후 12:13:30
        // Modifier: Member_Indianapolis
        // ModifiedDateTime: 2016-07-25 오후 12:13:30
        char substrate;
        const class Table135Table* Table;
    public: 
        Table135Row(CremaReader::irow& row, Table135Table* table);
    };
    // Creator: Member_Indianapolis
    // CreatedDateTime: 2016-07-25 오후 12:13:30
    // Modifier: Member_Indianapolis
    // ModifiedDateTime: 2016-07-25 오후 12:13:30
    // ContentsModifier: Member_pacifist
    // ContentsModifiedDateTime: 2016-07-25 오후 10:42:09
    class Table135Table : public CremaTable<Table135Row>
    {
    public: 
        Table135Table();
        Table135Table(CremaReader::itable& table);
    public: 
        virtual ~Table135Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table135Row* Find(bool sloughs) const;
    };
    class Table19Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Janka
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:11
        bool botch;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오전 9:18:32
        unsigned char tribesman;
        /// <summary>
        /// quadded
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        time_t Principe;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오전 9:18:32
        char rubbed;
        /// <summary>
        /// unbolt steersman Jacki Egbert unlikeable moorland Sevastopol Devan xerographic Rae gimbals equinoctial fouls crossroads indissolubly readership Corby
        /// </summary>
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        Type13 effluvium;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오전 9:18:32
        unsigned short hardtop;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Member_neurosis
        // ModifiedDateTime: 2016-07-25 오전 9:18:32
        Type8 Foch;
        // Creator: Member_neurosis
        // CreatedDateTime: 2016-07-25 오전 9:18:32
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        long long testator;
        /// <summary>
        /// poppa lovely clemency limestone Rudiger Constancia Arlina liturgist saffron scorpion counterstrike expert
        /// </summary>
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:11
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:11
        short Corvallis;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 11:13:11
        // Modifier: Admin_mousse
        // ModifiedDateTime: 2016-07-25 오전 11:13:11
        Type_Jenelle lamina;
        /// <summary>
        /// stilt negligence Etna inductee reverberation volume overnice Chamberlain Lucais instantiated sogginess sunlight marriageable Horne
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 4:52:26
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        bool thriver;
        /// <summary>
        /// Nagpur jester exclude bleater toothbrush erectile same Nananne Yoshiko permitted petard somewhere cleric significantly gland Stalinist toad
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 4:52:26
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        bool sparring;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 4:52:26
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        Type_spokespeople psychophysiology;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 4:52:26
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 4:52:26
        unsigned int breeching;
        const class Table19Table* Table;
    public: 
        Table19Row(CremaReader::irow& row, Table19Table* table);
    };
    // Creator: Member_neurosis
    // CreatedDateTime: 2016-07-25 오전 9:18:32
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오후 4:52:26
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 5:30:48
    class Table19Table : public CremaTable<Table19Row>
    {
    public: 
        Table19Table();
        Table19Table(CremaReader::itable& table);
    public: 
        virtual ~Table19Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table19Row* Find(bool botch, time_t Principe, long long testator) const;
    };
    class Table37Row : public CremaRow
    {
    public: 
        /// <summary>
        /// intolerableness dejection Harbin unreadability interstage bud roomer alternator Marino Brittani Sutherland baggy ferrous Gemma consistory
        /// </summary>
        // Creator: Member_noncredit
        // CreatedDateTime: 2016-07-25 오전 9:39:00
        // Modifier: Member_noncredit
        // ModifiedDateTime: 2016-07-25 오전 9:39:00
        unsigned char culmination;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 1:06:25
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 1:06:25
        Type30 whitter;
        /// <summary>
        /// spacial mason fingernail Olia engrossment Aelfric Roseline Judon bagful Agathe
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 1:06:25
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 1:06:25
        short Vickie;
        const class Table37Table* Table;
    public: 
        Table37Row(CremaReader::irow& row, Table37Table* table);
    };
    // Creator: Member_noncredit
    // CreatedDateTime: 2016-07-25 오전 9:39:00
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오후 1:06:25
    // ContentsModifier: Admin_cofferdam
    // ContentsModifiedDateTime: 2016-07-25 오후 11:09:56
    class Table37Table : public CremaTable<Table37Row>
    {
    public: 
        Table37Table();
        Table37Table(CremaReader::itable& table);
    public: 
        virtual ~Table37Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table37Row* Find(unsigned char culmination) const;
    };
    class Table_alibiRow : public CremaRow
    {
    public: 
        /// <summary>
        /// leveled soon bravo entered fatefulness mandolin appealer malicious particulate Cleon cit needlewomen proprioception folkway Bandung tool trimness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type8 misstep;
        /// <summary>
        /// betroth weekly anhydrous toilsome teletext crackup ledger fructose Elizabeth chivying regardless vestibule letdown Garvin
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        std::string Alistair;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type15 birth;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Abdel;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        unsigned long long cousinly;
        /// <summary>
        /// mayer tween Gaulish Marisa Delawarean sacrificer Hieronymus
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Paley;
        const class Table_alibiTable* Table;
    public: 
        Table_alibiRow(CremaReader::irow& row, Table_alibiTable* table);
    };
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오전 9:39:09
    class Table_alibiTable : public CremaTable<Table_alibiRow>
    {
    public: 
        Table_alibiTable();
        Table_alibiTable(CremaReader::itable& table);
    public: 
        virtual ~Table_alibiTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_alibiRow* Find(Type8 misstep) const;
    };
    class Table38Row : public CremaRow
    {
    public: 
        /// <summary>
        /// leveled soon bravo entered fatefulness mandolin appealer malicious particulate Cleon cit needlewomen proprioception folkway Bandung tool trimness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type8 misstep;
        /// <summary>
        /// betroth weekly anhydrous toilsome teletext crackup ledger fructose Elizabeth chivying regardless vestibule letdown Garvin
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        std::string Alistair;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:33:37
        Type15 Maximilian;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Abdel;
        /// <summary>
        /// mayer tween Gaulish Marisa Delawarean sacrificer Hieronymus
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Paley;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:33:37
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:33:37
        bool seeker;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:33:37
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:33:37
        double epidermal;
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:33:37
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 11:39:13
        int musicality;
        /// <summary>
        /// checkup agitate fleabag Lorenzo swift pictorialness outtake Jamar intrapulmonary Sean Vale modernness optimist Nye Ashli
        /// </summary>
        // Creator: Member_Clary
        // CreatedDateTime: 2016-07-25 오전 10:33:37
        // Modifier: Member_Clary
        // ModifiedDateTime: 2016-07-25 오전 10:33:37
        short pointblank;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 11:39:13
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 11:39:13
        char workplace;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 11:39:13
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 11:39:13
        unsigned long long Doroteya;
        /// <summary>
        /// abridgment louver prejudge exterior bray Left movie Burundian ambit Svetlana scops dreamy Roldan Maitilde evacuation unitarianism Claremont
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오전 11:39:13
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오전 11:39:13
        std::string HR;
        const class Table38Table* Table;
    public: 
        Table38Row(CremaReader::irow& row, Table38Table* table);
    };
    // Creator: Member_idle
    // CreatedDateTime: 2016-07-25 오전 9:39:09
    // Modifier: Admin_Hooke
    // ModifiedDateTime: 2016-07-25 오전 11:39:13
    class Table38Table : public CremaTable<Table38Row>
    {
    public: 
        Table38Table();
        Table38Table(CremaReader::itable& table);
    public: 
        virtual ~Table38Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table38Row* Find(Type8 misstep, double epidermal, unsigned long long Doroteya) const;
    };
    class Table58Child_amoebicRow : public CremaRow
    {
    public: 
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:35:52
        unsigned char utopia;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:35:52
        unsigned long long conversationalist;
        /// <summary>
        /// jumper fatted straightaway Shoshana corrugation Crisco interchanger flashback bistate virtuosoes toucan anglicize
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:10:11
        float scree;
        /// <summary>
        /// stay Macias Rosales corrected
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:10:11
        Type_nephew farinaceous;
        /// <summary>
        /// Eu nonexclusive unstinting bigheartedness rectifier duster Clo herculean angular
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:10:11
        unsigned int balderdash;
        /// <summary>
        /// Ike ecstatically catenate tennis Zorina multitudinous spacewalk qty shandy Theobald baptizer televise veneering gleeful
        /// </summary>
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:35:52
        long long extinguishable;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:35:52
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:35:52
        int Sieglinda;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:10:11
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:10:11
        unsigned long long switchmen;
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:10:11
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:10:11
        Type_HeraclitusDeletable sneering;
        /// <summary>
        /// ungentle Hudson Lanita Sisyphus craftswomen ombudsman Arvin Alisa
        /// </summary>
        // Creator: Member_role
        // CreatedDateTime: 2016-07-25 오전 11:10:11
        // Modifier: Member_role
        // ModifiedDateTime: 2016-07-25 오전 11:10:11
        Type13 Godspeed;
        /// <summary>
        /// hinger freeloader WY drabness matchmaking magnanimosity actinium marvel dental Hetty missioner furtive hagiographer conference
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 12:37:46
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 12:37:46
        int Xenophon;
        /// <summary>
        /// oceanography bestride Giannini intelligibleness
        /// </summary>
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 12:37:46
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 12:37:46
        int nonporous;
        // Creator: Admin_Hooke
        // CreatedDateTime: 2016-07-25 오후 12:37:46
        // Modifier: Admin_Hooke
        // ModifiedDateTime: 2016-07-25 오후 12:37:46
        Type_surprise stereoscopic;
        const class Table58Child_amoebicTable* Table;
        const class Table58Row* Parent;
    public: 
        Table58Child_amoebicRow(CremaReader::irow& row, Table58Child_amoebicTable* table);
    };
    // Creator: Member_Dorine
    // CreatedDateTime: 2016-07-25 오전 10:35:52
    // Modifier: Admin_Hooke
    // ModifiedDateTime: 2016-07-25 오후 12:37:46
    class Table58Child_amoebicTable : public CremaTable<Table58Child_amoebicRow>
    {
    public: 
        Table58Child_amoebicTable();
        Table58Child_amoebicTable(CremaReader::itable& table);
        Table58Child_amoebicTable(std::vector<class Table58Child_amoebicRow*> rows);
    public: 
        virtual ~Table58Child_amoebicTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table58Child_amoebicRow* Find(unsigned char utopia, float scree, int Sieglinda) const;
    };
    class Table58Row : public CremaRow
    {
    public: 
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        Type_hand mango;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        time_t Isidor;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        unsigned int relink;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        unsigned long long Martguerita;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        Type_supportedDeletable McClain;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        unsigned short fixable;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        unsigned long long cookware;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        double Datsun;
        // Creator: Member_Dorine
        // CreatedDateTime: 2016-07-25 오전 10:15:17
        // Modifier: Member_Dorine
        // ModifiedDateTime: 2016-07-25 오전 10:15:17
        std::string Cluj;
        const class Table58Table* Table;
        const Table58Child_amoebicTable* Child_amoebic;
    private: 
        static Table58Child_amoebicTable Child_amoebicEmpty;
    public: 
        Table58Row(CremaReader::irow& row, Table58Table* table);
    friend static void Table58SetChild_amoebic(Table58Row* target, const std::vector<Table58Child_amoebicRow*>& childs);
    };
    // Creator: Member_Dorine
    // CreatedDateTime: 2016-07-25 오전 10:15:17
    // Modifier: Member_Dorine
    // ModifiedDateTime: 2016-07-25 오전 10:15:17
    class Table58Table : public CremaTable<Table58Row>
    {
    public: 
        const Table58Child_amoebicTable* Child_amoebic;
    public: 
        Table58Table();
        Table58Table(CremaReader::itable& table);
    public: 
        virtual ~Table58Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table58Row* Find(Type_hand mango) const;
    };
    class Table_consanguineousChild_YorkeRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Shara prearrangement sortable extraordinarily blubber FSLIC ibid climate Tiphani butting Hazel slack Hallmark misanthrope defroster delver
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:57:54
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:57:54
        unsigned int Cantor;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:57:54
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:57:54
        Type_rennet Bevan;
        const class Table_consanguineousChild_YorkeTable* Table;
        const class Table_consanguineousRow* Parent;
    public: 
        Table_consanguineousChild_YorkeRow(CremaReader::irow& row, Table_consanguineousChild_YorkeTable* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 9:57:54
    // Modifier: Member_constipate
    // ModifiedDateTime: 2016-07-25 오전 9:57:54
    // ContentsModifier: Admin_Geno
    // ContentsModifiedDateTime: 2016-07-25 오후 8:45:45
    class Table_consanguineousChild_YorkeTable : public CremaTable<Table_consanguineousChild_YorkeRow>
    {
    public: 
        Table_consanguineousChild_YorkeTable();
        Table_consanguineousChild_YorkeTable(CremaReader::itable& table);
        Table_consanguineousChild_YorkeTable(std::vector<class Table_consanguineousChild_YorkeRow*> rows);
    public: 
        virtual ~Table_consanguineousChild_YorkeTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_consanguineousChild_YorkeRow* Find(unsigned int Cantor) const;
    };
    class Table_consanguineousRow : public CremaRow
    {
    public: 
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        unsigned int Argentina;
        /// <summary>
        /// Aldebaran wraps illuminate froth customize tugboat thwarter vituperate disappointing Shafer slurp Willoughby
        /// </summary>
        // Creator: Admin_miscegenation
        // CreatedDateTime: 2016-07-25 오전 9:42:07
        // Modifier: Admin_miscegenation
        // ModifiedDateTime: 2016-07-25 오전 9:42:07
        Type_Multan wingding;
        const class Table_consanguineousTable* Table;
        const Table_consanguineousChild_YorkeTable* Child_Yorke;
    private: 
        static Table_consanguineousChild_YorkeTable Child_YorkeEmpty;
    public: 
        Table_consanguineousRow(CremaReader::irow& row, Table_consanguineousTable* table);
    friend static void Table_consanguineousSetChild_Yorke(Table_consanguineousRow* target, const std::vector<Table_consanguineousChild_YorkeRow*>& childs);
    };
    // Modifier: Admin_miscegenation
    // ModifiedDateTime: 2016-07-25 오전 9:42:07
    // ContentsModifier: Admin_Geno
    // ContentsModifiedDateTime: 2016-07-25 오후 8:45:45
    class Table_consanguineousTable : public CremaTable<Table_consanguineousRow>
    {
    public: 
        const Table_consanguineousChild_YorkeTable* Child_Yorke;
    public: 
        Table_consanguineousTable();
        Table_consanguineousTable(CremaReader::itable& table);
    public: 
        virtual ~Table_consanguineousTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_consanguineousRow* Find(unsigned int Argentina) const;
    };
    class Table42Row : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:41:15
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:41:15
        float washstand;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:41:15
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:41:15
        char quagmire;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:41:15
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:41:15
        float kiloton;
        /// <summary>
        /// immigrant
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:41:15
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:41:15
        time_t fruitful;
        /// <summary>
        /// workingman Murry
        /// </summary>
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:41:15
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:41:15
        Type_Madison obliviousness;
        const class Table42Table* Table;
    public: 
        Table42Row(CremaReader::irow& row, Table42Table* table);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오전 9:41:15
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오전 9:41:15
    // ContentsModifier: Member_immunology
    // ContentsModifiedDateTime: 2016-07-25 오후 8:19:18
    class Table42Table : public CremaTable<Table42Row>
    {
    public: 
        Table42Table();
        Table42Table(CremaReader::itable& table);
    public: 
        virtual ~Table42Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table42Row* Find(float washstand) const;
    };
    class Table72Row : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 10:41:42
        Type25 Tamma;
        /// <summary>
        /// Anthiathia Averyl Dalia hotplate needy tribesmen cayman metaphoric rotting oilseed vogueing nicotine embed Tuscon cellphone
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 10:41:42
        float housewives;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 10:41:42
        int jadeite;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 10:41:42
        time_t rejoinder;
        const class Table72Table* Table;
    public: 
        Table72Row(CremaReader::irow& row, Table72Table* table);
    };
    // Creator: Member_idle
    // CreatedDateTime: 2016-07-25 오전 10:41:42
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오전 10:41:42
    class Table72Table : public CremaTable<Table72Row>
    {
    public: 
        Table72Table();
        Table72Table(CremaReader::itable& table);
    public: 
        virtual ~Table72Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table72Row* Find(Type25 Tamma) const;
    };
    class Table92Row : public CremaRow
    {
    public: 
        // Creator: Member_frowner
        // CreatedDateTime: 2016-07-25 오전 11:17:41
        // Modifier: Member_frowner
        // ModifiedDateTime: 2016-07-25 오전 11:17:41
        unsigned long long Nickey;
        const class Table92Table* Table;
    public: 
        Table92Row(CremaReader::irow& row, Table92Table* table);
    };
    // Creator: Member_frowner
    // CreatedDateTime: 2016-07-25 오전 11:17:41
    // Modifier: Member_frowner
    // ModifiedDateTime: 2016-07-25 오전 11:17:41
    // ContentsModifier: Member_Cecilia
    // ContentsModifiedDateTime: 2016-07-25 오후 8:19:10
    class Table92Table : public CremaTable<Table92Row>
    {
    public: 
        Table92Table();
        Table92Table(CremaReader::itable& table);
    public: 
        virtual ~Table92Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table92Row* Find(unsigned long long Nickey) const;
    };
    class Table99Row : public CremaRow
    {
    public: 
        /// <summary>
        /// hydrotherapy rewedding rheumy cord defector carborundum singeing waltz misdemeanant seabed tea Poppy Samantha polestar
        /// </summary>
        // Creator: Member_sportiness
        // CreatedDateTime: 2016-07-25 오전 11:27:44
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오후 2:10:49
        unsigned long long ultrastructure;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오후 2:10:49
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오후 2:10:49
        Type56 general;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오후 2:10:49
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오후 2:10:49
        Type80 caucus;
        const class Table99Table* Table;
    public: 
        Table99Row(CremaReader::irow& row, Table99Table* table);
    };
    // Creator: Member_sportiness
    // CreatedDateTime: 2016-07-25 오전 11:27:44
    // Modifier: Member_antique
    // ModifiedDateTime: 2016-07-25 오후 2:10:49
    // ContentsModifier: Member_wholemeal
    // ContentsModifiedDateTime: 2016-07-25 오후 11:00:07
    class Table99Table : public CremaTable<Table99Row>
    {
    public: 
        Table99Table();
        Table99Table(CremaReader::itable& table);
    public: 
        virtual ~Table99Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table99Row* Find(unsigned long long ultrastructure) const;
    };
    class Table_JerryChild_quailRow : public CremaRow
    {
    public: 
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        time_t forcefulness;
        /// <summary>
        /// Bugatti Tulane Somalian Madlin hove distinguished ping origination officeholder Satyanarayanan squint nourished sawer shelled
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        float Inglis;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        char seismography;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        int faultlessness;
        /// <summary>
        /// pluralistic tedium apatite trapezium mezzanine Frigga curare
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        unsigned short fiver;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        short prevention;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        time_t purloiner;
        /// <summary>
        /// lingerer balkanization sneeze Prado northbound impermeably
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        unsigned long long Ancell;
        const class Table_JerryChild_quailTable* Table;
        const class Table_JerryRow* Parent;
    public: 
        Table_JerryChild_quailRow(CremaReader::irow& row, Table_JerryChild_quailTable* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오전 10:57:12
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:57:13
    // ContentsModifier: Admin_therefore
    // ContentsModifiedDateTime: 2016-07-25 오후 8:18:56
    class Table_JerryChild_quailTable : public CremaTable<Table_JerryChild_quailRow>
    {
    public: 
        Table_JerryChild_quailTable();
        Table_JerryChild_quailTable(CremaReader::itable& table);
        Table_JerryChild_quailTable(std::vector<class Table_JerryChild_quailRow*> rows);
    public: 
        virtual ~Table_JerryChild_quailTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_JerryChild_quailRow* Find(time_t forcefulness, short prevention) const;
    };
    class Table_JerryRow : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        short Portsmouth;
        /// <summary>
        /// guilt Filberto
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:51:11
        Type_rennet bout;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:51:11
        long long overexpose;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 1:51:11
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 1:51:11
        unsigned short leotard;
        const class Table_JerryTable* Table;
        const Table_JerryChild_quailTable* Child_quail;
    private: 
        static Table_JerryChild_quailTable Child_quailEmpty;
    public: 
        Table_JerryRow(CremaReader::irow& row, Table_JerryTable* table);
    friend static void Table_JerrySetChild_quail(Table_JerryRow* target, const std::vector<Table_JerryChild_quailRow*>& childs);
    };
    // Modifier: Member_throbbing
    // ModifiedDateTime: 2016-07-25 오후 1:51:11
    // ContentsModifier: Admin_therefore
    // ContentsModifiedDateTime: 2016-07-25 오후 8:18:56
    class Table_JerryTable : public CremaTable<Table_JerryRow>
    {
    public: 
        const Table_JerryChild_quailTable* Child_quail;
    public: 
        Table_JerryTable();
        Table_JerryTable(CremaReader::itable& table);
    public: 
        virtual ~Table_JerryTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_JerryRow* Find(short Portsmouth) const;
    };
    class Table_LeeuwenhoekChild1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        char Maggi;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool Madonna;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        std::string filed;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:12
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:12
        bool pill;
        const class Table_LeeuwenhoekChild1Table* Table;
        const class Table_LeeuwenhoekRow* Parent;
    public: 
        Table_LeeuwenhoekChild1Row(CremaReader::irow& row, Table_LeeuwenhoekChild1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:12
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:12
    // ContentsModifier: Member_antique
    // ContentsModifiedDateTime: 2016-07-25 오후 10:48:54
    class Table_LeeuwenhoekChild1Table : public CremaTable<Table_LeeuwenhoekChild1Row>
    {
    public: 
        Table_LeeuwenhoekChild1Table();
        Table_LeeuwenhoekChild1Table(CremaReader::itable& table);
        Table_LeeuwenhoekChild1Table(std::vector<class Table_LeeuwenhoekChild1Row*> rows);
    public: 
        virtual ~Table_LeeuwenhoekChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LeeuwenhoekChild1Row* Find(char Maggi, const std::string& filed) const;
    };
    class Table_LeeuwenhoekChild_SakharovRow : public CremaRow
    {
    public: 
        /// <summary>
        /// allocative lobotomize Orwell horsedom Usenet campesinos Eolanda provincial Giralda dwarfish interaction psychopathology posterior obtuse balladeer
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        int outgrip;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:15
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        unsigned char condominium;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t guiltlessness;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool splash;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        bool entrapping;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오전 9:21:09
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오전 9:21:09
        time_t Hamnet;
        const class Table_LeeuwenhoekChild_SakharovTable* Table;
        const Table_LeeuwenhoekRow* Parent;
    public: 
        Table_LeeuwenhoekChild_SakharovRow(CremaReader::irow& row, Table_LeeuwenhoekChild_SakharovTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:15
    // Modifier: Member_privatization
    // ModifiedDateTime: 2016-07-25 오전 9:21:09
    // ContentsModifier: Member_antique
    // ContentsModifiedDateTime: 2016-07-25 오후 10:48:54
    class Table_LeeuwenhoekChild_SakharovTable : public CremaTable<Table_LeeuwenhoekChild_SakharovRow>
    {
    public: 
        Table_LeeuwenhoekChild_SakharovTable();
        Table_LeeuwenhoekChild_SakharovTable(CremaReader::itable& table);
        Table_LeeuwenhoekChild_SakharovTable(std::vector<class Table_LeeuwenhoekChild_SakharovRow*> rows);
    public: 
        virtual ~Table_LeeuwenhoekChild_SakharovTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LeeuwenhoekChild_SakharovRow* Find(int outgrip) const;
    };
    class Table_LeeuwenhoekChild_nevusRow : public CremaRow
    {
    public: 
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        unsigned char repetition;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_kirsch
        // ModifiedDateTime: 2016-07-25 오전 9:25:31
        std::string phonetician;
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:41:29
        std::string Nanni;
        /// <summary>
        /// Bernardino Armour Aventine drainboard Hedy steadiness Ionian circumnavigation pauperism palatine negligible souse urinary
        /// </summary>
        // Creator: Member_kirsch
        // CreatedDateTime: 2016-07-25 오전 9:25:31
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        bool monographs;
        // Creator: Member_Cristy
        // CreatedDateTime: 2016-07-25 오전 9:26:33
        // Modifier: Member_Cristy
        // ModifiedDateTime: 2016-07-25 오전 9:26:33
        long long humus;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오전 11:41:29
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:41:29
        Type1 forswore;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오전 11:41:29
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:41:29
        time_t compatibly;
        /// <summary>
        /// Blankenship counterstrike relieve Paola
        /// </summary>
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오전 11:41:29
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오전 11:41:29
        int Elyn;
        const class Table_LeeuwenhoekChild_nevusTable* Table;
        const Table_LeeuwenhoekRow* Parent;
    public: 
        Table_LeeuwenhoekChild_nevusRow(CremaReader::irow& row, Table_LeeuwenhoekChild_nevusTable* table);
    };
    // Creator: Member_kirsch
    // CreatedDateTime: 2016-07-25 오전 9:25:31
    // Modifier: Admin_signalization
    // ModifiedDateTime: 2016-07-25 오전 11:41:29
    // ContentsModifier: Member_antique
    // ContentsModifiedDateTime: 2016-07-25 오후 10:48:54
    class Table_LeeuwenhoekChild_nevusTable : public CremaTable<Table_LeeuwenhoekChild_nevusRow>
    {
    public: 
        Table_LeeuwenhoekChild_nevusTable();
        Table_LeeuwenhoekChild_nevusTable(CremaReader::itable& table);
        Table_LeeuwenhoekChild_nevusTable(std::vector<class Table_LeeuwenhoekChild_nevusRow*> rows);
    public: 
        virtual ~Table_LeeuwenhoekChild_nevusTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LeeuwenhoekChild_nevusRow* Find(unsigned char repetition) const;
    };
    class Table_LeeuwenhoekRow : public CremaRow
    {
    public: 
        /// <summary>
        /// clerkship boob airsick extinguisher assumability Kentuckian Esposito Lapp becloud staid downsize fine regressiveness enumeration Dutchmen Sidonnie rancor runty Jarlsberg
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        double eviction;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        unsigned short Stefan;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        Type_Madison Cesarean;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:03
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:03
        long long operetta;
        const class Table_LeeuwenhoekTable* Table;
        const Table_LeeuwenhoekChild1Table* Child1;
        const Table_LeeuwenhoekChild_SakharovTable* Child_Sakharov;
        const Table_LeeuwenhoekChild_nevusTable* Child_nevus;
    private: 
        static Table_LeeuwenhoekChild1Table Child1Empty;
        static Table_LeeuwenhoekChild_SakharovTable Child_SakharovEmpty;
        static Table_LeeuwenhoekChild_nevusTable Child_nevusEmpty;
    public: 
        Table_LeeuwenhoekRow(CremaReader::irow& row, Table_LeeuwenhoekTable* table);
    friend static void Table_LeeuwenhoekSetChild1(Table_LeeuwenhoekRow* target, const std::vector<Table_LeeuwenhoekChild1Row*>& childs);
        static void Table_LeeuwenhoekSetChild_Sakharov(Table_LeeuwenhoekRow* target, const std::vector<Table_LeeuwenhoekChild_SakharovRow*>& childs);
        static void Table_LeeuwenhoekSetChild_nevus(Table_LeeuwenhoekRow* target, const std::vector<Table_LeeuwenhoekChild_nevusRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:03
    // ContentsModifier: Member_antique
    // ContentsModifiedDateTime: 2016-07-25 오후 10:48:54
    class Table_LeeuwenhoekTable : public CremaTable<Table_LeeuwenhoekRow>
    {
    public: 
        const Table_LeeuwenhoekChild1Table* Child1;
        const Table_LeeuwenhoekChild_SakharovTable* Child_Sakharov;
        const Table_LeeuwenhoekChild_nevusTable* Child_nevus;
    public: 
        Table_LeeuwenhoekTable();
        Table_LeeuwenhoekTable(CremaReader::itable& table);
    public: 
        virtual ~Table_LeeuwenhoekTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_LeeuwenhoekRow* Find(double eviction) const;
    };
    class Table_pertainRow : public CremaRow
    {
    public: 
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        char Elicia;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        time_t execrably;
        /// <summary>
        /// trophic mugginess amanuensis
        /// </summary>
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type_rennet Knudsen;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type15 bulky;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float fake;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float scintillation;
        const class Table_pertainTable* Table;
    public: 
        Table_pertainRow(CremaReader::irow& row, Table_pertainTable* table);
    };
    // Modifier: Admin_therefore
    // ModifiedDateTime: 2016-07-25 오전 9:28:53
    // ContentsModifier: Admin_distinctiveness
    // ContentsModifiedDateTime: 2016-07-25 오전 10:46:44
    class Table_pertainTable : public CremaTable<Table_pertainRow>
    {
    public: 
        Table_pertainTable();
        Table_pertainTable(CremaReader::itable& table);
    public: 
        virtual ~Table_pertainTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_pertainRow* Find(char Elicia) const;
    };
    class Table163Row : public CremaRow
    {
    public: 
        /// <summary>
        /// oaths bluffness chintzy embedded outdone Alix scored
        /// </summary>
        // Creator: Member_Ashby
        // CreatedDateTime: 2016-07-25 오후 1:36:08
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:36:08
        Type33 Defoe;
        // Creator: Member_Ashby
        // CreatedDateTime: 2016-07-25 오후 1:36:08
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:36:08
        unsigned short passmark;
        // Creator: Member_Ashby
        // CreatedDateTime: 2016-07-25 오후 1:36:08
        // Modifier: Member_Ashby
        // ModifiedDateTime: 2016-07-25 오후 1:36:08
        int glower;
        const class Table163Table* Table;
    public: 
        Table163Row(CremaReader::irow& row, Table163Table* table);
    };
    // Creator: Member_Ashby
    // CreatedDateTime: 2016-07-25 오후 1:36:08
    // Modifier: Member_Ashby
    // ModifiedDateTime: 2016-07-25 오후 1:36:08
    class Table163Table : public CremaTable<Table163Row>
    {
    public: 
        Table163Table();
        Table163Table(CremaReader::itable& table);
    public: 
        virtual ~Table163Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table163Row* Find(Type33 Defoe) const;
    };
    class Table174Row : public CremaRow
    {
    public: 
        // Creator: Admin_pock
        // CreatedDateTime: 2016-07-25 오후 2:07:22
        // Modifier: Admin_pock
        // ModifiedDateTime: 2016-07-25 오후 2:07:22
        Type45 apiarist;
        const class Table174Table* Table;
    public: 
        Table174Row(CremaReader::irow& row, Table174Table* table);
    };
    // Creator: Admin_pock
    // CreatedDateTime: 2016-07-25 오후 2:07:22
    // Modifier: Admin_pock
    // ModifiedDateTime: 2016-07-25 오후 2:07:22
    class Table174Table : public CremaTable<Table174Row>
    {
    public: 
        Table174Table();
        Table174Table(CremaReader::itable& table);
    public: 
        virtual ~Table174Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table174Row* Find(Type45 apiarist) const;
    };
    class Table188Row : public CremaRow
    {
    public: 
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 3:42:59
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 3:42:59
        float Carla;
        // Creator: Member_nubbin
        // CreatedDateTime: 2016-07-25 오후 3:42:59
        // Modifier: Member_nubbin
        // ModifiedDateTime: 2016-07-25 오후 3:42:59
        int Caspar;
        const class Table188Table* Table;
    public: 
        Table188Row(CremaReader::irow& row, Table188Table* table);
    };
    // Creator: Member_nubbin
    // CreatedDateTime: 2016-07-25 오후 3:42:59
    // Modifier: Member_nubbin
    // ModifiedDateTime: 2016-07-25 오후 3:42:59
    // ContentsModifier: Member_scuzzy
    // ContentsModifiedDateTime: 2016-07-25 오후 10:24:41
    class Table188Table : public CremaTable<Table188Row>
    {
    public: 
        Table188Table();
        Table188Table(CremaReader::itable& table);
    public: 
        virtual ~Table188Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table188Row* Find(float Carla) const;
    };
    class Table_globetrotterRow : public CremaRow
    {
    public: 
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오후 12:06:30
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오후 12:06:30
        unsigned char duplicative;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오후 12:06:30
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오후 12:06:30
        int Barkley;
        const class Table_globetrotterTable* Table;
    public: 
        Table_globetrotterRow(CremaReader::irow& row, Table_globetrotterTable* table);
    };
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오후 12:06:30
    // ContentsModifier: Admin_toe
    // ContentsModifiedDateTime: 2016-07-25 오후 10:54:54
    class Table_globetrotterTable : public CremaTable<Table_globetrotterRow>
    {
    public: 
        Table_globetrotterTable();
        Table_globetrotterTable(CremaReader::itable& table);
    public: 
        virtual ~Table_globetrotterTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_globetrotterRow* Find(unsigned char duplicative) const;
    };
    class Table173Row : public CremaRow
    {
    public: 
        // Creator: Member_Tanhya
        // CreatedDateTime: 2016-07-25 오후 2:06:45
        // Modifier: Member_Tanhya
        // ModifiedDateTime: 2016-07-25 오후 2:06:45
        time_t Rachael;
        const class Table173Table* Table;
    public: 
        Table173Row(CremaReader::irow& row, Table173Table* table);
    };
    // Creator: Member_Tanhya
    // CreatedDateTime: 2016-07-25 오후 2:06:45
    // Modifier: Member_Tanhya
    // ModifiedDateTime: 2016-07-25 오후 2:06:45
    // ContentsModifier: Member_privatization
    // ContentsModifiedDateTime: 2016-07-25 오후 10:30:28
    class Table173Table : public CremaTable<Table173Row>
    {
    public: 
        Table173Table();
        Table173Table(CremaReader::itable& table);
    public: 
        virtual ~Table173Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table173Row* Find(time_t Rachael) const;
    };
    class Table187Row : public CremaRow
    {
    public: 
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        Type_Gretta clement;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        float plinker;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        int Jay;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        unsigned int Godthaab;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        unsigned short brucellosis;
        /// <summary>
        /// Himalayan
        /// </summary>
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        time_t gustily;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        unsigned char nonplussing;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        double MacLeish;
        // Creator: Admin_straddler
        // CreatedDateTime: 2016-07-25 오후 3:34:15
        // Modifier: Admin_straddler
        // ModifiedDateTime: 2016-07-25 오후 3:34:15
        Type63 Delia;
        const class Table187Table* Table;
    public: 
        Table187Row(CremaReader::irow& row, Table187Table* table);
    };
    // Creator: Admin_straddler
    // CreatedDateTime: 2016-07-25 오후 3:34:15
    // Modifier: Admin_straddler
    // ModifiedDateTime: 2016-07-25 오후 3:34:15
    // ContentsModifier: Admin_mousse
    // ContentsModifiedDateTime: 2016-07-25 오후 8:05:30
    class Table187Table : public CremaTable<Table187Row>
    {
    public: 
        Table187Table();
        Table187Table(CremaReader::itable& table);
    public: 
        virtual ~Table187Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table187Row* Find(Type_Gretta clement, time_t gustily) const;
    };
    class Table_AugRow : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 11:12:19
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 11:12:19
        time_t Presbyterian;
        const class Table_AugTable* Table;
    public: 
        Table_AugRow(CremaReader::irow& row, Table_AugTable* table);
    };
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오전 11:12:19
    // ContentsModifier: Admin_chumming
    // ContentsModifiedDateTime: 2016-07-25 오후 10:14:13
    class Table_AugTable : public CremaTable<Table_AugRow>
    {
    public: 
        Table_AugTable();
        Table_AugTable(CremaReader::itable& table);
    public: 
        virtual ~Table_AugTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_AugRow* Find(time_t Presbyterian) const;
    };
    class Table181Row : public CremaRow
    {
    public: 
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        Type40 Bostitch;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        int Bonnee;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        Type_HeraclitusDeletable Mose;
        /// <summary>
        /// standee dispersant nurture syllogistic albumin dunned costiveness gladdy strove Les prick scurvy cogitate fibrous Antaeus
        /// </summary>
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        double valuable;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        time_t Diahann;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        std::string pizzeria;
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        char bipartisanship;
        /// <summary>
        /// Ketty rahs bewigged Evenki doodle nonscientific Byzantium
        /// </summary>
        // Creator: Member_dullness
        // CreatedDateTime: 2016-07-25 오후 2:55:12
        // Modifier: Member_dullness
        // ModifiedDateTime: 2016-07-25 오후 2:55:12
        std::string seagoing;
        const class Table181Table* Table;
    public: 
        Table181Row(CremaReader::irow& row, Table181Table* table);
    };
    // Creator: Member_dullness
    // CreatedDateTime: 2016-07-25 오후 2:55:12
    // Modifier: Member_dullness
    // ModifiedDateTime: 2016-07-25 오후 2:55:12
    class Table181Table : public CremaTable<Table181Row>
    {
    public: 
        Table181Table();
        Table181Table(CremaReader::itable& table);
    public: 
        virtual ~Table181Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table181Row* Find(Type40 Bostitch, Type_HeraclitusDeletable Mose, time_t Diahann) const;
    };
    class Table49Child1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// OJ gnawer citywide
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        unsigned char uninteresting;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        double Lafitte;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        double feater;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        std::string doggone;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 10:11:15
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 10:11:15
        double midi;
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 10:17:32
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        Type27 filament;
        /// <summary>
        /// popularizing wage linguistics undergraduate ionization adventitious tyrosine philanthropic infantryman monotheism feathering preset rubric retentiveness gunned found
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 10:17:32
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        Type_consortia Zorana;
        /// <summary>
        /// Berniece vermicelli lank inkling yuan Sella duxes Penny arsine electronics
        /// </summary>
        // Creator: Member_creel
        // CreatedDateTime: 2016-07-25 오전 10:17:32
        // Modifier: Member_creel
        // ModifiedDateTime: 2016-07-25 오전 10:17:32
        Type_Meiji highish;
        const class Table49Child1Table* Table;
        const class Table49Row* Parent;
    public: 
        Table49Child1Row(CremaReader::irow& row, Table49Child1Table* table);
    };
    // Creator: Admin_serviceableness
    // CreatedDateTime: 2016-07-25 오전 10:11:15
    // Modifier: Member_creel
    // ModifiedDateTime: 2016-07-25 오전 10:17:32
    class Table49Child1Table : public CremaTable<Table49Child1Row>
    {
    public: 
        Table49Child1Table();
        Table49Child1Table(CremaReader::itable& table);
        Table49Child1Table(std::vector<class Table49Child1Row*> rows);
    public: 
        virtual ~Table49Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table49Child1Row* Find(unsigned char uninteresting, double feater, Type_Meiji highish) const;
    };
    class Table49Row : public CremaRow
    {
    public: 
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        unsigned short adviser;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 10:15:09
        Type_pledge Peterson;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 9:52:21
        Type24 cumuli;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 10:15:09
        int analyzed;
        /// <summary>
        /// attached
        /// </summary>
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 9:52:21
        // Modifier: Member_wholemeal
        // ModifiedDateTime: 2016-07-25 오전 10:15:09
        long long scowler;
        const class Table49Table* Table;
        const Table49Child1Table* Child1;
    private: 
        static Table49Child1Table Child1Empty;
    public: 
        Table49Row(CremaReader::irow& row, Table49Table* table);
    friend static void Table49SetChild1(Table49Row* target, const std::vector<Table49Child1Row*>& childs);
    };
    // Creator: Admin_titted
    // CreatedDateTime: 2016-07-25 오전 9:52:21
    // Modifier: Member_wholemeal
    // ModifiedDateTime: 2016-07-25 오전 10:15:09
    // ContentsModifier: Member_Cristy
    // ContentsModifiedDateTime: 2016-07-25 오전 10:00:53
    class Table49Table : public CremaTable<Table49Row>
    {
    public: 
        const Table49Child1Table* Child1;
    public: 
        Table49Table();
        Table49Table(CremaReader::itable& table);
    public: 
        virtual ~Table49Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table49Row* Find(unsigned short adviser) const;
    };
    class Table_cognizancesRow : public CremaRow
    {
    public: 
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        char Elicia;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        time_t execrably;
        /// <summary>
        /// trophic mugginess amanuensis
        /// </summary>
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type_rennet Knudsen;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type15 bulky;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float fake;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float scintillation;
        const class Table_cognizancesTable* Table;
    public: 
        Table_cognizancesRow(CremaReader::irow& row, Table_cognizancesTable* table);
    };
    // Modifier: Admin_therefore
    // ModifiedDateTime: 2016-07-25 오전 9:28:53
    // ContentsModifier: Member_constipate
    // ContentsModifiedDateTime: 2016-07-25 오전 11:23:21
    class Table_cognizancesTable : public CremaTable<Table_cognizancesRow>
    {
    public: 
        Table_cognizancesTable();
        Table_cognizancesTable(CremaReader::itable& table);
    public: 
        virtual ~Table_cognizancesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_cognizancesRow* Find(char Elicia) const;
    };
    class Table145Row : public CremaRow
    {
    public: 
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오후 12:34:53
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오후 12:34:53
        Type_farinaceous calligraphy;
        /// <summary>
        /// Koenig bishopric Odele confident symmetricalness Mexican hung quavery Stockholm bop literacy plain branned Rutherford Shannon prattler
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오후 12:34:53
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오후 12:34:53
        char obtruder;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오후 12:34:53
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오후 12:34:53
        char Hollerith;
        /// <summary>
        /// reparation anytime worn freshmen sapwood APB administrate salaciousness EEOC
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오후 12:34:53
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오후 12:34:53
        float hellbent;
        /// <summary>
        /// enjoyment dilution yachtswoman smeary shelf supererogatory noblemen Devonian phosphorescent stateside splashy piracy crinkle revelation raciness fatted gym
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오후 12:34:53
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오후 12:34:53
        unsigned char hemispherical;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오후 12:34:53
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오후 12:34:53
        double deathblow;
        const class Table145Table* Table;
    public: 
        Table145Row(CremaReader::irow& row, Table145Table* table);
    };
    // Creator: Admin_wholesomeness
    // CreatedDateTime: 2016-07-25 오후 12:34:53
    // Modifier: Admin_wholesomeness
    // ModifiedDateTime: 2016-07-25 오후 12:34:53
    // ContentsModifier: Admin_whispering
    // ContentsModifiedDateTime: 2016-07-25 오후 8:21:45
    class Table145Table : public CremaTable<Table145Row>
    {
    public: 
        Table145Table();
        Table145Table(CremaReader::itable& table);
    public: 
        virtual ~Table145Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table145Row* Find(Type_farinaceous calligraphy, double deathblow) const;
    };
    class Table26Row : public CremaRow
    {
    public: 
        /// <summary>
        /// calcareousness Karina firer circumlocutory preplanned Shelli cased Vesta serigraphs
        /// </summary>
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 9:24:05
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 9:24:05
        unsigned long long obsession;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 9:24:05
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 9:24:05
        unsigned char lingua;
        // Creator: Member_potage
        // CreatedDateTime: 2016-07-25 오전 9:24:05
        // Modifier: Member_potage
        // ModifiedDateTime: 2016-07-25 오전 9:24:05
        bool Hogarth;
        // Creator: Admin_mousse
        // CreatedDateTime: 2016-07-25 오전 9:25:24
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:54:42
        int litheness;
        /// <summary>
        /// embellished anterior reread creamer beanpole concocter glover lowlife canvass tubercle anisotropy ciliately Gatsby
        /// </summary>
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:41:58
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:54:42
        double corruptive;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:41:58
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:41:58
        bool lanolin;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:54:42
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:54:42
        double Macgregor;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:54:42
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:54:42
        Type_supportedDeletable airplane;
        /// <summary>
        /// Fleurette inglenook stimulatory staunchness
        /// </summary>
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오전 9:54:42
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오전 9:54:42
        float outstripped;
        const class Table26Table* Table;
    public: 
        Table26Row(CremaReader::irow& row, Table26Table* table);
    };
    // Creator: Member_potage
    // CreatedDateTime: 2016-07-25 오전 9:24:05
    // Modifier: Admin_Marley
    // ModifiedDateTime: 2016-07-25 오전 9:54:42
    // ContentsModifier: Member_Alex
    // ContentsModifiedDateTime: 2016-07-25 오후 9:29:35
    class Table26Table : public CremaTable<Table26Row>
    {
    public: 
        Table26Table();
        Table26Table(CremaReader::itable& table);
    public: 
        virtual ~Table26Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table26Row* Find(unsigned long long obsession) const;
    };
    class Table_adenoidChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_motive
        // CreatedDateTime: 2016-07-25 오후 12:34:19
        // Modifier: Admin_motive
        // ModifiedDateTime: 2016-07-25 오후 12:34:19
        Type50 pennis;
        const class Table_adenoidChild1Table* Table;
        const class Table_adenoidRow* Parent;
    public: 
        Table_adenoidChild1Row(CremaReader::irow& row, Table_adenoidChild1Table* table);
    };
    // Creator: Admin_motive
    // CreatedDateTime: 2016-07-25 오후 12:34:19
    // Modifier: Admin_motive
    // ModifiedDateTime: 2016-07-25 오후 12:34:19
    class Table_adenoidChild1Table : public CremaTable<Table_adenoidChild1Row>
    {
    public: 
        Table_adenoidChild1Table();
        Table_adenoidChild1Table(CremaReader::itable& table);
        Table_adenoidChild1Table(std::vector<class Table_adenoidChild1Row*> rows);
    public: 
        virtual ~Table_adenoidChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_adenoidChild1Row* Find(Type50 pennis) const;
    };
    class Table_adenoidRow : public CremaRow
    {
    public: 
        /// <summary>
        /// leveled soon bravo entered fatefulness mandolin appealer malicious particulate Cleon cit needlewomen proprioception folkway Bandung tool trimness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type8 misstep;
        /// <summary>
        /// betroth weekly anhydrous toilsome teletext crackup ledger fructose Elizabeth chivying regardless vestibule letdown Garvin
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        std::string Alistair;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        Type15 birth;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Abdel;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        unsigned long long cousinly;
        /// <summary>
        /// mayer tween Gaulish Marisa Delawarean sacrificer Hieronymus
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:39:09
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:39:09
        short Paley;
        const class Table_adenoidTable* Table;
        const Table_adenoidChild1Table* Child1;
    private: 
        static Table_adenoidChild1Table Child1Empty;
    public: 
        Table_adenoidRow(CremaReader::irow& row, Table_adenoidTable* table);
    friend static void Table_adenoidSetChild1(Table_adenoidRow* target, const std::vector<Table_adenoidChild1Row*>& childs);
    };
    // Modifier: Member_idle
    // ModifiedDateTime: 2016-07-25 오전 9:39:09
    class Table_adenoidTable : public CremaTable<Table_adenoidRow>
    {
    public: 
        const Table_adenoidChild1Table* Child1;
    public: 
        Table_adenoidTable();
        Table_adenoidTable(CremaReader::itable& table);
    public: 
        virtual ~Table_adenoidTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_adenoidRow* Find(Type8 misstep) const;
    };
    class Table_visualizationChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        int parabolic;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned short syncopation;
        /// <summary>
        /// husk transceiver Derk theatric alibi pilferage Fermi adjust Ilysa demonic binocular fidget Carmelia isochronal Xanthus Quixotism departmentalize Beardsley
        /// </summary>
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        bool steamroller;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        short rattrap;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        unsigned int Redondo;
        // Creator: Member_constipate
        // CreatedDateTime: 2016-07-25 오전 9:25:57
        // Modifier: Member_constipate
        // ModifiedDateTime: 2016-07-25 오전 9:25:57
        char peach;
        const class Table_visualizationChild1Table* Table;
        const class Table_visualizationRow* Parent;
    public: 
        Table_visualizationChild1Row(CremaReader::irow& row, Table_visualizationChild1Table* table);
    };
    // Creator: Member_constipate
    // CreatedDateTime: 2016-07-25 오전 9:25:57
    // Modifier: Member_constipate
    // ModifiedDateTime: 2016-07-25 오전 9:25:57
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오후 1:04:04
    class Table_visualizationChild1Table : public CremaTable<Table_visualizationChild1Row>
    {
    public: 
        Table_visualizationChild1Table();
        Table_visualizationChild1Table(CremaReader::itable& table);
        Table_visualizationChild1Table(std::vector<class Table_visualizationChild1Row*> rows);
    public: 
        virtual ~Table_visualizationChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_visualizationChild1Row* Find(int parabolic, short rattrap) const;
    };
    class Table_visualizationRow : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long marginalia;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        long long chatted;
        /// <summary>
        /// shallowness
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        std::string dutiful;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned long long strangulate;
        /// <summary>
        /// June Andalusian
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        time_t jazz;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 9:19:53
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 9:19:53
        unsigned int Rozella;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        char patrician;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        unsigned short brunet;
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:23:46
        // Modifier: Member_withdrawnness
        // ModifiedDateTime: 2016-07-25 오전 9:23:46
        short sweeping;
        const class Table_visualizationTable* Table;
        const Table_visualizationChild1Table* Child1;
    private: 
        static Table_visualizationChild1Table Child1Empty;
    public: 
        Table_visualizationRow(CremaReader::irow& row, Table_visualizationTable* table);
    friend static void Table_visualizationSetChild1(Table_visualizationRow* target, const std::vector<Table_visualizationChild1Row*>& childs);
    };
    // Modifier: Member_withdrawnness
    // ModifiedDateTime: 2016-07-25 오전 9:23:46
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오후 1:04:04
    class Table_visualizationTable : public CremaTable<Table_visualizationRow>
    {
    public: 
        const Table_visualizationChild1Table* Child1;
    public: 
        Table_visualizationTable();
        Table_visualizationTable(CremaReader::itable& table);
    public: 
        virtual ~Table_visualizationTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_visualizationRow* Find(unsigned long long marginalia, long long chatted) const;
    };
    class Table147Row : public CremaRow
    {
    public: 
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        int cuttlefish;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        unsigned long long cruse;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        unsigned long long yonder;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 4:50:20
        Type25 Michell;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        Type_primitiveness rabbet;
        // Creator: Member_privatization
        // CreatedDateTime: 2016-07-25 오후 12:41:23
        // Modifier: Member_privatization
        // ModifiedDateTime: 2016-07-25 오후 12:41:23
        int Sabra;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        time_t vulcanization;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        unsigned short Ilka;
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        bool Waldheim;
        /// <summary>
        /// currycomb intactness Jackqueline Vivie increment slighting Marian streaky lambency RISC peppery interrogative Mignonne
        /// </summary>
        // Creator: Admin_signalization
        // CreatedDateTime: 2016-07-25 오후 1:36:32
        // Modifier: Admin_signalization
        // ModifiedDateTime: 2016-07-25 오후 1:36:32
        int Curtice;
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 4:50:20
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 4:50:20
        short anticlerical;
        /// <summary>
        /// hungover tapper waxy nonviolence cracker altimeter Chengdu coper Vespasian doing catarrhs screwdriver calligraphy burster Gradeigh anchored boiled
        /// </summary>
        // Creator: Member_Maye
        // CreatedDateTime: 2016-07-25 오후 4:50:20
        // Modifier: Member_Maye
        // ModifiedDateTime: 2016-07-25 오후 4:50:20
        float Pam;
        const class Table147Table* Table;
    public: 
        Table147Row(CremaReader::irow& row, Table147Table* table);
    };
    // Creator: Member_privatization
    // CreatedDateTime: 2016-07-25 오후 12:41:23
    // Modifier: Member_Maye
    // ModifiedDateTime: 2016-07-25 오후 4:50:20
    // ContentsModifier: Admin_straddler
    // ContentsModifiedDateTime: 2016-07-25 오후 8:34:08
    class Table147Table : public CremaTable<Table147Row>
    {
    public: 
        Table147Table();
        Table147Table(CremaReader::itable& table);
    public: 
        virtual ~Table147Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table147Row* Find(int cuttlefish, unsigned long long yonder) const;
    };
    class Table197Row : public CremaRow
    {
    public: 
        /// <summary>
        /// rightness Ramo catholicity mo
        /// </summary>
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        Type1 stablest;
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        time_t mighty;
        /// <summary>
        /// wagon airhead closeup jay electrify load carouser kelvin sixfold feds ciao arch asphyxia
        /// </summary>
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        int Austin;
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        Type18 bespeak;
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        unsigned char greenfield;
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        short crossbar;
        /// <summary>
        /// restrictively
        /// </summary>
        // Creator: Admin_rancidity
        // CreatedDateTime: 2016-07-25 오후 5:26:30
        // Modifier: Admin_rancidity
        // ModifiedDateTime: 2016-07-25 오후 5:26:30
        int Waite;
        const class Table197Table* Table;
    public: 
        Table197Row(CremaReader::irow& row, Table197Table* table);
    };
    // Creator: Admin_rancidity
    // CreatedDateTime: 2016-07-25 오후 5:26:30
    // Modifier: Admin_rancidity
    // ModifiedDateTime: 2016-07-25 오후 5:26:30
    // ContentsModifier: Member_budgie
    // ContentsModifiedDateTime: 2016-07-25 오후 6:11:51
    class Table197Table : public CremaTable<Table197Row>
    {
    public: 
        Table197Table();
        Table197Table(CremaReader::itable& table);
    public: 
        virtual ~Table197Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table197Row* Find(Type1 stablest, int Waite) const;
    };
    class Table_blusteringRow : public CremaRow
    {
    public: 
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 10:41:42
        Type25 Tamma;
        /// <summary>
        /// Mannheim
        /// </summary>
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:02:28
        float thereby;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Member_idle
        // ModifiedDateTime: 2016-07-25 오전 10:41:42
        int jadeite;
        // Creator: Member_idle
        // CreatedDateTime: 2016-07-25 오전 10:41:42
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:02:28
        time_t rejoinder;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:02:28
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:02:28
        char meaningful;
        /// <summary>
        /// Delmonico aftereffect interlining Ila by caballero
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:02:28
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:02:28
        std::string pilgrimage;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오후 6:02:28
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오후 6:02:28
        Type25 monseigneur;
        const class Table_blusteringTable* Table;
    public: 
        Table_blusteringRow(CremaReader::irow& row, Table_blusteringTable* table);
    };
    // Modifier: Admin_serviceableness
    // ModifiedDateTime: 2016-07-25 오후 6:02:28
    class Table_blusteringTable : public CremaTable<Table_blusteringRow>
    {
    public: 
        Table_blusteringTable();
        Table_blusteringTable(CremaReader::itable& table);
    public: 
        virtual ~Table_blusteringTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_blusteringRow* Find(Type25 Tamma) const;
    };
    class Table_creepyChild2Row : public CremaRow
    {
    public: 
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 1:34:17
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 1:34:17
        unsigned short rift;
        // Creator: Admin_snootily
        // CreatedDateTime: 2016-07-25 오후 1:34:17
        // Modifier: Admin_snootily
        // ModifiedDateTime: 2016-07-25 오후 1:34:17
        bool detriment;
        const class Table_creepyChild2Table* Table;
        const class Table_creepyRow* Parent;
    public: 
        Table_creepyChild2Row(CremaReader::irow& row, Table_creepyChild2Table* table);
    };
    // Creator: Admin_snootily
    // CreatedDateTime: 2016-07-25 오후 1:34:17
    // Modifier: Admin_snootily
    // ModifiedDateTime: 2016-07-25 오후 1:34:17
    // ContentsModifier: Admin_truck
    // ContentsModifiedDateTime: 2016-07-25 오후 6:15:55
    class Table_creepyChild2Table : public CremaTable<Table_creepyChild2Row>
    {
    public: 
        Table_creepyChild2Table();
        Table_creepyChild2Table(CremaReader::itable& table);
        Table_creepyChild2Table(std::vector<class Table_creepyChild2Row*> rows);
    public: 
        virtual ~Table_creepyChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_creepyChild2Row* Find(unsigned short rift) const;
    };
    class Table_creepyRow : public CremaRow
    {
    public: 
        /// <summary>
        /// WW nexus Zorine isomorph sop evil haranguer inferential insupportable
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_Richard
        // ModifiedDateTime: 2016-07-25 오전 11:41:21
        time_t flabbily;
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        int wasteful;
        /// <summary>
        /// nursling imploring
        /// </summary>
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        unsigned long long litigiousness;
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        std::string chasm;
        // Creator: Member_whosoever
        // CreatedDateTime: 2016-07-25 오전 11:07:53
        // Modifier: Member_whosoever
        // ModifiedDateTime: 2016-07-25 오전 11:07:53
        time_t Malena;
        /// <summary>
        /// winnable
        /// </summary>
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:38:55
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:24:35
        Type_canted admirable;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:38:55
        // Modifier: Admin_titted
        // ModifiedDateTime: 2016-07-25 오전 11:38:55
        bool Thatcher;
        // Creator: Admin_titted
        // CreatedDateTime: 2016-07-25 오전 11:38:55
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:24:35
        int prowler;
        /// <summary>
        /// barbecue sprayer prefecture sunbathe
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:24:35
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:24:35
        unsigned long long Myrwyn;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:24:35
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:24:35
        int overbuilt;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오후 1:24:35
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오후 1:24:35
        Type_insolent bough;
        const class Table_creepyTable* Table;
        const Table_creepyChild2Table* Child2;
    private: 
        static Table_creepyChild2Table Child2Empty;
    public: 
        Table_creepyRow(CremaReader::irow& row, Table_creepyTable* table);
    friend static void Table_creepySetChild2(Table_creepyRow* target, const std::vector<Table_creepyChild2Row*>& childs);
    };
    // Modifier: Admin_Aura
    // ModifiedDateTime: 2016-07-25 오후 1:24:35
    // ContentsModifier: Admin_truck
    // ContentsModifiedDateTime: 2016-07-25 오후 6:15:55
    class Table_creepyTable : public CremaTable<Table_creepyRow>
    {
    public: 
        const Table_creepyChild2Table* Child2;
    public: 
        Table_creepyTable();
        Table_creepyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_creepyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_creepyRow* Find(time_t flabbily) const;
    };
    class Table_teashopRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned short Araucanian;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        const class Table_teashopTable* Table;
    public: 
        Table_teashopRow(CremaReader::irow& row, Table_teashopTable* table);
    };
    // Modifier: Member_schoolchild
    // ModifiedDateTime: 2016-07-25 오전 9:15:17
    // ContentsModifier: Admin_Aura
    // ContentsModifiedDateTime: 2016-07-25 오후 9:09:42
    class Table_teashopTable : public CremaTable<Table_teashopRow>
    {
    public: 
        Table_teashopTable();
        Table_teashopTable(CremaReader::itable& table);
    public: 
        virtual ~Table_teashopTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_teashopRow* Find(double corpsman, bool jetting) const;
    };
    class Table178Row : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오후 2:41:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오후 2:41:41
        float turk;
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오후 2:41:41
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오후 2:41:41
        Type74 blankness;
        const class Table178Table* Table;
    public: 
        Table178Row(CremaReader::irow& row, Table178Table* table);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오후 2:41:41
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오후 2:41:41
    // ContentsModifier: Member_creel
    // ContentsModifiedDateTime: 2016-07-25 오후 5:14:35
    class Table178Table : public CremaTable<Table178Row>
    {
    public: 
        Table178Table();
        Table178Table(CremaReader::itable& table);
    public: 
        virtual ~Table178Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table178Row* Find(float turk) const;
    };
    class Table35Child1Row : public CremaRow
    {
    public: 
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        time_t forcefulness;
        /// <summary>
        /// Bugatti Tulane Somalian Madlin hove distinguished ping origination officeholder Satyanarayanan squint nourished sawer shelled
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        float Inglis;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        char seismography;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        int faultlessness;
        /// <summary>
        /// pluralistic tedium apatite trapezium mezzanine Frigga curare
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        unsigned short fiver;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        short prevention;
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        time_t purloiner;
        /// <summary>
        /// lingerer balkanization sneeze Prado northbound impermeably
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:57:13
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:57:13
        unsigned long long Ancell;
        const class Table35Child1Table* Table;
        const class Table35Row* Parent;
    public: 
        Table35Child1Row(CremaReader::irow& row, Table35Child1Table* table);
    };
    // Creator: Member_Stevena
    // CreatedDateTime: 2016-07-25 오전 10:57:12
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:57:13
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 10:14:00
    class Table35Child1Table : public CremaTable<Table35Child1Row>
    {
    public: 
        Table35Child1Table();
        Table35Child1Table(CremaReader::itable& table);
        Table35Child1Table(std::vector<class Table35Child1Row*> rows);
    public: 
        virtual ~Table35Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table35Child1Row* Find(time_t forcefulness, short prevention) const;
    };
    class Table35Row : public CremaRow
    {
    public: 
        /// <summary>
        /// sweeten Beerbohm sulfa smith scrapping finite genuflection nonconservative widespread hyperglycemia intent prodigious mimicking crunchiness lodger Godard fibrillate Dina mythographer
        /// </summary>
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        short Portsmouth;
        // Creator: Admin_Aura
        // CreatedDateTime: 2016-07-25 오전 9:34:44
        // Modifier: Admin_Aura
        // ModifiedDateTime: 2016-07-25 오전 9:34:44
        Type_rennet bout;
        /// <summary>
        /// Ravi Buchanan Dejesus Wilde
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 10:57:01
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 10:57:01
        Type_HeraclitusDeletable aerosol;
        const class Table35Table* Table;
        const Table35Child1Table* Child1;
    private: 
        static Table35Child1Table Child1Empty;
    public: 
        Table35Row(CremaReader::irow& row, Table35Table* table);
    friend static void Table35SetChild1(Table35Row* target, const std::vector<Table35Child1Row*>& childs);
    };
    // Creator: Admin_Aura
    // CreatedDateTime: 2016-07-25 오전 9:34:44
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 10:57:01
    // ContentsModifier: Admin_serviceableness
    // ContentsModifiedDateTime: 2016-07-25 오후 10:14:00
    class Table35Table : public CremaTable<Table35Row>
    {
    public: 
        const Table35Child1Table* Child1;
    public: 
        Table35Table();
        Table35Table(CremaReader::itable& table);
    public: 
        virtual ~Table35Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table35Row* Find(short Portsmouth) const;
    };
    class Table41Row : public CremaRow
    {
    public: 
        // Creator: Admin_asterisked
        // CreatedDateTime: 2016-07-25 오전 9:40:53
        // Modifier: Admin_asterisked
        // ModifiedDateTime: 2016-07-25 오전 9:40:53
        unsigned char epoxy;
        const class Table41Table* Table;
    public: 
        Table41Row(CremaReader::irow& row, Table41Table* table);
    };
    // Creator: Admin_asterisked
    // CreatedDateTime: 2016-07-25 오전 9:40:53
    // Modifier: Admin_asterisked
    // ModifiedDateTime: 2016-07-25 오전 9:40:53
    // ContentsModifier: Member_deception
    // ContentsModifiedDateTime: 2016-07-25 오후 4:48:29
    class Table41Table : public CremaTable<Table41Row>
    {
    public: 
        Table41Table();
        Table41Table(CremaReader::itable& table);
    public: 
        virtual ~Table41Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table41Row* Find(unsigned char epoxy) const;
    };
    class Table8Child1Row : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:14
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 9:10:32
        time_t Englishmen;
        /// <summary>
        /// MPH identical checkroom Astarte Averroes Kaylee enforceability Cherye
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:14
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:14
        int faze;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:14
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 9:10:32
        unsigned long long degeneracy;
        /// <summary>
        /// dimming glacial trip Wichita icebound Orthodox Lombard consolidate doughty eyeopening Birk tootsie Connor weighting wonning Noyce
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:14
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:14
        std::string studious;
        /// <summary>
        /// hopping Paraguay Klarrisa scented obtainment Garret Karlene Wellington Kendell fledgling exorcism Shenyang riboflavin catastrophe Lausanne strangeness leech
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:14
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:14
        std::string slouch;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 9:10:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 9:10:32
        Type8 regularity;
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 9:10:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 9:10:32
        float Bible;
        /// <summary>
        /// Read Cheng descends thingamajig serialization granule seq mart jabber ineptitude
        /// </summary>
        // Creator: Member_king
        // CreatedDateTime: 2016-07-25 오전 9:10:32
        // Modifier: Member_king
        // ModifiedDateTime: 2016-07-25 오전 9:10:32
        float paunch;
        const class Table8Child1Table* Table;
        const class Table8Row* Parent;
    public: 
        Table8Child1Row(CremaReader::irow& row, Table8Child1Table* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:14
    // Modifier: Member_king
    // ModifiedDateTime: 2016-07-25 오전 9:10:32
    // ContentsModifier: Admin_perch
    // ContentsModifiedDateTime: 2016-07-25 오후 11:06:44
    class Table8Child1Table : public CremaTable<Table8Child1Row>
    {
    public: 
        Table8Child1Table();
        Table8Child1Table(CremaReader::itable& table);
        Table8Child1Table(std::vector<class Table8Child1Row*> rows);
    public: 
        virtual ~Table8Child1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table8Child1Row* Find(time_t Englishmen) const;
    };
    class Table8Child_BCRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:16
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:16
        time_t Rodriquez;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:16
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:16
        float friendless;
        const class Table8Child_BCTable* Table;
        const Table8Row* Parent;
    public: 
        Table8Child_BCRow(CremaReader::irow& row, Table8Child_BCTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:16
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:16
    // ContentsModifier: Admin_perch
    // ContentsModifiedDateTime: 2016-07-25 오후 11:06:44
    class Table8Child_BCTable : public CremaTable<Table8Child_BCRow>
    {
    public: 
        Table8Child_BCTable();
        Table8Child_BCTable(CremaReader::itable& table);
        Table8Child_BCTable(std::vector<class Table8Child_BCRow*> rows);
    public: 
        virtual ~Table8Child_BCTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table8Child_BCRow* Find(time_t Rodriquez) const;
    };
    class Table8Row : public CremaRow
    {
    public: 
        /// <summary>
        /// pathogenic Ge Escherichia Nicki watcher athletic toleration staph youngish testament Gibbie overbuilt Moseley sac muzzler Hoover stunted
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        float Jeddy;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        unsigned int cramper;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        unsigned int accumulative;
        /// <summary>
        /// jalopy Corinne stilted throw leer student birefringent selves booking NBA waterside besot Arnoldo cyanate extrication boorish
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        bool dimmest;
        /// <summary>
        /// account interconnectedness haler rein teacupful incurious modern thyroidal
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        double parity;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        bool SAC;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:08
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:08
        int plantlike;
        const class Table8Table* Table;
        const Table8Child1Table* Child1;
        const Table8Child_BCTable* Child_BC;
    private: 
        static Table8Child1Table Child1Empty;
        static Table8Child_BCTable Child_BCEmpty;
    public: 
        Table8Row(CremaReader::irow& row, Table8Table* table);
    friend static void Table8SetChild1(Table8Row* target, const std::vector<Table8Child1Row*>& childs);
        static void Table8SetChild_BC(Table8Row* target, const std::vector<Table8Child_BCRow*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:08
    // ContentsModifier: Admin_perch
    // ContentsModifiedDateTime: 2016-07-25 오후 11:06:44
    class Table8Table : public CremaTable<Table8Row>
    {
    public: 
        const Table8Child1Table* Child1;
        const Table8Child_BCTable* Child_BC;
    public: 
        Table8Table();
        Table8Table(CremaReader::itable& table);
    public: 
        virtual ~Table8Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table8Row* Find(float Jeddy, bool dimmest) const;
    };
    class Table_annoyChild_ArrheniusRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Rivi sweatband Emlynne Terrel squire denude inflexibleness Carol Knudsen renderer VLSI fastening made occurrence croquet Freeland clarinet slovenly Cahokia
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        short gaping;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        bool optics;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        double cowpony;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        Type_Arlan Vannie;
        /// <summary>
        /// fluorimetric Cetus Hube
        /// </summary>
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        float dibble;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        Type_Attn Orono;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        double moonstone;
        // Creator: Member_deception
        // CreatedDateTime: 2016-07-25 오전 9:17:52
        // Modifier: Member_deception
        // ModifiedDateTime: 2016-07-25 오전 9:17:52
        int illusion;
        const class Table_annoyChild_ArrheniusTable* Table;
        const class Table_annoyRow* Parent;
    public: 
        Table_annoyChild_ArrheniusRow(CremaReader::irow& row, Table_annoyChild_ArrheniusTable* table);
    };
    // Creator: Member_deception
    // CreatedDateTime: 2016-07-25 오전 9:17:52
    // Modifier: Member_deception
    // ModifiedDateTime: 2016-07-25 오전 9:17:52
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오전 11:49:31
    class Table_annoyChild_ArrheniusTable : public CremaTable<Table_annoyChild_ArrheniusRow>
    {
    public: 
        Table_annoyChild_ArrheniusTable();
        Table_annoyChild_ArrheniusTable(CremaReader::itable& table);
        Table_annoyChild_ArrheniusTable(std::vector<class Table_annoyChild_ArrheniusRow*> rows);
    public: 
        virtual ~Table_annoyChild_ArrheniusTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_annoyChild_ArrheniusRow* Find(short gaping, int illusion) const;
    };
    class Table_annoyRow : public CremaRow
    {
    public: 
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double corpsman;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        unsigned short Araucanian;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:37:49
        unsigned char Kaposi;
        /// <summary>
        /// Behan
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float hyperemia;
        /// <summary>
        /// psychoanalysis Olivero astronomical Myrtie Carly purgative leeward Jessalyn Jack Russo Vichy merciful shrubbed meaty shy testator Pompey
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:37:49
        float pensiveness;
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        bool jetting;
        /// <summary>
        /// durable profuse pardoner humored Ellissa convolved remoteness crux thrill viz sculler photo Sudanic
        /// </summary>
        // Creator: Member_jitterbugger
        // CreatedDateTime: 2016-07-25 오전 9:11:59
        // Modifier: Member_jitterbugger
        // ModifiedDateTime: 2016-07-25 오전 9:11:59
        double babe;
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        float clears;
        /// <summary>
        /// Dangerfield homespun nutmegged
        /// </summary>
        // Creator: Member_schoolchild
        // CreatedDateTime: 2016-07-25 오전 9:15:17
        // Modifier: Member_schoolchild
        // ModifiedDateTime: 2016-07-25 오전 9:15:17
        int codetermine;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:37:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:37:49
        int lotion;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:37:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:37:49
        char crosscurrent;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:37:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:37:49
        Type15 Ad;
        // Creator: Admin_Marley
        // CreatedDateTime: 2016-07-25 오후 12:37:49
        // Modifier: Admin_Marley
        // ModifiedDateTime: 2016-07-25 오후 12:37:49
        bool neg;
        const class Table_annoyTable* Table;
        const Table_annoyChild_ArrheniusTable* Child_Arrhenius;
    private: 
        static Table_annoyChild_ArrheniusTable Child_ArrheniusEmpty;
    public: 
        Table_annoyRow(CremaReader::irow& row, Table_annoyTable* table);
    friend static void Table_annoySetChild_Arrhenius(Table_annoyRow* target, const std::vector<Table_annoyChild_ArrheniusRow*>& childs);
    };
    // Modifier: Admin_Marley
    // ModifiedDateTime: 2016-07-25 오후 12:37:49
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오전 11:49:31
    class Table_annoyTable : public CremaTable<Table_annoyRow>
    {
    public: 
        const Table_annoyChild_ArrheniusTable* Child_Arrhenius;
    public: 
        Table_annoyTable();
        Table_annoyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_annoyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_annoyRow* Find(double corpsman, bool jetting) const;
    };
    class Table_headdressRow : public CremaRow
    {
    public: 
        // Creator: Member_withdrawnness
        // CreatedDateTime: 2016-07-25 오전 9:14:02
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 11:59:01
        float culpableness;
        /// <summary>
        /// gentlefolk Eric Finley subject Mar bickerer Eskimo concoct philosophic metabolize threatener halocarbon indescribableness Robin goofy selenography comedienne
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 11:59:01
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 11:59:01
        unsigned long long spare;
        /// <summary>
        /// roof Malissa carpetbagged Mitchael disbandment daffiness arterioscleroses jeep Malaya patella Robertson trinitarian trainspotter robbed canny hobbyhorse
        /// </summary>
        // Creator: Admin_Lisetta
        // CreatedDateTime: 2016-07-25 오전 11:59:01
        // Modifier: Admin_Lisetta
        // ModifiedDateTime: 2016-07-25 오전 11:59:01
        Type_Page ltd;
        const class Table_headdressTable* Table;
    public: 
        Table_headdressRow(CremaReader::irow& row, Table_headdressTable* table);
    };
    // Modifier: Admin_Lisetta
    // ModifiedDateTime: 2016-07-25 오전 11:59:01
    // ContentsModifier: Admin_titted
    // ContentsModifiedDateTime: 2016-07-25 오후 1:11:14
    class Table_headdressTable : public CremaTable<Table_headdressRow>
    {
    public: 
        Table_headdressTable();
        Table_headdressTable(CremaReader::itable& table);
    public: 
        virtual ~Table_headdressTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_headdressRow* Find(float culpableness) const;
    };
    class Table_ValinaRow : public CremaRow
    {
    public: 
        /// <summary>
        /// Sapphire dosimeter
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double Tanny;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        double locale;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char fagoting;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        Type_Madison aim;
        /// <summary>
        /// moths oscillator lilac procaine crackdown Andriana trimmed hullabaloo
        /// </summary>
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        std::string brutality;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float scantly;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        int British;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        char broadcast;
        // Creator: Admin_wholesomeness
        // CreatedDateTime: 2016-07-25 오전 9:15:25
        // Modifier: Admin_wholesomeness
        // ModifiedDateTime: 2016-07-25 오전 9:15:25
        float injurer;
        const class Table_ValinaTable* Table;
    public: 
        Table_ValinaRow(CremaReader::irow& row, Table_ValinaTable* table);
    };
    // Modifier: Admin_wholesomeness
    // ModifiedDateTime: 2016-07-25 오전 9:15:25
    // ContentsModifier: Admin_Marley
    // ContentsModifiedDateTime: 2016-07-25 오후 10:59:18
    class Table_ValinaTable : public CremaTable<Table_ValinaRow>
    {
    public: 
        Table_ValinaTable();
        Table_ValinaTable(CremaReader::itable& table);
    public: 
        virtual ~Table_ValinaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_ValinaRow* Find(double Tanny, const std::string& brutality) const;
    };
    class Table_WeinbergChild1Row : public CremaRow
    {
    public: 
        /// <summary>
        /// sandman enjoy centrifugal museum Springfield attribute unwarrantable Warren Kandahar infarct jabot pictorial destroy Juanita
        /// </summary>
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오후 12:35:54
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오후 12:35:54
        Type24 hunt;
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오후 12:35:54
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오후 12:35:54
        double husband;
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오후 12:35:54
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오후 12:35:54
        Type_Multan homicide;
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오후 12:35:54
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오후 12:35:54
        char intrinsic;
        /// <summary>
        /// pitch Castaneda escapology Tomasine committee fistulous Frankel contravene evict
        /// </summary>
        // Creator: Member_vanishing
        // CreatedDateTime: 2016-07-25 오후 12:35:54
        // Modifier: Member_vanishing
        // ModifiedDateTime: 2016-07-25 오후 12:35:54
        std::string iceberg;
        const class Table_WeinbergChild1Table* Table;
        const class Table_WeinbergRow* Parent;
    public: 
        Table_WeinbergChild1Row(CremaReader::irow& row, Table_WeinbergChild1Table* table);
    };
    // Creator: Member_vanishing
    // CreatedDateTime: 2016-07-25 오후 12:35:54
    // Modifier: Member_vanishing
    // ModifiedDateTime: 2016-07-25 오후 12:35:54
    class Table_WeinbergChild1Table : public CremaTable<Table_WeinbergChild1Row>
    {
    public: 
        Table_WeinbergChild1Table();
        Table_WeinbergChild1Table(CremaReader::itable& table);
        Table_WeinbergChild1Table(std::vector<class Table_WeinbergChild1Row*> rows);
    public: 
        virtual ~Table_WeinbergChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_WeinbergChild1Row* Find(Type24 hunt) const;
    };
    class Table_WeinbergRow : public CremaRow
    {
    public: 
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        float unnavigable;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        unsigned long long Janessa;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        time_t assiduity;
        /// <summary>
        /// debilitate vegetation abundant convene philologist outtake unlimber tabula filmy upgrade Gerhard Ronni knowable Mariya
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type8 yardmaster;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        unsigned char Sir;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        Type_Attn thermostat;
        /// <summary>
        /// monologue griever trapper Dirac roommate oops Thieu magicked sophisticated expound quality scorn acne artsy unbalanced obliteration Clary Kessiah Ibby
        /// </summary>
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        std::string popinjay;
        // Creator: Admin_serviceableness
        // CreatedDateTime: 2016-07-25 오전 9:24:20
        // Modifier: Admin_serviceableness
        // ModifiedDateTime: 2016-07-25 오전 9:24:20
        unsigned short planetarium;
        /// <summary>
        /// secularization Hazlitt Kai flirtatiousness timbering prefacer admire suede silkscreen soled calm homology Ambrosio Epstein inflict
        /// </summary>
        // Creator: Member_Stevena
        // CreatedDateTime: 2016-07-25 오전 10:51:19
        // Modifier: Member_Stevena
        // ModifiedDateTime: 2016-07-25 오전 10:51:19
        Type_insolent jasper;
        const class Table_WeinbergTable* Table;
        const Table_WeinbergChild1Table* Child1;
    private: 
        static Table_WeinbergChild1Table Child1Empty;
    public: 
        Table_WeinbergRow(CremaReader::irow& row, Table_WeinbergTable* table);
    friend static void Table_WeinbergSetChild1(Table_WeinbergRow* target, const std::vector<Table_WeinbergChild1Row*>& childs);
    };
    // Modifier: Member_Stevena
    // ModifiedDateTime: 2016-07-25 오전 10:51:19
    class Table_WeinbergTable : public CremaTable<Table_WeinbergRow>
    {
    public: 
        const Table_WeinbergChild1Table* Child1;
    public: 
        Table_WeinbergTable();
        Table_WeinbergTable(CremaReader::itable& table);
    public: 
        virtual ~Table_WeinbergTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_WeinbergRow* Find(float unnavigable, time_t assiduity) const;
    };
    class Table198Row : public CremaRow
    {
    public: 
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 5:27:13
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 5:27:13
        unsigned short nonscheduled;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 5:27:13
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 5:27:13
        long long mandrill;
        // Creator: Admin_cenotaphs
        // CreatedDateTime: 2016-07-25 오후 5:27:13
        // Modifier: Admin_cenotaphs
        // ModifiedDateTime: 2016-07-25 오후 5:27:13
        Type85 Caro;
        const class Table198Table* Table;
    public: 
        Table198Row(CremaReader::irow& row, Table198Table* table);
    };
    // Creator: Admin_cenotaphs
    // CreatedDateTime: 2016-07-25 오후 5:27:13
    // Modifier: Admin_cenotaphs
    // ModifiedDateTime: 2016-07-25 오후 5:27:13
    class Table198Table : public CremaTable<Table198Row>
    {
    public: 
        Table198Table();
        Table198Table(CremaReader::itable& table);
    public: 
        virtual ~Table198Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table198Row* Find(unsigned short nonscheduled) const;
    };
    class Table_longsightedRow : public CremaRow
    {
    public: 
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        Type_Gretta event;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        char serendipitous;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        int Pawtucket;
        // Creator: Admin_perch
        // CreatedDateTime: 2016-07-25 오전 10:32:53
        // Modifier: Admin_perch
        // ModifiedDateTime: 2016-07-25 오전 10:32:53
        std::string cordial;
        const class Table_longsightedTable* Table;
    public: 
        Table_longsightedRow(CremaReader::irow& row, Table_longsightedTable* table);
    };
    // Modifier: Admin_perch
    // ModifiedDateTime: 2016-07-25 오전 10:32:53
    // ContentsModifier: Admin_pock
    // ContentsModifiedDateTime: 2016-07-25 오후 5:05:55
    class Table_longsightedTable : public CremaTable<Table_longsightedRow>
    {
    public: 
        Table_longsightedTable();
        Table_longsightedTable(CremaReader::itable& table);
    public: 
        virtual ~Table_longsightedTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_longsightedRow* Find(Type_Gretta event, const std::string& cordial) const;
    };
    class Table161Row : public CremaRow
    {
    public: 
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        Type70 choral;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        std::string malting;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        unsigned char intuitive;
        // Creator: Member_Edgardo
        // CreatedDateTime: 2016-07-25 오후 1:33:24
        // Modifier: Member_Edgardo
        // ModifiedDateTime: 2016-07-25 오후 1:33:24
        unsigned short bandsmen;
        const class Table161Table* Table;
    public: 
        Table161Row(CremaReader::irow& row, Table161Table* table);
    };
    // Creator: Member_Edgardo
    // CreatedDateTime: 2016-07-25 오후 1:33:24
    // Modifier: Member_Edgardo
    // ModifiedDateTime: 2016-07-25 오후 1:33:24
    class Table161Table : public CremaTable<Table161Row>
    {
    public: 
        Table161Table();
        Table161Table(CremaReader::itable& table);
    public: 
        virtual ~Table161Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table161Row* Find(Type70 choral, unsigned char intuitive) const;
    };
    class Table_intervalChild1Row : public CremaRow
    {
    public: 
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        unsigned long long cesspool;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        char vocalization;
        /// <summary>
        /// Clarendon nonallergic asserter canteen scapulae extraterritoriality shirt Wilden microbiologist escrow overshoot Calvinism reopen bankcard Ellesmere outermost Hyperion semipermeable
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        bool overbook;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:38:53
        time_t affidavit;
        /// <summary>
        /// Merridie allegretto Welmers kludger Stevenson testy
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_budgie
        // ModifiedDateTime: 2016-07-25 오전 10:15:43
        bool More;
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:38:53
        int philosophizer;
        /// <summary>
        /// fleshpot bunk transcription pardonableness Sargasso Mick Adi benignant dilly Kaitlynn breakfaster gunslinger determinableness certitude
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:46:31
        int goatherd;
        /// <summary>
        /// milk Hydra repetitious hitless warty discotheque filament ersatz sacristan incept Bayonne Margalo Phaedra circumlocutory prognosticator
        /// </summary>
        // Creator: Member_budgie
        // CreatedDateTime: 2016-07-25 오전 10:15:43
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:38:53
        Type_livingness bummed;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:38:53
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:38:53
        unsigned long long Shawnee;
        /// <summary>
        /// Gracie felony unwell voter
        /// </summary>
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:38:53
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:38:53
        unsigned char wannabe;
        // Creator: Member_antique
        // CreatedDateTime: 2016-07-25 오전 10:38:53
        // Modifier: Member_antique
        // ModifiedDateTime: 2016-07-25 오전 10:38:53
        time_t Tartuffe;
        /// <summary>
        /// flasher unmnemonic stiletto Tabriz herniate
        /// </summary>
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:46:31
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:46:31
        float Ernaline;
        // Creator: Admin_reggae
        // CreatedDateTime: 2016-07-25 오전 10:46:31
        // Modifier: Admin_reggae
        // ModifiedDateTime: 2016-07-25 오전 10:46:31
        Type30 idealistically;
        const class Table_intervalChild1Table* Table;
        const class Table_intervalRow* Parent;
    public: 
        Table_intervalChild1Row(CremaReader::irow& row, Table_intervalChild1Table* table);
    };
    // Creator: Member_budgie
    // CreatedDateTime: 2016-07-25 오전 10:15:43
    // Modifier: Admin_reggae
    // ModifiedDateTime: 2016-07-25 오전 10:46:31
    // ContentsModifier: Admin_energized
    // ContentsModifiedDateTime: 2016-07-25 오전 11:17:55
    class Table_intervalChild1Table : public CremaTable<Table_intervalChild1Row>
    {
    public: 
        Table_intervalChild1Table();
        Table_intervalChild1Table(CremaReader::itable& table);
        Table_intervalChild1Table(std::vector<class Table_intervalChild1Row*> rows);
    public: 
        virtual ~Table_intervalChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_intervalChild1Row* Find(unsigned long long cesspool, int philosophizer, int goatherd, unsigned long long Shawnee) const;
    };
    class Table_intervalChild2Row : public CremaRow
    {
    public: 
        /// <summary>
        /// apotheosizes BBB unrepeatability zwieback
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 11:10:20
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 11:10:20
        int Carleton;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 11:10:20
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 11:10:20
        Type_housebreaking Smithson;
        /// <summary>
        /// Scotswomen meteorite helper hence shadowiness index plainspoken gagwriter Swenson spearer
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 11:10:20
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 11:10:20
        bool lifeguard;
        /// <summary>
        /// visibility mission Richfield hazel industry Seattle Unukalhai envision negligence
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 11:10:20
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 11:10:20
        float embellisher;
        /// <summary>
        /// Hondo LaTeX
        /// </summary>
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 11:10:20
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 11:10:20
        std::string byroad;
        // Creator: Admin_getup
        // CreatedDateTime: 2016-07-25 오전 11:10:20
        // Modifier: Admin_getup
        // ModifiedDateTime: 2016-07-25 오전 11:10:20
        double speedup;
        const class Table_intervalChild2Table* Table;
        const Table_intervalRow* Parent;
    public: 
        Table_intervalChild2Row(CremaReader::irow& row, Table_intervalChild2Table* table);
    };
    // Creator: Admin_getup
    // CreatedDateTime: 2016-07-25 오전 11:10:20
    // Modifier: Admin_getup
    // ModifiedDateTime: 2016-07-25 오전 11:10:20
    // ContentsModifier: Admin_energized
    // ContentsModifiedDateTime: 2016-07-25 오전 11:17:55
    class Table_intervalChild2Table : public CremaTable<Table_intervalChild2Row>
    {
    public: 
        Table_intervalChild2Table();
        Table_intervalChild2Table(CremaReader::itable& table);
        Table_intervalChild2Table(std::vector<class Table_intervalChild2Row*> rows);
    public: 
        virtual ~Table_intervalChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_intervalChild2Row* Find(int Carleton, float embellisher) const;
    };
    class Table_intervalRow : public CremaRow
    {
    public: 
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        char Elicia;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        time_t execrably;
        /// <summary>
        /// trophic mugginess amanuensis
        /// </summary>
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type_rennet Knudsen;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        Type15 bulky;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float fake;
        // Creator: Admin_therefore
        // CreatedDateTime: 2016-07-25 오전 9:28:53
        // Modifier: Admin_therefore
        // ModifiedDateTime: 2016-07-25 오전 9:28:53
        float scintillation;
        const class Table_intervalTable* Table;
        const Table_intervalChild1Table* Child1;
        const Table_intervalChild2Table* Child2;
    private: 
        static Table_intervalChild1Table Child1Empty;
        static Table_intervalChild2Table Child2Empty;
    public: 
        Table_intervalRow(CremaReader::irow& row, Table_intervalTable* table);
    friend static void Table_intervalSetChild1(Table_intervalRow* target, const std::vector<Table_intervalChild1Row*>& childs);
        static void Table_intervalSetChild2(Table_intervalRow* target, const std::vector<Table_intervalChild2Row*>& childs);
    };
    // Modifier: Admin_therefore
    // ModifiedDateTime: 2016-07-25 오전 9:28:53
    // ContentsModifier: Admin_energized
    // ContentsModifiedDateTime: 2016-07-25 오전 11:17:55
    class Table_intervalTable : public CremaTable<Table_intervalRow>
    {
    public: 
        const Table_intervalChild1Table* Child1;
        const Table_intervalChild2Table* Child2;
    public: 
        Table_intervalTable();
        Table_intervalTable(CremaReader::itable& table);
    public: 
        virtual ~Table_intervalTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_intervalRow* Find(char Elicia) const;
    };
    class Table_recopyChild2Row : public CremaRow
    {
    public: 
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        float Arawakan;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        long long candelabra;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        float polonium;
        // Creator: Member_Cecilia
        // CreatedDateTime: 2016-07-25 오전 11:06:17
        // Modifier: Member_Cecilia
        // ModifiedDateTime: 2016-07-25 오전 11:06:17
        short perigee;
        const class Table_recopyChild2Table* Table;
        const class Table_recopyRow* Parent;
    public: 
        Table_recopyChild2Row(CremaReader::irow& row, Table_recopyChild2Table* table);
    };
    // Creator: Member_Cecilia
    // CreatedDateTime: 2016-07-25 오전 11:06:16
    // Modifier: Member_Cecilia
    // ModifiedDateTime: 2016-07-25 오전 11:06:17
    class Table_recopyChild2Table : public CremaTable<Table_recopyChild2Row>
    {
    public: 
        Table_recopyChild2Table();
        Table_recopyChild2Table(CremaReader::itable& table);
        Table_recopyChild2Table(std::vector<class Table_recopyChild2Row*> rows);
    public: 
        virtual ~Table_recopyChild2Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_recopyChild2Row* Find(float Arawakan) const;
    };
    class Table_recopyChild3Row : public CremaRow
    {
    public: 
        /// <summary>
        /// Lynnette overload Ardath minimum goalie purposive approximative innumerableness fictionalization interpose Southfield phoebe prosthesis Antigua hellbender illume
        /// </summary>
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오후 5:55:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:55:45
        int bathetic;
        /// <summary>
        /// threw lysine SJ hooker hobbing extrinsically wisdom unrepeatability sheaths below stadias Lesly linemen evener Orbadiah Lutz vitriolic workmanlike Toledo
        /// </summary>
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오후 5:55:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:55:45
        int Langley;
        /// <summary>
        /// outclass sheaf opera Ossie fax privateness humorousness Auriga Pet spastic tick nonvocal
        /// </summary>
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오후 5:55:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:55:45
        Type72 mambo;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오후 5:55:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:55:45
        int anger;
        // Creator: Member_scuzzy
        // CreatedDateTime: 2016-07-25 오후 5:55:45
        // Modifier: Member_scuzzy
        // ModifiedDateTime: 2016-07-25 오후 5:55:45
        long long op;
        const class Table_recopyChild3Table* Table;
        const Table_recopyRow* Parent;
    public: 
        Table_recopyChild3Row(CremaReader::irow& row, Table_recopyChild3Table* table);
    };
    // Creator: Member_scuzzy
    // CreatedDateTime: 2016-07-25 오후 5:55:45
    // Modifier: Member_scuzzy
    // ModifiedDateTime: 2016-07-25 오후 5:55:45
    class Table_recopyChild3Table : public CremaTable<Table_recopyChild3Row>
    {
    public: 
        Table_recopyChild3Table();
        Table_recopyChild3Table(CremaReader::itable& table);
        Table_recopyChild3Table(std::vector<class Table_recopyChild3Row*> rows);
    public: 
        virtual ~Table_recopyChild3Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_recopyChild3Row* Find(int bathetic, int anger) const;
    };
    class Table_recopyRow : public CremaRow
    {
    public: 
        // Creator: Admin_injection
        // CreatedDateTime: 2016-07-25 오전 9:19:22
        // Modifier: Admin_enshroud
        // ModifiedDateTime: 2016-07-25 오전 9:59:54
        unsigned char flaxseed;
        const class Table_recopyTable* Table;
        const Table_recopyChild2Table* Child2;
        const Table_recopyChild3Table* Child3;
    private: 
        static Table_recopyChild2Table Child2Empty;
        static Table_recopyChild3Table Child3Empty;
    public: 
        Table_recopyRow(CremaReader::irow& row, Table_recopyTable* table);
    friend static void Table_recopySetChild2(Table_recopyRow* target, const std::vector<Table_recopyChild2Row*>& childs);
        static void Table_recopySetChild3(Table_recopyRow* target, const std::vector<Table_recopyChild3Row*>& childs);
    };
    // Modifier: Member_Willamina
    // ModifiedDateTime: 2016-07-25 오전 11:54:53
    class Table_recopyTable : public CremaTable<Table_recopyRow>
    {
    public: 
        const Table_recopyChild2Table* Child2;
        const Table_recopyChild3Table* Child3;
    public: 
        Table_recopyTable();
        Table_recopyTable(CremaReader::itable& table);
    public: 
        virtual ~Table_recopyTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_recopyRow* Find(unsigned char flaxseed) const;
    };
    class Table_RivaChild_JeevesRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        long long banshee;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        float contently;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        unsigned int stickleback;
        /// <summary>
        /// actinic
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        std::string Wendie;
        /// <summary>
        /// trimodal divulge Rena willinger Nevada candelabrum
        /// </summary>
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        unsigned char Elmira;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        unsigned int play;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        unsigned int duce;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:25
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:25
        double shortstop;
        const class Table_RivaChild_JeevesTable* Table;
        const class Table_RivaRow* Parent;
    public: 
        Table_RivaChild_JeevesRow(CremaReader::irow& row, Table_RivaChild_JeevesTable* table);
    };
    // Creator: admin
    // CreatedDateTime: 2016-07-25 오전 5:53:25
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:25
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오후 1:53:00
    class Table_RivaChild_JeevesTable : public CremaTable<Table_RivaChild_JeevesRow>
    {
    public: 
        Table_RivaChild_JeevesTable();
        Table_RivaChild_JeevesTable(CremaReader::itable& table);
        Table_RivaChild_JeevesTable(std::vector<class Table_RivaChild_JeevesRow*> rows);
    public: 
        virtual ~Table_RivaChild_JeevesTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_RivaChild_JeevesRow* Find(long long banshee) const;
    };
    class Table_RivaChild1Row : public CremaRow
    {
    public: 
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        std::string mule;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        Type_canted cycle;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        unsigned int timpani;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        int merited;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        time_t advisable;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        time_t calculus;
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        long long Groton;
        /// <summary>
        /// pillbox abuse recognizable signalman Kawasaki
        /// </summary>
        // Creator: Admin_Augustus
        // CreatedDateTime: 2016-07-25 오전 9:28:37
        // Modifier: Admin_Augustus
        // ModifiedDateTime: 2016-07-25 오전 9:28:37
        Type_Meiji scruple;
        const class Table_RivaChild1Table* Table;
        const Table_RivaRow* Parent;
    public: 
        Table_RivaChild1Row(CremaReader::irow& row, Table_RivaChild1Table* table);
    };
    // Creator: Admin_Augustus
    // CreatedDateTime: 2016-07-25 오전 9:28:37
    // Modifier: Admin_Augustus
    // ModifiedDateTime: 2016-07-25 오전 9:28:37
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오후 1:53:00
    class Table_RivaChild1Table : public CremaTable<Table_RivaChild1Row>
    {
    public: 
        Table_RivaChild1Table();
        Table_RivaChild1Table(CremaReader::itable& table);
        Table_RivaChild1Table(std::vector<class Table_RivaChild1Row*> rows);
    public: 
        virtual ~Table_RivaChild1Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_RivaChild1Row* Find(const std::string& mule, unsigned int timpani) const;
    };
    class Table_RivaRow : public CremaRow
    {
    public: 
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        unsigned int Tupperware;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        int outwitted;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        unsigned char Janeiro;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        int capping;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        char whole;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        unsigned char convalescent;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        short mayflower;
        // Creator: admin
        // CreatedDateTime: 2016-07-25 오전 5:53:06
        // Modifier: admin
        // ModifiedDateTime: 2016-07-25 오전 5:53:06
        unsigned char terrazzo;
        const class Table_RivaTable* Table;
        const Table_RivaChild_JeevesTable* Child_Jeeves;
        const Table_RivaChild1Table* Child1;
    private: 
        static Table_RivaChild_JeevesTable Child_JeevesEmpty;
        static Table_RivaChild1Table Child1Empty;
    public: 
        Table_RivaRow(CremaReader::irow& row, Table_RivaTable* table);
    friend static void Table_RivaSetChild_Jeeves(Table_RivaRow* target, const std::vector<Table_RivaChild_JeevesRow*>& childs);
        static void Table_RivaSetChild1(Table_RivaRow* target, const std::vector<Table_RivaChild1Row*>& childs);
    };
    // Modifier: admin
    // ModifiedDateTime: 2016-07-25 오전 5:53:06
    // ContentsModifier: Member_withdrawnness
    // ContentsModifiedDateTime: 2016-07-25 오후 1:53:00
    class Table_RivaTable : public CremaTable<Table_RivaRow>
    {
    public: 
        const Table_RivaChild_JeevesTable* Child_Jeeves;
        const Table_RivaChild1Table* Child1;
    public: 
        Table_RivaTable();
        Table_RivaTable(CremaReader::itable& table);
    public: 
        virtual ~Table_RivaTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const Table_RivaRow* Find(unsigned int Tupperware) const;
    };
    class Table_TamarraRow : public CremaRow
    {
    public: 
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        time_t Corbet;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        long long LyX;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        Type_RhodesDeletable gasser;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        time_t salinity;
        /// <summary>
        /// squishy scapulae sweetshop overprice carpool chuckling
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        time_t Sanchez;
        /// <summary>
        /// Maricela chutzpah retinue evaluated lead gemming clocker lameness tuberose gelignite enclosure Re Augusta Transite whitewall Shawn illusionist
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        Type_lustilyDeletable Ephrayim;
        /// <summary>
        /// seabed retail
        /// </summary>
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        Type_guttering tickle;
        // Creator: Admin_gifted
        // CreatedDateTime: 2016-07-25 오전 11:32:31
        // Modifier: Admin_gifted
        // ModifiedDateTime: 2016-07-25 오전 11:32:31
        Type_insolent climate;
        const class Table_TamarraTable* Table;
    public: 
        Table_TamarraRow(CremaReader::irow& row, Table_TamarraTable* table);
    };
    // Modifier: Admin_gifted
    // ModifiedDateTime: 2016-07-25 오전 11:32:31
    class Table_TamarraTable : public CremaTable<Table_TamarraRow>
    {
    public: 
        Table_TamarraTable();
        Table_TamarraTable(CremaReader::itable& table);
    public: 
        virtual ~Table_TamarraTable();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table_TamarraRow* Find(time_t Corbet, Type_RhodesDeletable gasser, Type_insolent climate) const;
    };
    class Table190Row : public CremaRow
    {
    public: 
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 4:51:58
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 4:51:58
        int guessable;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 4:51:58
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 4:51:58
        double Kevlar;
        // Creator: Member_throbbing
        // CreatedDateTime: 2016-07-25 오후 4:51:58
        // Modifier: Member_throbbing
        // ModifiedDateTime: 2016-07-25 오후 4:51:58
        unsigned short tatterdemalion;
        const class Table190Table* Table;
    public: 
        Table190Row(CremaReader::irow& row, Table190Table* table);
    };
    // Creator: Member_throbbing
    // CreatedDateTime: 2016-07-25 오후 4:51:58
    // Modifier: Member_throbbing
    // ModifiedDateTime: 2016-07-25 오후 4:51:58
    // ContentsModifier: Member_Garwin
    // ContentsModifiedDateTime: 2016-07-25 오후 10:41:38
    class Table190Table : public CremaTable<Table190Row>
    {
    public: 
        Table190Table();
        Table190Table(CremaReader::itable& table);
    public: 
        virtual ~Table190Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table190Row* Find(int guessable) const;
    };
    class Table156Row : public CremaRow
    {
    public: 
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오후 1:08:20
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오후 1:08:20
        Type12 Jolla;
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오후 1:08:20
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오후 1:08:20
        short thirster;
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오후 1:08:20
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오후 1:08:20
        int claque;
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오후 1:08:20
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오후 1:08:20
        int Klingon;
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오후 1:08:20
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오후 1:08:20
        time_t ascendancy;
        // Creator: Admin_toe
        // CreatedDateTime: 2016-07-25 오후 1:08:20
        // Modifier: Admin_toe
        // ModifiedDateTime: 2016-07-25 오후 1:08:20
        Type_where Merci;
        const class Table156Table* Table;
    public: 
        Table156Row(CremaReader::irow& row, Table156Table* table);
    };
    // Creator: Admin_toe
    // CreatedDateTime: 2016-07-25 오후 1:08:20
    // Modifier: Admin_toe
    // ModifiedDateTime: 2016-07-25 오후 1:08:20
    // ContentsModifier: Member_Edgardo
    // ContentsModifiedDateTime: 2016-07-25 오후 1:36:31
    class Table156Table : public CremaTable<Table156Row>
    {
    public: 
        Table156Table();
        Table156Table(CremaReader::itable& table);
    public: 
        virtual ~Table156Table();
    protected: 
        virtual void* CreateRow(CremaReader::irow& row, void* table);
    public: 
        const class Table156Row* Find(Type12 Jolla, short thirster, int Klingon) const;
    };
    class CremaDataSet : public CremaData
    {
    public: 
        const Table_inerrantTable* Table_inerrant;
        const Table204Table* Table204;
        const Table_CarolTable* Table_Carol;
        const Table141Table* Table141;
        const Table40Table* Table40;
        const Table57Table* Table57;
        const Table206Table* Table206;
        const Table_conicalTable* Table_conical;
        const Table22Table* Table22;
        const Table_hydrosphereTable* Table_hydrosphere;
        const Table46Table* Table46;
        const Table_agapaeTable* Table_agapae;
        const Table10Table* Table10;
        const Table_CarolanTable* Table_Carolan;
        const Table_repressivenessTable* Table_repressiveness;
        const Table183Table* Table183;
        const Table94Table* Table94;
        const Table82Table* Table82;
        const Table87Table* Table87;
        const Table_implacablenessTable* Table_implacableness;
        const Table_fleeingTable* Table_fleeing;
        const Table50Table* Table50;
        const Table53Table* Table53;
        const Table89Table* Table89;
        const Table109Table* Table109;
        const Table180Table* Table180;
        const Table20Table* Table20;
        const Table21Table* Table21;
        const Table43Table* Table43;
        const Table51Table* Table51;
        const Table108Table* Table108;
        const Table76Table* Table76;
        const Table_duxesTable* Table_duxes;
        const Table196Table* Table196;
        const Table150Table* Table150;
        const Table_replenishTable* Table_replenish;
        const Table_bedpanTable* Table_bedpan;
        const Table_wristTable* Table_wrist;
        const Table33Table* Table33;
        const Table_drawnTable* Table_drawn;
        const Table_HallinanTable* Table_Hallinan;
        const Table175Table* Table175;
        const Table85Table* Table85;
        const Table151Table* Table151;
        const Table_alienTable* Table_alien;
        const Table_crystallizesTable* Table_crystallizes;
        const Table112Table* Table112;
        const Table116Table* Table116;
        const Table199Table* Table199;
        const Table9Table* Table9;
        const Table_piquantnessTable* Table_piquantness;
        const Table111Table* Table111;
        const Table28Table* Table28;
        const Table_surveyTable* Table_survey;
        const Table128Table* Table128;
        const Table31Table* Table31;
        const Table34Table* Table34;
        const Table_stockpileTable* Table_stockpile;
        const Table44Table* Table44;
        const Table67Table* Table67;
        const Table_accidentTable* Table_accident;
        const Table_symbioticTable* Table_symbiotic;
        const Table_ThornburgTable* Table_Thornburg;
        const Table_vixenishTable* Table_vixenish;
        const Table142Table* Table142;
        const Table96Table* Table96;
        const Table98Table* Table98;
        const Table_refunderTable* Table_refunder;
        const Table_wolvesTable* Table_wolves;
        const Table45Table* Table45;
        const Table83Table* Table83;
        const Table_sherbetTable* Table_sherbet;
        const Table_freighterTable* Table_freighter;
        const Table_HanoverianTable* Table_Hanoverian;
        const Table_houriTable* Table_houri;
        const Table191Table* Table191;
        const Table_lunchtimeTable* Table_lunchtime;
        const Table165Table* Table165;
        const Table_dreamlessTable* Table_dreamless;
        const Table81Table* Table81;
        const Table_chicaneTable* Table_chicane;
        const Table90Table* Table90;
        const Table203Table* Table203;
        const Table_attachmentTable* Table_attachment;
        const Table195Table* Table195;
        const Table_PamirsTable* Table_Pamirs;
        const Table_kinderTable* Table_kinder;
        const Table_deathlessTable* Table_deathless;
        const Table117Table* Table117;
        const Table_selectionTable* Table_selection;
        const Table1Table* Table1;
        const Table68Table* Table68;
        const Table_emotionlessTable* Table_emotionless;
        const Table_halterTable* Table_halter;
        const Table_studioTable* Table_studio;
        const Table115Table* Table115;
        const Table182Table* Table182;
        const Table_sunTable* Table_sun;
        const Table_licenseTable* Table_license;
        const Table129Table* Table129;
        const Table_navigableTable* Table_navigable;
        const Table_anchorTable* Table_anchor;
        const Table_LeontineTable* Table_Leontine;
        const Table149Table* Table149;
        const Table17Table* Table17;
        const Table_hoodlumTable* Table_hoodlum;
        const Table138Table* Table138;
        const Table88Table* Table88;
        const Table_BonneeTable* Table_Bonnee;
        const Table_JoycelinTable* Table_Joycelin;
        const Table_reticulateTable* Table_reticulate;
        const Table114Table* Table114;
        const Table118Table* Table118;
        const Table170Table* Table170;
        const Table64Table* Table64;
        const Table_designedTable* Table_designed;
        const Table_scoutTable* Table_scout;
        const Table_summarizerTable* Table_summarizer;
        const Table132Table* Table132;
        const Table133Table* Table133;
        const Table154Table* Table154;
        const Table_fittedTable* Table_fitted;
        const Table_TupungatoTable* Table_Tupungato;
        const Table130Table* Table130;
        const Table200Table* Table200;
        const Table_capsulizeTable* Table_capsulize;
        const Table210Table* Table210;
        const Table192Table* Table192;
        const Table_adulthoodTable* Table_adulthood;
        const Table_gerrymanderTable* Table_gerrymander;
        const Table193Table* Table193;
        const Table_needlessnessTable* Table_needlessness;
        const Table24Table* Table24;
        const Table62Table* Table62;
        const Table_expansionaryTable* Table_expansionary;
        const Table_GiacintaTable* Table_Giacinta;
        const Table_IantheTable* Table_Ianthe;
        const Table_bootprintsTable* Table_bootprints;
        const Table102Table* Table102;
        const Table164Table* Table164;
        const Table120Table* Table120;
        const Table158Table* Table158;
        const Table_gynecologicTable* Table_gynecologic;
        const Table169Table* Table169;
        const Table6Table* Table6;
        const Table172Table* Table172;
        const Table_computingTable* Table_computing;
        const Table124Table* Table124;
        const Table106Table* Table106;
        const Table23Table* Table23;
        const Table60Table* Table60;
        const Table_KitTable* Table_Kit;
        const Table189Table* Table189;
        const Table105Table* Table105;
        const Table15Table* Table15;
        const Table16Table* Table16;
        const Table32Table* Table32;
        const Table4Table* Table4;
        const Table48Table* Table48;
        const Table_apocryphalnessTable* Table_apocryphalness;
        const Table_intactnessTable* Table_intactness;
        const Table_CaribbeanTable* Table_Caribbean;
        const Table_crupperTable* Table_crupper;
        const Table101Table* Table101;
        const Table14Table* Table14;
        const Table2Table* Table2;
        const Table29Table* Table29;
        const Table36Table* Table36;
        const Table79Table* Table79;
        const Table_BriticismTable* Table_Briticism;
        const Table107Table* Table107;
        const Table_AntonyTable* Table_Antony;
        const Table140Table* Table140;
        const Table27Table* Table27;
        const Table_JuddTable* Table_Judd;
        const Table18Table* Table18;
        const Table78Table* Table78;
        const Table_departTable* Table_depart;
        const Table_SusanneTable* Table_Susanne;
        const Table126Table* Table126;
        const Table146Table* Table146;
        const Table80Table* Table80;
        const Table_sclerosesTable* Table_scleroses;
        const Table177Table* Table177;
        const Table75Table* Table75;
        const Table84Table* Table84;
        const Table_flangeTable* Table_flange;
        const Table_FonzTable* Table_Fonz;
        const Table_MelittaTable* Table_Melitta;
        const Table_quartileTable* Table_quartile;
        const Table12Table* Table12;
        const Table202Table* Table202;
        const Table3Table* Table3;
        const Table63Table* Table63;
        const Table136Table* Table136;
        const Table66Table* Table66;
        const Table113Table* Table113;
        const Table52Table* Table52;
        const Table_glideTable* Table_glide;
        const Table179Table* Table179;
        const Table_winglessTable* Table_wingless;
        const Table137Table* Table137;
        const Table_ItoTable* Table_Ito;
        const Table_KatherynTable* Table_Katheryn;
        const Table_LuciusTable* Table_Lucius;
        const Table_MaxwellTable* Table_Maxwell;
        const Table_bangTable* Table_bang;
        const Table_linemanTable* Table_lineman;
        const Table100Table* Table100;
        const Table74Table* Table74;
        const Table97Table* Table97;
        const Table_archaicallyTable* Table_archaically;
        const Table_codenameTable* Table_codename;
        const Table_protectivenessTable* Table_protectiveness;
        const Table_dissuasiveTable* Table_dissuasive;
        const Table110Table* Table110;
        const Table_relentTable* Table_relent;
        const Table_chromatographyTable* Table_chromatography;
        const Table_CPITable* Table_CPI;
        const Table_metempsychosesTable* Table_metempsychoses;
        const Table122Table* Table122;
        const Table134Table* Table134;
        const Table25Table* Table25;
        const Table73Table* Table73;
        const Table_oxidizesTable* Table_oxidizes;
        const Table_KerouacTable* Table_Kerouac;
        const Table13Table* Table13;
        const Table_gangliaTable* Table_ganglia;
        const Table_approveTable* Table_approve;
        const Table_SCTable* Table_SC;
        const Table_ReadeTable* Table_Reade;
        const Table201Table* Table201;
        const Table_culpritTable* Table_culprit;
        const Table_tsunamiTable* Table_tsunami;
        const Table135Table* Table135;
        const Table19Table* Table19;
        const Table37Table* Table37;
        const Table_alibiTable* Table_alibi;
        const Table38Table* Table38;
        const Table58Table* Table58;
        const Table_consanguineousTable* Table_consanguineous;
        const Table42Table* Table42;
        const Table72Table* Table72;
        const Table92Table* Table92;
        const Table99Table* Table99;
        const Table_JerryTable* Table_Jerry;
        const Table_LeeuwenhoekTable* Table_Leeuwenhoek;
        const Table_pertainTable* Table_pertain;
        const Table163Table* Table163;
        const Table174Table* Table174;
        const Table188Table* Table188;
        const Table_globetrotterTable* Table_globetrotter;
        const Table173Table* Table173;
        const Table187Table* Table187;
        const Table_AugTable* Table_Aug;
        const Table181Table* Table181;
        const Table49Table* Table49;
        const Table_cognizancesTable* Table_cognizances;
        const Table145Table* Table145;
        const Table26Table* Table26;
        const Table_adenoidTable* Table_adenoid;
        const Table_visualizationTable* Table_visualization;
        const Table147Table* Table147;
        const Table197Table* Table197;
        const Table_blusteringTable* Table_blustering;
        const Table_creepyTable* Table_creepy;
        const Table_teashopTable* Table_teashop;
        const Table178Table* Table178;
        const Table35Table* Table35;
        const Table41Table* Table41;
        const Table8Table* Table8;
        const Table_annoyTable* Table_annoy;
        const Table_headdressTable* Table_headdress;
        const Table_ValinaTable* Table_Valina;
        const Table_WeinbergTable* Table_Weinberg;
        const Table198Table* Table198;
        const Table_longsightedTable* Table_longsighted;
        const Table161Table* Table161;
        const Table_intervalTable* Table_interval;
        const Table_recopyTable* Table_recopy;
        const Table_RivaTable* Table_Riva;
        const Table_TamarraTable* Table_Tamarra;
        const Table190Table* Table190;
        const Table156Table* Table156;
        const Table_accidentTable* Table_throb;
        const Table_alienTable* Table_nonfreezing;
        const Table_alienTable* Table_penitence;
        const Table_alienTable* Table_amain;
        const Table_alienTable* Table_Little;
        const Table_alienTable* Table_Bodenheim;
        const Table_annoyTable* Table_kipping;
        const Table_apocryphalnessTable* Table_PASCAL;
        const Table_approveTable* Table_undergone;
        const Table_bedpanTable* Table_nonuniform;
        const Table_bedpanTable* Table_techs;
        const Table_bedpanTable* Table_incorporate;
        const Table_bedpanTable* Table_Charolais;
        const Table_blusteringTable* Table_overhand;
        const Table_bootprintsTable* Table_fiddle;
        const Table_capsulizeTable* Table_overdriven;
        const Table_capsulizeTable* Table_crosspoint;
        const Table_CaribbeanTable* Table_parlous;
        const Table_CarolanTable* Table_text;
        const Table_chromatographyTable* Table_Crimea;
        const Table_conicalTable* Table_Kynthia;
        const Table_deathlessTable* Table_noble;
        const Table_departTable* Table_stipend;
        const Table_drawnTable* Table_dandelion;
        const Table_duxesTable* Table_segregated;
        const Table_expansionaryTable* Table_buy;
        const Table_gangliaTable* Table_glittering;
        const Table_gerrymanderTable* Table_subject;
        const Table_GiacintaTable* Table_naked;
        const Table_halterTable* Table_hubris;
        const Table_halterTable* Table_eradication;
        const Table_halterTable* Table_primed;
        const Table_headdressTable* Table_McLeod;
        const Table_headdressTable* Table_stencil;
        const Table_inerrantTable* Table_Gorgonzola;
        const Table_intervalTable* Table_Craig;
        const Table_ItoTable* Table_duplicable;
        const Table_ItoTable* Table_defiance;
        const Table_JerryTable* Table_casein;
        const Table_JoycelinTable* Table_nonphysical;
        const Table_JuddTable* Table_Melisent;
        const Table_JuddTable* Table_Margery;
        const Table_KatherynTable* Table_Roana;
        const Table_KitTable* Table_otherness;
        const Table_LuciusTable* Table_photogenically;
        const Table_MaxwellTable* Table_Marjory;
        const Table_MelittaTable* Table_Scottish;
        const Table_needlessnessTable* Table_deluge;
        const Table_needlessnessTable* Table_Shell;
        const Table_quartileTable* Table_embosser;
        const Table_refunderTable* Table_Yukon;
        const Table_refunderTable* Table_imply;
        const Table_refunderTable* Table_subparagraph;
        const Table_replenishTable* Table_downland;
        const Table_replenishTable* Table_Olympian;
        const Table_repressivenessTable* Table_Excalibur;
        const Table_repressivenessTable* Table_Rollo;
        const Table_repressivenessTable* Table_rotate;
        const Table_RivaTable* Table_delfs;
        const Table_sherbetTable* Table_communistic;
        const Table_stockpileTable* Table_Angelo;
        const Table_sunTable* Table_tonearm;
        const Table_teashopTable* Table_pupillage;
        const Table_wristTable* Table_mistrust;
        const Table1Table* Table_bedding;
        const Table1Table* Table_scented;
        const Table10Table* Table_taxi;
        const Table10Table* Table_consular;
        const Table10Table* Table_foreknown;
        const Table10Table* Table_tremor;
        const Table10Table* Table_satisfiability;
        const Table10Table* Table_Stoppard;
        const Table100Table* Table_triableness;
        const Table110Table* Table_submerge;
        const Table118Table* Table_Hooper;
        const Table118Table* Table_positivity;
        const Table13Table* Table_buckler;
        const Table13Table* Table_WWI;
        const Table14Table* Table_shotgunning;
        const Table15Table* Table_Celestyn;
        const Table16Table* Table_devoutness;
        const Table16Table* Table_multivariate;
        const Table16Table* Table_yow;
        const Table165Table* Table_bigamy;
        const Table17Table* Table_luncheon;
        const Table17Table* Table_Morison;
        const Table174Table* Table_peahen;
        const Table175Table* Table_Tandy;
        const Table18Table* Table_pipework;
        const Table18Table* Table_abhorrer;
        const Table18Table* Table_discrepant;
        const Table180Table* Table_Dominik;
        const Table183Table* Table_Torr;
        const Table19Table* Table_contortionist;
        const Table19Table* Table_featherless;
        const Table19Table* Table_midtown;
        const Table19Table* Table_centigram;
        const Table19Table* Table_stalag;
        const Table196Table* Table_Beryle;
        const Table2Table* Table_information;
        const Table2Table* Table_kilobyte;
        const Table2Table* Table_brainless;
        const Table2Table* Table_irresponsibly;
        const Table2Table* Table_imperfection;
        const Table202Table* Table_oases;
        const Table21Table* Table_frolicker;
        const Table23Table* Table_Maimonides;
        const Table24Table* Table_applejack;
        const Table24Table* Table_inventory;
        const Table24Table* Table_leering;
        const Table24Table* Table_prefabbing;
        const Table25Table* Table_freewheel;
        const Table26Table* Table_defile;
        const Table26Table* Table_wiry;
        const Table27Table* Table_Adair;
        const Table28Table* Table_Broderick;
        const Table28Table* Table_pyroxenite;
        const Table31Table* Table_cutesy;
        const Table31Table* Table_Amish;
        const Table31Table* Table_ephemerids;
        const Table32Table* Table_starlit;
        const Table33Table* Table_agog;
        const Table34Table* Table_dribbler;
        const Table37Table* Table_chuckling;
        const Table38Table* Table_sandpit;
        const Table40Table* Table_blockbusting;
        const Table42Table* Table_patron;
        const Table43Table* Table_assumption;
        const Table43Table* Table_interscholastic;
        const Table43Table* Table_thigh;
        const Table45Table* Table_industrialize;
        const Table45Table* Table_fortissimo;
        const Table48Table* Table_stab;
        const Table48Table* Table_workaround;
        const Table49Table* Table_tiring;
        const Table49Table* Table_conciliator;
        const Table51Table* Table_flush;
        const Table51Table* Table_wavy;
        const Table51Table* Table_spicily;
        const Table52Table* Table_Gorbachev;
        const Table52Table* Table_sauropod;
        const Table53Table* Table_automation;
        const Table58Table* Table_verruca;
        const Table58Table* Table_PG;
        const Table58Table* Table_clockmaker;
        const Table6Table* Table_Hebraism;
        const Table6Table* Table_evict;
        const Table6Table* Table_tripod;
        const Table60Table* Table_agitated;
        const Table62Table* Table_addend;
        const Table64Table* Table_robbed;
        const Table66Table* Table_lassoer;
        const Table66Table* Table_Bayonne;
        const Table73Table* Table_sealskin;
        const Table76Table* Table_Antaeus;
        const Table78Table* Table_corn;
        const Table79Table* Table_tush;
        const Table8Table* Table_Pierce;
        const Table80Table* Table_Shanghai;
        const Table80Table* Table_ENE;
        const Table83Table* Table_suggest;
        const Table85Table* Table_Ethyl;
        const Table88Table* Table_Biron;
        const Table88Table* Table_consist;
        const Table9Table* Table_Hus;
        const Table9Table* Table_smashup;
        const Table90Table* Table_denouncement;
        const Table96Table* Table_Amity;
        const Table97Table* Table_oolitic;
        const Table97Table* Table_Bertrand;
        const Table99Table* Table_Dalmatia;
    public: 
        CremaDataSet(CremaReader::idataset& dataSet);
        CremaDataSet(const std::string& filename);
    public: 
        virtual ~CremaDataSet();
    };
}/*namespace cremacode*/

