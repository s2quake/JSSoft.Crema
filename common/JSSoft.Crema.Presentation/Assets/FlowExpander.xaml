<!--===================================================================================================================
Released under the MIT License.
    
Copyright (c) 2018 Ntreev Soft co., Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated 
documentation files (the "Software"), to deal in the Software without restriction, including without limitation the 
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit 
persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the 
Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
====================================================================================================================-->
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:ncpc="clr-namespace:JSSoft.Crema.Presentation.Controls">

    <!-- Animated Expander Button's Template-->
    <ControlTemplate x:Key="LeftDirection_ToggleButton_Template" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder" Background="Transparent" BorderBrush="Transparent"
                BorderThickness="0" Padding="0" Width="12">
            <Grid>
                <Rectangle Fill="Transparent" Grid.ColumnSpan="2" />
                <Ellipse Name="Circle" Grid.Column="0" Stroke="Transparent" Width="20" Height="20"
                         HorizontalAlignment="Center" VerticalAlignment="Center" />
                <Path x:Name="Arrow" Fill="{DynamicResource ButtonText}" Grid.Column="0"
                      Data="M 6,1 L 1,7 6,13" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" To="180" Duration="0:0:0.2"
                                             Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" To="0" Duration="0:0:0.2"
                                             Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SeparatorBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SeparatorBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="RightDirection_ToggleButton_Template" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder" Background="Transparent" BorderBrush="Transparent"
                BorderThickness="0" Padding="0" Width="12">
            <Grid>
                <Rectangle Fill="Transparent" Grid.ColumnSpan="2" />
                <Ellipse Name="Circle" Grid.Column="0" Stroke="Transparent"
                         Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center" />
                <Path x:Name="Arrow"
                      Fill="{DynamicResource ButtonText}"
                      Grid.Column="0"
                      Data="M 1,1 L 6,7 1,13"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5">
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" To="180" Duration="0:0:0.2"
                                             Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow" To="0" Duration="0:0:0.2"
                                             Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SeparatorBackground}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="true">
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource SeparatorBackground}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="upToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="0"
                    Height="12"
                    >
            <Grid>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2" />
                <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="Transparent"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                <Path x:Name="Arrow"
                      Fill="{DynamicResource Text2Brush}"
                      Grid.Column="0"
                      Data="M 1,7 L 7,1 13,7"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                                 Value="true">
                <Setter Property="Fill"
                                    Value="{DynamicResource SeparatorBackground}"
                                    TargetName="Arrow" />
            </Trigger>
            <Trigger Property="IsPressed"
                                 Value="true">
                <Setter Property="Fill"
                                    Value="{DynamicResource SeparatorBackground}"
                                    TargetName="Arrow" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="bottomToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ExpanderButtonBorder"
                    Background="{TemplateBinding Background}"
                    BorderBrush="{TemplateBinding BorderBrush}"
                    BorderThickness="{TemplateBinding BorderThickness}"
                    Padding="{TemplateBinding Padding}"
                    >
            <Grid>
                <Rectangle Fill="Transparent"
                               Grid.ColumnSpan="2" />
                <Ellipse Name="Circle"
                         Grid.Column="0"
                         Stroke="Transparent"
                         Width="20"
                         Height="20"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         />
                <Path x:Name="Arrow"
                      Fill="{DynamicResource Text2Brush}"
                      Grid.Column="0"
                      Data="M 1,1 L 7,7 13,1"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      RenderTransformOrigin="0.5,0.5"
                      >
                    <Path.RenderTransform>
                        <RotateTransform Angle="0" />
                    </Path.RenderTransform>
                </Path>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <!-- Animate arrow when toggled-->
            <Trigger Property="IsChecked"
                         Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="180"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                                                 Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)"
                                                 To="0"
                                                 Duration="0:0:0.2" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>

            <!-- MouseOver, Pressed behaviours-->
            <Trigger Property="IsMouseOver"
                                 Value="true">
                <Setter Property="Fill"
                                    Value="{DynamicResource SeparatorBackground}"
                                    TargetName="Arrow" />
            </Trigger>
            <Trigger Property="IsPressed"
                                 Value="true">
                <Setter Property="Fill"
                                    Value="{DynamicResource SeparatorBackground}"
                                    TargetName="Arrow" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="RightDirection_FlowExpander_Template" TargetType="{x:Type ncpc:FlowExpander}">
        <DockPanel>
            <ToggleButton x:Name="PART_Button" 
                          Background="Transparent"
                          DockPanel.Dock="Left"
                          Template="{DynamicResource RightDirection_ToggleButton_Template}"
                          Content="{TemplateBinding Header}"
                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          OverridesDefaultStyle="True">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent" Grid.Column="1" ContentSource="Content" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="ExpanderContent" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="LeftDirection_FlowExpander_Template" TargetType="{x:Type ncpc:FlowExpander}">
        <DockPanel>
            <ToggleButton x:Name="PART_Button" 
                          DockPanel.Dock="Right"
                          Template="{DynamicResource LeftDirection_ToggleButton_Template}"
                          Content="{TemplateBinding Header}"
                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                          OverridesDefaultStyle="True">
            </ToggleButton>
            <ContentPresenter x:Name="ExpanderContent" Grid.Column="0" ContentSource="Content"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="ExpanderContent" Property="Visibility" Value="Collapsed" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ncpc:FlowExpander}">
        <Style.Triggers>
            <Trigger Property="ExpandDirection" Value="Right" >
                <Setter Property="Template" Value="{StaticResource RightDirection_FlowExpander_Template}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Left" >
                <Setter Property="Template" Value="{StaticResource LeftDirection_FlowExpander_Template}" />
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Up">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ncpc:FlowExpander}">
                            <DockPanel>
                                <ToggleButton x:Name="ExpanderButton" 
                                              DockPanel.Dock="Bottom"
                                              Template="{DynamicResource upToggleButton}"
                                              Content="{TemplateBinding Header}"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                              OverridesDefaultStyle="True">
                                </ToggleButton>
                                <ContentPresenter x:Name="ExpanderContent" ContentSource="Content" DockPanel.Dock="Top">
                                    <ContentPresenter.LayoutTransform>
                                        <ScaleTransform ScaleY="0" />
                                    </ContentPresenter.LayoutTransform>
                                </ContentPresenter>
                            </DockPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="ExpandDirection" Value="Down" >
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ncpc:FlowExpander}">
                            <DockPanel>
                                <ToggleButton x:Name="ExpanderButton" 
                              DockPanel.Dock="Top"
                              Template="{DynamicResource bottomToggleButton}"
                              Content="{TemplateBinding Header}"
                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                              OverridesDefaultStyle="True">
                                </ToggleButton>
                                <ContentPresenter x:Name="ExpanderContent"
                                  ContentSource="Content"
                                  DockPanel.Dock="Bottom"
                                  >
                                    <ContentPresenter.LayoutTransform>
                                        <ScaleTransform ScaleY="0" />
                                    </ContentPresenter.LayoutTransform>
                                </ContentPresenter>
                            </DockPanel>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsExpanded" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"                                                 
                                                 To="1"
                                                 Duration="0:0:0.0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="ExpanderContent"
                                                 Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)"
                                                 To="0"
                                                 Duration="0:0:0.0" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

    </Style>

</ResourceDictionary>
    