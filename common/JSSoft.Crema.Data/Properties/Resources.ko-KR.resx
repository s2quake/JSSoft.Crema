<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exception_CannotConvert_Format" xml:space="preserve">
    <value>'{0}'은(는) '{1}' 으로 변환할 수 없습니다.</value>
    <comment>value, dataTypeName</comment>
  </data>
  <data name="Exception_CannotCopyToSameDataSet" xml:space="preserve">
    <value>같은 DataSet에는 복사할 수 없습니다.</value>
  </data>
  <data name="Exception_CannotInheritWithoutDataSet" xml:space="preserve">
    <value>테이블이 DataSet에 없는 경우에는 테이블을 상속할 수 없습니다.</value>
  </data>
  <data name="Exception_AlreadyExistedItem_Format" xml:space="preserve">
    <value>'{0}' 항목은 이미 존재합니다.</value>
  </data>
  <data name="Exception_AreadyExistedDataType_Format" xml:space="preserve">
    <value>'{0}' 은(는) 이미 존재하는 타입입니다.</value>
    <comment>dataTypeName</comment>
  </data>
  <data name="Exception_AtLeastOneColumn" xml:space="preserve">
    <value>적어도 한개 이상의 열이 있어야 합니다.</value>
  </data>
  <data name="Exception_AtLeastOneKey" xml:space="preserve">
    <value>적어도 한개 이상의 키가 설정되어야 합니다.</value>
  </data>
  <data name="Exception_CannotAddChildTable" xml:space="preserve">
    <value>자식 테이블은 추가할 수 없습니다.</value>
  </data>
  <data name="Exception_CannotAddInheritedTable" xml:space="preserve">
    <value>상속 받은 테이블은 추가할 수 없습니다.</value>
  </data>
  <data name="Exception_CannotDeleteAsTypeIsReferenced" xml:space="preserve">
    <value>타입이 참조되고 있기 때문에 삭제할 수 없습니다.</value>
  </data>
  <data name="Exception_CannotEditInheritedTable" xml:space="preserve">
    <value>상속받은 테이블은 편집할 수 없습니다.</value>
  </data>
  <data name="Exception_CannotParseEnum_Format" xml:space="preserve">
    <value>'{0}' 값은 '{1}' 타입에 정의되어 있지 않아 변환할 수 없습니다.</value>
    <comment>enumValue, enumTypeName</comment>
  </data>
  <data name="Exception_CannotRemoveChildTable" xml:space="preserve">
    <value>자식 테이블은 제거할 수 없습니다.</value>
  </data>
  <data name="Exception_InvalidName" xml:space="preserve">
    <value>이름에 특수문자 \ / : * ? " &lt; &gt; | 등은 포함될 수 없습니다.</value>
  </data>
  <data name="Exception_NameCannotBeUsed_Format" xml:space="preserve">
    <value>'{0}' (은)는 사용할 수 없는 이름입니다.</value>
    <comment>columnName</comment>
  </data>
  <data name="Exception_NotEqualsFieldCountAndColumnCount" xml:space="preserve">
    <value>필드 갯수가 테이블의 열의 갯수와 일치하지 않습니다.</value>
  </data>
  <data name="Exception_NotFoundAttribute_Format" xml:space="preserve">
    <value>'{0}' 특성은 존재하지 않습니다.</value>
    <comment>attributeName</comment>
  </data>
  <data name="Exception_NotFoundColumn_Format" xml:space="preserve">
    <value>'{0}' 열은 테이블에 존재하지 않습니다.</value>
    <comment>columnName</comment>
  </data>
  <data name="Exception_NotFoundDirectory_Format" xml:space="preserve">
    <value>'{0}' 경로를 찾을 수 없습니다.</value>
    <comment>pathName</comment>
  </data>
  <data name="Exception_ReservedAttributeName_Format" xml:space="preserve">
    <value>'{0}' 은(는) 예약되어 있는 이름이기 때문에 '특성'의 이름으로 사용할 수 없습니다.</value>
    <comment>attributeName</comment>
  </data>
  <data name="Exception_ReservedColumnName_Format" xml:space="preserve">
    <value>'{0}' 은(는) 예약되어 있는 이름이기 때문에 '열'의 이름으로 사용할 수 없습니다.</value>
    <comment>columnName</comment>
  </data>
  <data name="Exception_ReservedName_Format" xml:space="preserve">
    <value>'{0}' 은(는) 예약되어 있는 이름이기 때문에 사용할 수 없습니다.</value>
    <comment>name</comment>
  </data>
  <data name="Exception_TypeCannotBeUsed_Format" xml:space="preserve">
    <value>'{0}' 타입은 사용할 수 없습니다.</value>
  </data>
  <data name="Exception_UnresolvedChildTablesExist" xml:space="preserve">
    <value>아직 해결되지 않은 자식 테이블이 남아 있습니다.</value>
  </data>
  <data name="Exception_UnresolvedProblemsExist" xml:space="preserve">
    <value>아직 해결되지 않은 문제점이 남아 있습니다.</value>
  </data>
  <data name="Exception_UsableOnChildTable" xml:space="preserve">
    <value>자식 테이블에서만 사용이 가능합니다.</value>
  </data>
  <data name="Exception_NotIncludedInDataSet" xml:space="preserve">
    <value>DataSet에 포함되어 있지 않습니다.</value>
  </data>
</root>